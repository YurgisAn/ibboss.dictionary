{"version":3,"file":"effector.cjs.js","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/createWatch.ts","effector/observable.ts","effector/getter.ts","effector/validate.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/split.ts","effector/fork/serialize.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      assert(isFunction(fn), 'second argument should be a function')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (!ignored) setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>();\n    store.reset(store.reinit);\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializer = scope.sidSerializeMap[sid] || noopSerializer\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any>,\n  {scope, params: ctx}: {scope: Scope; params?: unknown},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (!is.effect(start) && !is.event(start) && !is.store(start))\n    return Promise.reject(\n      new Error('first argument accepts only effects, events and stores'),\n    )\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = [start]\n  const launchParams = [] as Array<{params: unknown; req: unknown} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: unknown) {\n              defer.value = {status: 'done', value}\n            },\n            rj(value: unknown) {\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optiionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize && serialize !== 'ignore') {\n              forkPage.sidSerializeMap[sid] = serialize.write\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeMap: {},\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","kernelLoop","deleteMin","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","createEvent","nameOrConfig","maybeConfig","config","flattenConfig","event","deprecate","oldPage","setCurrentPage","create","callCreate","finalEvent","Object","assign","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","domain","hooks","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","isFunction","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","updateFilter","defaultConfig","upd","_","b","read","a","mov","serializeMeta","ignored","customSerialize","sid","setMeta","serialize","reinit","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","scopeRef","createScopeRef","onResolve","onSettled","onReject","ok","runFn","then","op","fx","savedFork","setForkPage","inFlight","x","pending","amount","effect","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","mapOrRecordValues","callback","unsubscribe","observableSymbol","Symbol","observable","graph","val","compositeName","removeItem","pos","indexOf","splice","push","subject","suggestion","console","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","ret","v","getPriority","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","noopParser","sourceRef","isKernelCall","refsMap","_sourceRef$meta","sidValuesMap","sidIdMap","fromSerialize","isFresh","needToAssign","err","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","activeEffects","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","filterRef","hasFilter","syncSourceState","readAndFilter","hasSource","jointNode","src","joint","isSourceStore","launchCase","scopeTargets","noopSerializer","start","ctx","reject","parentFork","defers","launchUnits","launchParams","injected","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","onCreateUnit","hook","scopeLinks","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","sidSerializeMap","write","warnSerialize","resultScope","cloneOf","createScope","oldScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","serializer","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"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"}