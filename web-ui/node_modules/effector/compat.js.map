{"version":3,"file":"compat.js","sources":["effector/collection.ts","effector/throw.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/config.ts","effector/template.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork/util.ts","effector/createWatch.ts","effector/observable.ts","effector/getter.ts","effector/validate.ts","effector/id.ts","effector/own.ts","effector/is.ts","effector/caller.ts","effector/step.ts","effector/stateRef.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/split.ts","effector/fork/serialize.ts","effector/fork/allSettled.ts","effector/attach.ts","effector/createApi.ts","effector/createDomain.ts","effector/fork/fork.ts","effector/fork/createScope.ts","effector/fromObservable.ts","effector/guard.ts","effector/fork/hydrate.ts","effector/restore.ts","effector/fork/scopeBind.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void\n  stack?: Stack | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit => store.on(unit, () => store.defaultState))\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      assert(isFunction(fn), 'second argument should be a function')\n      deprecate(\n        !getMeta(store, 'derived'),\n        '.on in derived store',\n        'createStore',\n      )\n      forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n        store.off(trigger)\n        getSubscribers(store).set(\n          trigger,\n          createSubscription(\n            updateStore(trigger, store, 'on', callARegStack, fn),\n          ),\n        )\n      })\n      return store\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    if (!ignored) setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>();\n    store.reset(store.reinit);\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch({target: instance, params: payload, scope: forkPage})\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializer = scope.sidSerializeMap[sid] || noopSerializer\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any>,\n  {scope, params: ctx}: {scope: Scope; params?: unknown},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (!is.effect(start) && !is.event(start) && !is.store(start))\n    return Promise.reject(\n      new Error('first argument accepts only effects, events and stores'),\n    )\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = [start]\n  const launchParams = [] as Array<{params: unknown; req: unknown} | null>\n  add(\n    launchParams,\n    is.effect(start)\n      ? {\n          params: ctx,\n          req: {\n            rs(value: unknown) {\n              defer.value = {status: 'done', value}\n            },\n            rj(value: unknown) {\n              defer.value = {status: 'fail', value}\n            },\n          },\n        }\n      : ctx,\n  )\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optiionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optiionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize && serialize !== 'ignore') {\n              forkPage.sidSerializeMap[sid] = serialize.write\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeMap: {},\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n"],"names":["forIn","obj","cb","key","forEach","list","fn","assert","condition","message","Error","withRegion","unit","regionStack","parent","value","template","getMeta","readTemplate","sidRoot","getParent","createNode","node","child","to","target","scope","meta","family","familyRaw","type","regional","sources","arrifyNodes","from","source","links","owners","seq","item","add","result","id","nextNodeID","next","link","getOwners","owner","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","Array","isArray","i","length","pushFirstHeapItem","getGraph","isRoot","stop","skip","reg","lastStartedState","isWatch","isPure","idx","stack","hasPageReg","hasScopeReg","local","fail","stepn","step","order","priority","barrierID","fullID","barriers","has","pushHeap","delete","data","STACK","store","pageForRef","getPageForRef","initRefInScope","softRead","undefined","readRef","getPageRef","current","pure","computationResult","safe","tryRun","filter","finalValue","nextNode","fxCount","storeChange","warnSerializeNode","additionalLinks","deleteMin","unitObjectName","objOrArr","method","name","comma","is","getCompositeName","fullName","toString","createName","path","shortName","composite","concat","processArgsToConfig","args","singleArgument","rawConfig","assertObject","metadata","or","childConfig","and","unwrappedNestedValue","isObject","nested","applyTemplate","handlers","callCreate","oldPage","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","config","flattenConfig","event","deprecate","finalEvent","Object","assign","graphite","initUnit","watch","watchUnit","map","deriveEvent","MAP","userFnCall","callStack","filterMap","calc","isVoid","prepend","contramapped","createLinkNode","applyParentHook","domain","hooks","createStore","defaultState","props","plainState","createStateRef","updates","named","derived","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","reset","units","on","nodeSet","assertNodeSet","isFunction","trigger","off","getSubscribers","set","createSubscription","updateStore","callARegStack","currentSubscription","get","firstState","lastResult","storeState","innerStore","linkNode","callStackAReg","addRefOp","getStoreState","noInit","eventOrFn","subscription","updateFilter","defaultConfig","upd","_","b","read","a","mov","serializeMeta","ignored","customSerialize","sid","setMeta","serialize","reinit","combine","handler","stores","structStoreShape","shapeReady","noArraySpread","rawHandler","slice","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","kind","use","runner","getCurrent","anyway","finally","done","status","error","doneData","failData","handlerId","getType","scope_","handler_","scopeRef","createScopeRef","onResolve","onSettled","onReject","runFn","then","op","fx","savedFork","setForkPage","inFlight","x","pending","amount","effect","merge","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","fieldErrorMessage","traverseStores","root","visit","includes","normalizeValues","values","assertEach","mapOrRecordValues","callback","unsubscribe","observableSymbol","Symbol","observable","graph","val","compositeName","removeItem","pos","indexOf","splice","push","subject","suggestion","console","idCount","nextUnitID","nextStepID","readSidRoot","ownerUnit","_link","flat","assertNodeSetItem","valueName","reason","assertTarget","targetField","cmd","batch","nextBarrierID","compute","run","isEffect","toStack","samplerPriority","isFilter","ref","before","heap","v","getPriority","ret","r","l","queue","ix","first","last","size","bucket","t","Set","newForkPage","newPage","isGetState","noopParser","sourceRef","isKernelCall","refsMap","_sourceRef$meta","sidValuesMap","sidIdMap","fromSerialize","isFresh","needToAssign","err","part","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","events","effects","domains","scopeFn","hookType","isDomain","unitId","thru","subscribe","observer","nativeTemplate","mapped","caller","storeRef","reader","needSpread","clone","stateNew","rawShape","storeStateRef","rawShapeReader","c","childRef","defaultShape","activeEffects","ok","sidechain","createSampling","clock","batched","targetMayBeStore","filterRequired","isUpward","sourceIsClock","filterType","clockState","filterNodes","syncSourceState","filterRef","readAndFilter","hasSource","jointNode","src","joint","isSourceStore","launchCase","scopeTargets","noopSerializer","start","ctx","reject","parentFork","defers","launchUnits","launchParams","mapParams","attached","runnerSteps","runnerFnStep","computedParams","sourceData","isEffectHandler","parentDomain","setters","createDomain","Event","Effect","Store","Domain","factory","tag","lowerCaseTag","toLowerCase","onCreateUnit","hook","scopeLinks","domainOrConfig","optiionalConfig","forkInFlightCounter","fxID","resolve","__","storeStack","storeNode","sidSerializeMap","write","warnSerialize","resultScope","cloneOf","createScope","oldScope","valuesSidMap","opts","observableItem","disposer","complete","greedy","traverseTarget","normalizedValues","valuesSidList","getOwnPropertyNames","storeNodes","storeValues","serializer","savedForkPage","ignoredStores","ignore","onlyChanges","rawName","targets","METHOD","match","configForm","cases","matchIsUnit","matchIsFunction","matchIsShape","splitterSeq","caseNames","keys","String","lastValues","needBarrier","storeOrFn","updater","caseName","splitterNode","loc"],"mappings":"aAAO,SAASA,EACdC,EACAC,OAEK,IAAMC,KAAOF,EAChBC,EAAGD,EAAIE,GAAMA,GAwBV,SAASC,EAAQC,EAAWC,GACjCD,EAAKD,QAAQE,GC9BR,SAASC,EAAOC,EAAoBC,OACpCD,EAAW,MAAME,MAAMD,GCqBvB,SAASE,EAAWC,EAAgBV,GACzCW,EAAc,CACZC,OAAQD,EACRE,MAAOH,EACPI,SAAUC,EAAQL,EAAM,aAAeM,IACvCC,QAASF,EAAQL,EAAM,YAAeC,GAAeA,EAAYM,oBAG1DjB,YAEPW,EAAcO,EAAUP,ICpBrB,SAASQ,sBA4BZ,SA3BFC,KAAAA,aAAO,SAGPR,WAGAS,MAAAA,eAFAC,MACAC,aAEAC,MAAAA,aAAQ,SACRC,KAAAA,aAAO,SACPC,OAAQC,aAAY,CAACC,KAAM,aAC3BC,IAAAA,SAkBMC,EAAUC,gBA3BhBC,QACAC,UA2BMC,EAAQH,GAAYJ,EAAUO,OAC9BC,EAASJ,GAAYJ,EAAUQ,QAC/BC,EAAa,GACnBlC,EAAQkB,GAAM,SAAAiB,UAAQA,GAAQC,EAAIF,EAAKC,UACjCE,EAAe,CACnBC,GAAIC,IACJL,IAAAA,EACAM,KAAMX,GAAYV,GAClBI,KAAAA,EACAD,MAAAA,EACAE,OAAQ,CACNE,KAAMD,EAAUC,MC/CG,YDgDnBM,MAAAA,EACAC,OAAAA,WAGJjC,EAAQgC,GAAO,SAAAS,UAAQL,EAAIM,EAAUD,GAAOJ,MAC5CrC,EAAQiC,GAAQ,SAAAU,UAASP,EAAIQ,EAASD,GAAQN,MAC9CrC,EAAQ4B,GAAS,SAAAG,UAAUK,EAAIL,EAAOS,KAAMH,MACxCV,GAAYlB,GACdoC,GAAIC,EAASrC,GAAc,CAAC4B,IAEvBA,EE4KF,SAASU,EAAOvC,EAAWwC,EAAeC,OAC3CC,EAAgBC,GAChBC,EAAiB,KACjBC,EAAoBC,MACpB9C,EAAKa,SACP2B,EAAUxC,EAAK+C,OACfN,EAASzC,EAAKgD,MACdN,EAAgB,SAAU1C,EAAOA,EAAKiD,KAAOP,EACzC1C,EAAI,QAAS4C,EAAiB5C,EAAI,OACtC6C,EAAoBK,EAAYlD,IAAS6C,EACzC7C,EAAOA,EAAKa,QAEVgC,GAAqBC,IAAYD,IAAsBC,KACzDA,GAAW,MAETK,MAAMC,QAAQpD,OACX,IAAIqD,EAAI,EAAGA,EAAIrD,EAAKsD,OAAQD,IAC/BE,GACE,OACAb,EACAc,EAASxD,EAAKqD,IACdT,EACAJ,EAAQa,GACRR,QAIJU,GACE,OACAb,EACAc,EAASxD,GACT4C,EACAJ,EACAK,OAGAJ,GAAWgB,QAUXC,EACAC,EACAjD,EACAP,EACA8C,EACAW,EAbEC,EAAmB,CACvBJ,OAAAA,GACAd,YAAAA,GACA7B,MAAOgC,GACPgB,QAAAA,GACAC,OAAAA,IAEFN,GAAS,EAOG,yBACHO,EAAoB7D,EAApB6D,IAAKC,EAAe9D,EAAf8D,MAAO/C,EAAQf,EAARe,KACnBR,EAAOuD,EAAMvD,KACbiC,GAAcM,EAAOgB,EAAMhB,KAC3BH,GAAWI,EAAYe,GACnBhB,EAAMW,EAAMX,EAAKW,IACZd,KAAUc,EAAMd,GAASc,SAE5BM,IAAejB,EACfkB,IAAgBrB,GAChBsB,EAAe,CACnBC,KAAM,EACNvD,MAAOJ,EAAKI,OAEd4C,EAAOC,EAAO,MACT,IAAIW,EAAQN,EAAKM,EAAQ5D,EAAKgB,IAAI4B,SAAWI,EAAMY,IAAS,KACzDC,EAAO7D,EAAKgB,IAAI4C,MAClBC,EAAKC,MAAO,OACgBD,EAAKC,MAA5BC,IAAAA,SAAUC,IAAAA,UACX5C,EAAK4C,EACPzB,EACKA,EAAK0B,WAAUD,EAClBA,EACF,KACAJ,IAAUN,GAAO9C,IAASuD,SACxBC,EACGE,GAASC,IAAI/C,KAChB8C,GAAShD,IAAIE,GACbgD,GAASR,EAAOL,EAAOQ,EAAUC,IAGnCI,GAASR,EAAOL,EAAOQ,yBAI3BC,GAAaE,GAASG,OAAOjD,UAEvByC,EAAKrD,UACN,UACG8D,EAAOT,EAAKS,KACd7E,gBAEI6E,EAAK1D,WACN2D,EAAO9E,EAAQmC,EAAS2B,aD9TpB,QCgUJ,IACH9D,EAAQ8D,EAAMe,EAAK1D,gBDpUZ,QCsUGnB,EAAQ6E,EAAKE,gBDhVhB,WCkVHtB,IAAQA,EAAIoB,EAAKE,MAAMpD,OAErBoC,EAAY,KACRiB,EAAaC,GAAcnC,EAAM+B,EAAKE,MAAMpD,IAClDmC,EAAMhB,KAAOA,EAAOkC,EAChBA,EACFvB,EAAMuB,EAAWvB,IACRO,GACTkB,GAAevC,GAAWkC,EAAKE,MAAO,EAAO,EAAMF,EAAKM,UACxD1B,EAAMd,GAAUc,KAEhBA,OAAM2B,OAECpB,GAETkB,GAAevC,GAAWkC,EAAKE,MAAO,EAAO,EAAMF,EAAKM,UAQ5DnF,EAAQqF,GAAQ5B,GAAMA,EAAIoB,EAAKE,MAAMpD,KAAoBkD,EAAKE,cAI1DF,EAAKpE,SACNqE,EAAOhB,EAAM9D,MAAQA,YDjWjB,QCmWJ,IACH8D,EAAMe,EAAKpE,IAAMT,YDjXV,QCoXPsF,GAAWxC,EAAMH,GAAUpC,EAAMsE,EAAKnE,QAAQ6E,QAAUvF,YAKzD,cACG6E,EAAOT,EAAKS,QACdA,EAAKtF,GAAI,CACXoE,GAAkC,UAAxBzD,EAAQK,EAAM,MACxBqD,GAASiB,EAAKW,SACRC,EAAoBZ,EAAKa,MAC3B,EAAWb,EAAKtF,IAAI4C,EAAS2B,GAAQG,EAAMtD,MAAOmD,GAClD6B,GAAO1B,EAAOY,EAAKtF,GAAIuE,GACvBe,EAAKe,OAMPpC,GAAQiC,EAER3B,EAAM9D,MAAQyF,EAEhB9B,GAAUD,EAAiBC,QAC3BC,GAASF,EAAiBE,QAIhCL,EAAOU,EAAMC,MAAQV,MAElBD,EAAM,KACHsC,EAAa1D,EAAS2B,GACtBnB,EAAWI,EAAYe,MAC7BzE,EAAQkB,EAAKsB,MAAM,SAAAiE,GACjB1C,GAAkB,QAASN,EAAMgD,EAAUhC,EAAO+B,EAAYlD,MAE5DA,EAAU,CACRzC,EAAQK,EAAM,kBAChB6C,GACE,QACAN,EACAH,EAASoD,QACTjC,EACA+B,EACAlD,GAEAzC,EAAQK,EAAM,gBAChB6C,GACE,QACAN,EACAH,EAASqD,YACTlC,EACA+B,EACAlD,GAEAzC,EAAQK,EAAM,kBAChB6C,GACE,QACAN,EACAH,EAASsD,kBACTnC,EACA+B,EACAlD,OAEEuD,EAAkBvD,EAASuD,gBAAgB3F,EAAKoB,IAClDuE,GACF7G,EAAQ6G,GAAiB,SAAAJ,GACvB1C,GACE,QACAN,EACAgD,EACAhC,EACA+B,EACAlD,SA7JQ3C,EAAQmG,UAoK5B7C,GAASI,EAAiBJ,OAC1Bd,GAAckB,EAAiBlB,YAC/BG,GAAWI,EAAYW,ICjclB,SAAS0C,EAAeC,EAAeC,YAAAA,IAAAA,EAAiB,eACzDC,EAAOD,EAAS,IAChBE,EAAQ,GACRtD,EAAI,SACRjE,EAAMoH,GAAU,SAAAxG,GAEVqD,EAAI,KACM,MAARrD,IACF0G,GAAQC,EACRD,GAAQE,EAAQ5G,GACZ6G,EAAiB7G,GAA6B8G,SAC7C9G,EAAa+G,YAEpB1D,GAAK,EACLsD,EAAQ,SAGLD,EAAO,IAcT,SAASM,EAAWN,EAAcxG,OACnC+G,EACAH,EACEI,EAAYR,KACbxG,EAGE,KACCiH,EAAYN,EAAiB3G,GACf,IAAhBwG,EAAKpD,QACP2D,EAAOE,EAAUF,KACjBH,EAAWK,EAAUL,WAErBG,EAAOE,EAAUF,KAAKG,OAAO,CAACV,IAC9BI,EACgC,IAA9BK,EAAUL,SAASxD,OACfoD,EACKS,EAAUL,SAAW,IAAMJ,QAZxCO,EAAuB,IAAhBP,EAAKpD,OAAe,GAAK,CAACoD,GACjCI,EAAWJ,QAcN,CAACQ,UAAAA,EAAWJ,SAAAA,EAAUG,KAAAA,GChDxB,SAASI,EACdC,EACAC,OAEMC,EAAYD,EAAiBD,EAAOA,EAAK,GAC/CG,GAAaD,OACTE,EAAWF,EAAUG,GACnBC,EAAcJ,EAAUK,OAC1BD,EAAa,KACTE,EAAuBP,EAAiBK,EAAcA,EAAY,MAOnEG,GAASD,IAA2B,QAASA,EAE3C,KAECE,EAASX,EAAoBO,EAAaL,GAEhDD,EAAOU,EAAO,GACdN,mBAAeA,EAAaM,EAAO,SANnCV,EAAOM,QASJ,CAACN,EAAMI,GC/BT,SAASO,EACdxB,OAKMrG,EAAWE,OACbF,EAAU,SACNV,EAAKU,EAAS8H,SAASzB,sBAN5Ba,mCAAAA,uBAQG5H,EAAI,OAAOA,gBAAGU,UAAakH,KCyGnC,SAASa,EACPnI,EACAI,EACAoC,EACA8E,OAEMc,EAAUzF,GACZM,EAAO,QACP7C,MACF6C,EAAON,GACAM,GAAQA,EAAK7C,WAAaA,GAC/B6C,EAAOzC,EAAUyC,GAGrBoF,GAAepF,OACTpB,EAAS7B,EAAKsI,OAAO9F,EAAS8E,UACpCe,GAAeD,GACRvG,EAGF,SAAS0G,EACdC,EACAC,OAEMC,EAASC,GAAc,CAC3BhB,GAAIc,EACJZ,IAA6B,iBAAjBW,EAA4B,CAAC9B,KAAM8B,GAAgBA,IAE3DI,EAAS,SAATA,EAAUpG,GACdqG,GACGxI,EAAQuI,EAAO,WAChB,wBACA,eAEFC,GAAW9E,GAAQ,+BAAgC,oDANhBuD,mCAAAA,2BAO/B3E,GACKwF,EAAWS,EAAOxI,EAAUoC,EAAS8E,GAEvCsB,EAAMN,OAAO9F,EAAS8E,IAEzBlH,EAAWE,IACXwI,EAAaC,OAAOC,OAAOJ,EAAO,CACtCK,SAAUxI,EAAW,CACnBM,KAAMmI,GLhKS,QKgKON,EAAOF,GAC7BvH,SAAU,IAEZmH,gBAAOvF,UACLR,EAAO,CAAC1B,OAAQ+H,EAAO7F,OAAAA,EAAQjC,MAAOgC,KAC/BC,GAEToG,MAAO,SAACzJ,UAAkC0J,GAAUR,EAAOlJ,IAC3D2J,IAAK,SAAC3J,UAAiB4J,GAAYV,EAAOW,EAAK7J,EAAI,CAAC8J,QACpDzD,OAAQ,SAACrG,UAEP4J,GAAYV,ELhKI,SKgKWlJ,EAAGA,GAAKA,EAAKA,EAAGA,GAAI,CAC7C8J,GAAWC,GAAW,MAE1BC,UAAW,SAAChK,UACV4J,GAAYV,EAAO,YAAalJ,EAAI,CAClC8J,KACAG,IAAK,SAAAxJ,UAAUyJ,GAAOzJ,KAAQ,MAElC0J,iBAAQnK,OACAoK,EAA2BvB,EAAY,YAASK,EAAM1B,UAAW,CACrEhH,OAAQM,EAAUoI,YAEpBX,EAAc,eAAgBzE,EAASsG,IACvCC,GAAeD,EAAclB,EAAO,CAACY,MAAe,UAAW9J,GAC/DsK,GAAgBpB,EAAOkB,GAChBA,YAGPpB,MAAAA,GAAAA,EAAQuB,QACVvB,EAAOuB,OAAOC,MAAMtB,MAAME,GAErBA,EAGF,SAASqB,EACdC,EACAC,OAEM3B,EAASC,GAAc0B,GACvBC,EAAaC,GAAeH,GAC5BI,EAAUjC,EAAY,CAACkC,MAAO,UAAWC,QAAS,IACxDzC,EAAc,YAAaqC,OACrBK,EAAeL,EAAWxI,GAC1BoD,EAAQ,CACZ0F,YAAa,IAAIC,IACjBL,QAAAA,EACAJ,aAAAA,EACAU,SAAUR,EACVS,wBAEMC,EADAC,EAAYX,KAEZ3H,GAAa,SACXM,EAAON,GACJM,IAASA,EAAKW,IAAI+G,IACvB1H,EAAOzC,EAAUyC,GAEfA,IAAM+H,EAAc/H,UAErB+H,GAAelI,KAClBuC,GAAevC,GAAUwH,EAAY,GACrCU,EAAclI,IAEZkI,IAAaC,EAAYD,EAAYpH,IAAI+G,IACtCnF,GAAQyF,IAEjBC,SAAU,SAACC,UACT5I,EAAO,CACL1B,OAAQqE,EACRnC,OAAQoI,EACRnI,MAAO,EACPlC,MAAOgC,MAEXsI,4CAASC,2BAAAA,yBACP7L,EAAQ6L,GAAO,SAAArL,UAAQkF,EAAMoG,GAAGtL,GAAM,kBAAMkF,EAAMkF,mBAC3ClF,GAEToG,YAAGC,EAAoC7L,UACrC8L,GAAcD,EAAS,MAAO,kBAC9B5L,EAAO8L,GAAW/L,GAAK,wCACvBmJ,GACGxI,EAAQ6E,EAAO,WAChB,uBACA,eAEF1F,EAAQ2D,MAAMC,QAAQmI,GAAWA,EAAU,CAACA,IAAU,SAAAG,GACpDxG,EAAMyG,IAAID,GACVE,EAAe1G,GAAO2G,IACpBH,EACAI,GACEC,GAAYL,EAASxG,EAAO,KAAM8G,GAAetM,QAIhDwF,GAETyG,aAAI3L,OACIiM,EAAsBL,EAAe1G,GAAOgH,IAAIlM,UAClDiM,IACFA,IACAL,EAAe1G,GAAOH,OAAO/E,IAExBkF,GAETmE,aAAI3J,EAAwCyM,OACtCzD,EAUA0D,EATArE,GAASrI,KACXgJ,EAAShJ,EACTA,EAAMA,EAA4CA,IAEpDmJ,EACEe,GAAOuC,GACP,+BACA,oBAGIE,EAAanH,EAAM6F,WACRzK,IAEf8L,EAAa,KACHxC,GAAOyC,KACjBD,EAAa1M,EAAG2M,EAAYF,QAGxBG,EAAyBnC,EAAYiC,EAAY,CACrD1F,KAASxB,EAAMgC,sBACfwD,QAAS,EAET7C,IAAKa,IAED6D,EAAWR,GAAY7G,EAAOoH,EAAY/C,EAAKiD,GAAe9M,UACpE+M,GAASC,EAAcJ,GAAa,CAClCpL,KAAMqI,EACN7J,GAAAA,EACA4B,KAAMgJ,IAERoC,EAAcJ,GAAYK,OAAS,EACnC1E,EAAc,WAAYqC,EAAYiC,GAC/BD,GAETnD,eAAMyD,EAAgBlN,OACfA,IAAOkH,EAAQgG,GAAY,KACxBC,EAAezD,GAAUlE,EAAO0H,UACjC3E,EAAc,aAAcqC,EAAYsC,IAC3CA,EAAU1H,EAAM6F,YAEX8B,SAETlN,EAAO8L,GAAW/L,GAAK,wCACfkN,EAAyBzD,OAAM,SAAC3G,UACtC9C,EAAGwF,EAAM6F,WAAYvI,QAIrBzB,EAAOmI,GL3TM,QK2TUhE,EAAOwD,GAC9BoE,EAAe5H,EAAM6H,cAAcD,aACzC5H,EAAM+D,SAAWxI,EAAW,CAC1BK,MAAO,CAACqK,MAAOb,EAAY5K,GAAIoN,GAC/BpM,KAAM,CACJiJ,IAAK,SAACqD,EAAKC,EAAGhJ,UACRA,EAAMnD,QAAUmD,EAAMnD,MAAM8C,IAAI0G,EAAWxI,MAC7CmC,EAAMiJ,EAAI,GAELF,KAETG,GAAK7C,GACLX,IAAK,SAACqD,EAAKC,SAAIG,IAAAA,EAAGF,IAAAA,SAAQtD,GAAOoD,KAASA,IAAQI,GAAKF,KAAI,GAC3DJ,GAAgBtD,GAAWgD,GAAe,GAC1Ca,GAAI,CAAC/L,KAAM2D,EAAOpE,OAAQyJ,KAE5B3J,MAAO6J,EACPzJ,KAAAA,EACAI,SAAU,QAENmM,EAAgBjN,EAAQ6E,EAAO,aAC/BwF,EAAUrK,EAAQ6E,EAAO,WACzBqI,EAA4B,WAAlBD,EACVE,GAAmBF,GAAiBC,EAAU,EAAQD,EACtDG,EAAqBpN,EAAQ6E,EAAO,cACtCuI,IACGF,GAASG,EAAQxI,EAAO,cAAe,GAC5CoF,EAAWmD,IAAMA,EAEbD,IACFlD,EAAWvJ,sBACNuJ,MAAAA,SAAAA,EAAYvJ,MACf4M,UAAWH,MAIZC,GAAQF,GAAY7C,GACvBgD,EAAQxI,EAAO,gBAAiB,GAElCvF,EACE+K,IAAYd,GAAOQ,GACnB,sDAEF/H,GAAI6C,EAAO,CAACsF,IACR9B,MAAAA,GAAAA,EAAQuB,QACVvB,EAAOuB,OAAOC,MAAMhF,MAAMA,GAGvBwF,IACHxF,EAAM0I,OAASrF,IACfrD,EAAMkG,MAAMlG,EAAM0I,SAGb1I,EChWF,SAAS2I,+BAAWvG,2BAAAA,sBACrBwG,EACAC,EACArF,IACcrB,EAAoBC,GAA9BoB,WASJsF,EACAC,EAwBAC,EAjCEC,GADJ7G,QACsBA,EAAKhE,OAAS,MAClCmI,GAAW0C,IACbJ,EAASzG,EAAK8G,MAAM,GAAI,GACxBN,EAAUK,GAEVJ,EAASzG,EAKW,IAAlByG,EAAOzK,OAAc,KACjBjE,EAAM0O,EAAO,GAIdnH,EAASvH,KAcZ2O,EAAmB3O,EACnB4O,EAAa,OAIZA,IAIHD,EAAmBD,EAKfD,GAAS,CACXI,EAAgB,MACVxO,EAAKoO,EACXA,EAAU,SAACrO,UAAgBC,eAAMD,WAGrCE,EAAOoI,GAASiG,GAAmB,6BAC5BK,GACLlL,MAAMC,QAAQ4K,IACbE,EACDF,EACAtF,EACAoF,GC1EG,SAASQ,QACRzM,EAAS,UACfA,EAAO0M,IAAM,IAAIC,SAAQ,SAACC,EAAIC,GAC5B7M,EAAO4M,GAAKA,EACZ5M,EAAO6M,GAAKA,KAEd7M,EAAO0M,IAAII,OAAM,eACV9M,ECgBF,SAAS+M,EACdpG,EACAC,OAEMC,EAASC,GACb8C,GAAWjD,GAAgB,CAACsF,QAAStF,GAAgBA,EACrDC,GAEIoG,EAAWtG,EACfkD,GAAWjD,GAAgB,CAACsF,QAAStF,GAAgBA,EACrDC,GAEI/H,EAAO8C,EAASqL,GACtBnB,EAAQhN,EAAM,KAAOmO,EAASC,KRpCV,UQsCpBD,EAASE,IAAM,SAACrP,UACdC,EAAO8L,GAAW/L,GAAK,sCACvBsP,EAAOlO,MAAMgN,QAAUpO,EAChBmP,GAETA,EAASE,IAAIE,WAAa,kBAAMD,EAAOlO,MAAMgN,aACvCoB,EAAUL,EAASM,QAAU5G,EAAY,CAC7CkC,MAAO,UACPC,QAAS,IAEL0E,EAAQP,EAASO,KAAQF,EAAexF,UAAU,CACtDe,MAAO,OACP/K,kBAUiB,WATf2P,OASuB,MAAO,CAACtM,SAR/BA,OAQuClB,SAPvCA,WAUEwC,EAAQwK,EAASxK,KAAQ6K,EAAexF,UAAU,CACtDe,MAAO,OACP/K,kBAUiB,WATf2P,OASuB,MAAO,CAACtM,SAR/BA,OAQuCuM,QAPvCA,UAUEC,EAAYV,EAASU,SAAWH,EAAK/F,IAAI,CAC7CoB,MAAO,WACP/K,GAAI,qBAAEmC,UAEF2N,EAAYX,EAASW,SAAWnL,EAAKgF,IAAI,CAC7CoB,MAAO,WACP/K,GAAI,qBAAE4P,SAGFN,EAASvO,EAAW,CACxBK,MAAO,CACL2O,UAAWpP,EAAQK,EAAM,OACzBoN,QACEe,EAAS9B,cAAce,SACtB,kBAAMnO,EAAO,wBAA6BkP,EAASa,aAExDhP,KAAM,CACJiJ,IACE,SAACqD,EAAqC2C,EAAQ1L,OACtCnD,EAAgD6O,EAClD7B,EAAUhN,EAAMgN,WAChB5K,EAAYe,GAAQ,KAChB2L,EAAW1M,EAAYe,GAAQiE,SAASpH,EAAM2O,WAChDG,IAAU9B,EAAU8B,UAE1B5C,EAAIc,QAAUA,EACPd,IAET,EACA,GAEFrD,IACE,WAOEsD,EACAhJ,OANElB,IAAAA,OACAwL,IAAAA,IACAT,IAAAA,YACAxG,KAAAA,aAAO,CAACvE,KAKJ8M,EAAWC,GAAe7L,GAC1B8L,EAAYC,GAChBjN,EACAwL,EACA,EACAW,EACAjL,EACA4L,GAEII,EAAWD,GACfjN,EACAwL,EACA,EACAW,EACAjL,EACA4L,KAEmBK,GAAMpC,EAASmC,EAAU3I,GAAnCzF,cAELkG,GAASlG,IAAW4J,GAAW5J,EAAOsO,MACxCtO,EAAOsO,KAAKJ,EAAWE,GAEvBF,EAAUlO,MAIhB,EACA,IAGJd,KAAM,CAACqP,GAAI,KAAMC,GAAI,YAEvB3P,EAAKI,MAAMkO,OAASA,EACpBpN,EACElB,EAAKgB,IACLiI,IACE,SAAC5G,IAAkBkB,OAAT+K,IAAAA,OACFhC,EAAsCxM,EAAUyD,GAClD,CAAClB,OAAAA,EAAQwL,IAAK,CAACE,gBAAmBC,kBAElC3L,SACJR,EAAO,CACL1B,OAAQmO,EACRjM,OAAQiK,EACRhK,MAAO,EACPlC,MAAOoC,EAAYe,KAEd+I,EAAIjK,SAEb,EACA,IAIJ8L,EAASvG,OAAS,SAACvF,OACXwL,EAAMD,IACN9L,EAAU,CAACO,OAAAA,EAAQwL,IAAAA,MACrBzL,GAAU,KACPgB,GAAS,KACNwM,EAAYxN,GAClByL,EAAIA,IACDY,SAAQ,WACPoB,GAAYD,MAEb3B,OAAM,eAEXpM,EAAO,CAAC1B,OAAQgO,EAAU9L,OAAQP,EAAS1B,MAAOgC,UAElDP,EAAOsM,EAAUrM,UAEZ+L,EAAIA,SAGPiC,EAAY3B,EAAS2B,SAAWrG,EAAY,EAAG,CACnDwD,UAAW,WAEVrC,GAAGuD,GAAU,SAAA4B,UAAKA,EAAI,KACtBnF,GAAG4D,GAAQ,SAAAuB,UAAKA,EAAI,KACpBpH,IAAI,CAEH3J,GAAI,SAAA+Q,UAAKA,GACThG,MAAO,aAEXiD,EAAQwB,EAAQ,gBAAiB,OACjCxB,EAAQmB,EAAU,gBAAiB,OAC7B6B,EAAW7B,EAAS6B,QAAUF,EAASnH,IAAI,CAE/C3J,GAAI,SAAAiR,UAAUA,EAAS,GACvBlG,MAAO,mBAGTpI,GAAIwM,EAAU,CAACK,EAAQE,EAAM/K,EAAMkL,EAAUC,EAAUkB,EAASF,IAC5D9H,MAAAA,GAAAA,EAAQuB,QACVvB,EAAOuB,OAAOC,MAAM0G,OAAO/B,GAEtBA,ECnNF,SAASgC,EACdxF,EACA3C,GAEA8C,GAAcH,EAAO,QAAS,sBACxBxJ,EAAS0G,EAAY,CACzB7B,KAAMH,EAAe8E,EAAO,SAC5BX,QAAS,EACT7C,IAAKa,WAEPqB,GAAesB,EAAOxJ,EAAQ,GAAI,SAC3BA,ECeF,SAASiP,EAAqBpI,EAAajC,OAC5CsK,EAAwB,SAC5BvR,EAAQwR,IAAoB,SAAAC,GACtBA,KAASvI,IACX/I,EAAwB,MAAjB+I,EAAOuI,GAAgBC,GAAkBzK,EAAQwK,IACxDF,EAAwB,MAGrBA,EChCF,SAASI,EACdC,EACA1R,OAEMD,EAAO,aACF4R,EAAM3Q,GACX4Q,EAAS7R,EAAMiB,KACnBkB,EAAInC,EAAMiB,GXfO,UWgBbL,EAAQK,EAAM,OAAmBL,EAAQK,EAAM,QACjDhB,EAAGgB,EAAML,EAAQK,EAAM,QAEzBlB,EAAQkB,EAAKsB,KAAMqP,GACnB7R,EAAQ0C,EAAUxB,GAAO2Q,GACzB7R,EAAQ4C,EAAS1B,GAAO2Q,MACvBD,GAKE,SAASG,EACdC,EACAC,OAEMC,EACJvO,MAAMC,QAAQoO,GAAU,IAAI3G,IAAI2G,GAAoCA,KAClEE,aAA6B7G,IAAK,KAC9BhJ,EAAS,UACfrC,EAAQkS,GAAmB,SAACvR,EAAOZ,GACjCI,EACGiH,EAAmDrH,GACpD,4BAEEkS,GAAYA,EAAWlS,EAAKY,GAChCR,EAAOJ,EAAIkO,IAAK,0BAChB9N,IAASJ,EAAIkO,OAAQ5L,GAAS,uBAC9BA,EAAOtC,EAAIkO,KAAQtN,KAEd0B,SAEF6P,ECPT,SAAS5F,EAAmB6F,OACpB9E,EAA6B,kBAAM8E,YACzC9E,EAAa+E,YAAc,kBAAMD,KAE1B9E,wDXoCT,IYhFO,IAAMgF,EACQ,oBAAXC,QAA0BA,OAAOC,YAAe,ebM7CxI,EAAM,MACNtE,EAAQ,QcLRzB,EAAW,SAACwO,UACtBA,EAA2B/I,UAAY+I,GAC7B9P,EAAY,SAACxB,UAAeA,EAAKM,OAAOS,QACxCW,EAAW,SAAC1B,UAAeA,EAAKM,OAAOQ,OACvCkL,EAAgB,SAACxH,UAAgCA,EAAM4F,UACvDxI,EAAW,SAAC2B,UAAeA,EAAM9D,OACjCyL,EAAiB,SAAC1G,UAAsBA,EAAM0F,aAC9CpK,EAAY,SAACR,UAAcA,EAAKE,QAChCgD,EAAc,SAAC+O,UAA2BA,EAAInR,OAC9CT,EAAU,SAACL,EAAgBiR,UACtCzN,EAASxD,GAAMe,KAAKkQ,IACTvD,EAAU,SAAC1N,EAAgBiR,EAAe9Q,UACpDqD,EAASxD,GAAMe,KAAKkQ,GAAS9Q,GACnB0G,EAAmB,SAAC7G,UAC/BA,EAAKkS,eCXMlS,EAAO,SAACX,UAClBoM,GAAWpM,IAAQ0I,GAAS1I,KAAS,SAAUA,GAE5CuH,EAAK,SAAC1F,UAAe,SAAC7B,UAAiBW,EAAKX,IAAQA,EAAIyP,OAAS5N,IAE1DgE,EAAQ0B,EfXA,SeYRgC,EAAQhC,EfXA,SeYRgK,EAAShK,EfXA,UecTqD,EAASrD,EfbA,UecT9F,EAAQ8F,EfbA,qFecG,SAAC5G,UACvB4Q,EAAO5Q,IAAuC,GAA9BK,EAAQL,EAAM,cnBVnBsR,EAAW,SAAI7R,EAAWkC,UAAYlC,EAAK6R,SAAS3P,IAEpDwQ,EAAa,SAAI1S,EAAWkC,OACjCyQ,EAAM3S,EAAK4S,QAAQ1Q,IACZ,IAATyQ,GACF3S,EAAK6S,OAAOF,EAAK,IAIRxQ,EAAM,SAAInC,EAAWkC,UAAYlC,EAAK8S,KAAK5Q,ICd3CkH,EAAY,SACvBjJ,EACA4S,EACAC,UAEC7S,GACD8S,QAAQpD,MACHkD,oBACDC,WAAsBA,aAAuB,MmBZ7CE,EAAU,eACV7Q,EAAK,SACF,uBAAWA,IAGP8Q,EAAaD,IACbE,EAAaF,IACb5Q,EAAa4Q,IlBKf1S,EAAkC,KAEhCK,EAAe,kBAC1BL,GAAeA,EAAYG,UAChB0S,EAAc,SAACrF,UACtBA,GAAOxN,GAAeA,EAAYM,UACpCkN,EAASxN,EAAYM,YAAWkN,GAC3BA,GmBdIpL,GAAM,SAAC0Q,EAAqBvR,OACjCW,EAAQqB,EAASuP,GACvBvT,EAAQgC,GAAO,SAAAwR,OACP/Q,EAAOuB,EAASwP,GjBLJ,WiBMd7Q,EAAMnB,OAAOE,OAAiBe,EAAKjB,OAAOE,KjBHzB,aiBIrBU,EAAIM,EAAUD,GAAOE,GACrBP,EAAIQ,EAASD,GAAQF,OlBHZZ,GAAc,SACzB5B,mBAAAA,IAAAA,EAAgD,KACpC0D,MAAMC,QAAQ3D,GAAQA,EAAO,CAACA,IAAOwT,OAAO5J,IAAI7F,ImBFjDuE,GAAW,SAAC5H,SACN,iBAAVA,GAAgC,OAAVA,GAClBsL,GAAa,SAACtL,SACR,mBAAVA,GAEIyJ,GAAS,SAACzJ,eAA4CoF,IAAVpF,GAE5CsH,GAAe,SAACtH,UAC3BR,EACEoI,GAAS5H,IAAUsL,GAAWtL,GAC9B,uCAGE+S,GAAoB,SACxB/S,EACAsG,EACA0M,EACAC,UAEAzT,KAEMoI,GAAS5H,KAAWsL,GAAWtL,MAC9B,WAAYA,MAAY,aAAcA,IAExCsG,cAAkB0M,2CAAkDC,IAG9D5H,GAAgB,SAC3BrL,EACAsG,EACA0M,GAEIhQ,MAAMC,QAAQjD,GAChBX,EAAQW,GAAO,SAACwB,EAAM0B,UACpB6P,GAAkBvR,EAAM8E,EAAWpD,cAAa8P,EAAa,OAI/DD,GAAkB/S,EAAOsG,EAAQ0M,EAAW,uBAInCE,GAAe,SAC1B5M,EACA5F,EACAyS,mBAAAA,IAAAA,EAAsB,UAEtB9T,EAAQ6B,GAAYR,IAAS,SAAAc,UAC3BkH,GACGxI,EAAQsB,EAAM,WACZ8E,yBAA4B6M,sCCxDxB9G,GAAgB,SAC3BvI,cAGGvE,IAFFA,IAEKuE,IADLmJ,IAEUpB,GAAgB,SAC3B/H,cAGGvE,IAFFA,MACA0N,EACQnJ,IACEwF,GAAY,SAACxF,YACxBvE,IADqCA,IAClCuE,ICECsP,GAAM,SACVrS,EACA8D,EACAP,EACA+O,OAEM3R,EAQF,CACFC,GAAI+Q,IACJ3R,KAAAA,EACA8D,KAAAA,UAEEP,IACF5C,EAAO2C,MAAQ,CAACC,SAAAA,GACZ+O,IAAO3R,EAAO2C,MAAME,YAAc+O,KAEjC5R,GAGL4R,GAAgB,EAEPpG,GAkDT,oBACF/L,KAEAT,IAAAA,WACAD,UAUI2S,GAAI,MAAO,CAACjS,gBpB3GG,UoB2GG4D,QAZtBA,MAY6BtE,cAVxBC,EpBjGc,QoBiGGoE,IAUWpE,OAAAA,KARjC4D,WADA+O,QAWWE,GAAU,oBAMrB7N,SACAE,WACAJ,YAQa4N,GAAI,UAAW,CAAC7T,KAb7BA,GAaiCmG,gBAV1B,IAUgCE,kBAT9B,IASsCJ,gBARxC,OAHPlB,WADA+O,QAsBWG,GAAM,mBAIbD,GAAQ,CAAChU,KAHbA,GAGiB+E,SpBzIG,YoB2ITkF,GAAO,SAGlBjK,EACAqG,EACA6N,UACGF,GAAQ,CAAChU,GAAAA,EAAImG,KAAM,EAAME,OAAAA,EAAQtB,SAAUmP,GpBjJ1B,YoB6JTzG,GAAO,SAClBjI,EACA2O,EACAC,UAEAzG,GAAI,CACFnI,MAAAA,EACAtE,GAAIiT,EAAU5O,EpBzJG,IoB0JjBR,SAAUqP,GpBlKS,UoBmKnBN,MAAO,KAGEhK,GAAa,SACxB9J,EACAqU,mBADArU,IAAAA,EAAoE+J,IAEjEiK,GAAQ,CAAChU,GAAAA,EAAIiG,KAAM,EAAMI,OAAQgO,KAEzBxP,GAAO,CAAC8I,IAAAA,GAAKqG,QAAAA,GAAS3N,OAjDb,mBAMhB2N,GAAQ,CAAChU,KALbA,GAKiBqG,OAAQ,EAAMJ,OAJ/BA,QA+CyCgO,IAAAA,IC5K9BpJ,GAAiB,SAAC7E,SAA6B,CAC1D5D,GAAI+Q,IACJnN,QAAAA,IAEWF,GAAU,qBAAEE,SAEZ+G,GAAW,SAACuH,EAAe5D,GACjC4D,EAAIC,SAAQD,EAAIC,OAAS,IAC9BrS,EAAIoS,EAAIC,OAAS7D,IpBmCf8D,GAAyB,KAEvBrD,GAAQ,SAARA,EAASzD,EAAqBF,UAC7BE,EACAF,IAQFE,EAAE+G,EAAEjT,OAASgM,EAAEiH,EAAEjT,MAAQkM,EAAE+G,EAAErS,GAAKoL,EAAEiH,EAAErS,IAKvCsS,GAAYhH,EAAE+G,EAAEjT,MAAQkT,GAAYlH,EAAEiH,EAAEjT,SAExCmT,EAAMjH,EACNA,EAAIF,EACJA,EAAImH,GAENA,EAAMxD,EAAMzD,EAAEkH,EAAGpH,GACjBE,EAAEkH,EAAIlH,EAAEmH,EACRnH,EAAEmH,EAAIF,EAECjH,GAvBQA,EADAF,MAGXmH,GAyBAG,GAAuB,GACzBC,GAAK,EACFA,GAAK,GAKV7S,EAAI4S,GAAO,CAACE,MAAO,KAAMC,KAAM,KAAMC,KAAM,IAC3CH,IAAM,EAGR,IAyGW3R,GAzGLwD,GAAY,eACX,IAAIjD,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpB5D,EAAO+U,GAAMnR,MACf5D,EAAKmV,KAAO,EAAG,IAKP,IAANvR,GAAiB,IAANA,EAAS,CACtB5D,EAAKmV,MAAQ,MACPzU,EAAQ+T,GAAMC,SACpBD,GAAOrD,GAAMqD,GAAMK,EAAGL,GAAMI,GACrBnU,EAES,IAAdV,EAAKmV,OACPnV,EAAKkV,KAAO,UAERhT,EAAOlC,EAAKiV,aAClBjV,EAAKiV,MAAQ/S,EAAM2S,EACnB7U,EAAKmV,MAAQ,EACNjT,EAAMwS,KAIb5Q,GAAoB,SACxBrC,EACA+B,EACAvC,EACAR,EACAC,EACAW,UAEAgE,GACE,EACA,CACEsI,EAAG,KACHF,EAAG,KACHxM,KAAAA,EACAR,OAAAA,EACAC,MAAAA,EACA8C,KAAAA,EACAnC,MAAAA,GAEFI,IAEE4D,GAAW,SACfd,EACAC,EACA/C,EACAY,YAAAA,IAAAA,EAAa,OAEP2C,EAAW2P,GAAYlT,GACvB2T,EAAsBL,GAAM/P,GAC5B9C,EAAkB,CACtBwS,EAAG,CACDnQ,IAAAA,EACAC,MAAAA,EACA/C,KAAAA,EACAY,GAAAA,GAEFyS,EAAG,KACHD,EAAG,MAMY,IAAb7P,GAA+B,IAAbA,EACpByP,GAAOrD,GAAMqD,GAAMvS,IAEC,IAAhBkT,EAAOD,KACTC,EAAOH,MAAQ/S,EAEfkT,EAAOF,KAAML,EAAI3S,EAEnBkT,EAAOF,KAAOhT,GAEhBkT,EAAOD,MAAQ,GAGXR,GAAc,SAACU,UACXA,OACD,eACI,MACJ,cACI,MACJ,cACI,MDvKU,iBCyKV,MD7KU,iBC+KV,MDlLS,gBCoLT,iBAEC,IAIRlQ,GAAW,IAAImQ,IAEjBtR,GAAS,EACFK,GAAU,EACVC,GAAS,EACTpB,GAA2B,KAEzB4N,GAAc,SAACyE,GAC1BlS,GAAWkS,GAEA3M,GAAiB,SAAC4M,GAC7BtS,GAAcsS,GAGV7P,GAAgB,SAACnC,EAAmBnB,MACpCmB,EAAM,MACDA,IAASA,EAAKW,IAAI9B,IACvBmB,EAAOzC,EAAUyC,MAEfA,EAAM,OAAOA,SAEZ,MAEIwC,GAAa,SACxBxC,EACAH,EACApC,EACAsT,EACAkB,OAEM/P,EAAaC,GAAcnC,EAAM+Q,EAAIlS,WACvCqD,EAAmBA,EAAWvB,IAAIoQ,EAAIlS,IACtCgB,GACFuC,GAAevC,EAAWkR,EAAKkB,GACxBpS,EAASc,IAAIoQ,EAAIlS,KAEnBkS,GAyOHmB,GAAa,SAAC1E,UAAWA,GAElBpL,GAAiB,SAAjBA,EACXvE,EAMAsU,EACAF,EACAG,EACA/P,SAEMgQ,EAAUxU,EAAM8C,IAChB6J,EAAM2H,EAAU3H,IAChBE,EAAYyH,MAAAA,aAAAA,EAAWrU,yBAAXwU,EAAiB5H,cAK/B2H,EAAQF,EAAUtT,SAChBkS,EAAgB,CACpBlS,GAAIsT,EAAUtT,GACd4D,QAAS0P,EAAU1P,QACnB3E,KAAMqU,EAAUrU,SAGd0M,GAAOA,KAAO3M,EAAM0U,gBAAkB/H,KAAO3M,EAAM2U,UACrDzB,EAAItO,SAXJ5E,EAAM4U,eAA+B,WAAd/H,IACnBA,MAAAA,SAAAA,EAAWR,OACXgI,IASiBrU,EAAM0U,aAAa/H,YAEpC2H,EAAUnB,SAAW3O,EAAU,KAC7BqQ,EAAU,EACRC,EAAeV,IAAeE,EAAUzI,QAAU0I,EACxD7V,EAAQ4V,EAAUnB,QAAQ,SAAAV,UAChBA,EAAIrS,WACLqI,MACGjI,EAAOiS,EAAIjS,QACbA,GAAQiS,EAAI7T,GAAI,CACd4B,GAAM+D,EAAevE,EAAOQ,EAAM4T,EAAYG,OAC5ClV,EAAQmB,GAAQgU,EAAQhU,EAAKQ,IAAI4D,QACnCkQ,IACF5B,EAAItO,QAAU6N,EAAI7T,GAAK6T,EAAI7T,GAAGS,GAASA,aAKxC,QACEwV,IACHA,EAAU,EAER3B,EAAItO,QADFvC,MAAMC,QAAQ4Q,EAAItO,mBACFsO,EAAItO,0BAEJsO,EAAItO,UAG1BL,EAAevE,EAAOyS,EAAIjS,KAAM4T,EAAYG,GACxCO,IAEF5B,EAAItO,QAAQ6N,EAAItC,OAASqE,EADZA,EAAQ/B,EAAIjS,KAAKQ,IACQA,IAAI4D,aAUlD+H,IAAK3M,EAAM2U,SAAShI,GAAO2H,EAAUtT,IACzCwT,EAAQF,EAAUtT,IAAMkS,IAIpBlO,GAAS,SAAC1B,EAAc1E,EAAcuE,cAEjCvE,EAAG4C,EAAS2B,GAAQG,EAAMtD,MAAOmD,GACxC,MAAO4R,GACPnD,QAAQpD,MAAMuG,GACdzR,EAAMC,KAAO,IEteJsE,GAAgB,SAAhBA,EAAiBmN,EAAWpN,mBAAAA,IAAAA,EAA8B,IACjEX,GAAS+N,KACXnN,EAAcmN,EAAKnO,GAAIe,GACvBtJ,EAAM0W,GAAM,SAAC3V,EAAO8Q,GACbrH,GAAOzJ,IAAoB,OAAV8Q,GAA4B,QAAVA,IACtCvI,EAAOuI,GAAS9Q,MAGpBwI,EAAcmN,EAAKjO,IAAKa,IAEnBA,GmBtDHqN,GAAiB,SAACC,EAAmBC,GACzC9D,EAAW6D,EAAYhU,KAAMiU,GAC7B9D,EAAWjQ,EAAU8T,GAAcC,GACnC9D,EAAW/P,EAAS4T,GAAcC,IAE9BC,GAAsB,SAAtBA,EACJD,EACAE,EACAC,OAMIJ,EAJJC,EAAWjU,KAAKsB,OAAS,EACzB2S,EAAWvU,IAAI4B,OAAS,EAExB2S,EAAWnV,MAAQ,aAEfrB,EAAO2C,EAAS6T,GACZD,EAAcvW,EAAK4W,OACzBN,GAAeC,EAAaC,IAE1BE,GACCC,GAA8C,WAA9B/V,EAAQ4V,EAAY,OtBpBlB,csBqBnBD,EAAYhV,OAAOE,OAEnBgV,EACEF,EACAG,EAC+B,OAA/B9V,EAAQ2V,EAAa,OAAkBI,OAI7C3W,EAAOyC,EAAU+T,GACTD,EAAcvW,EAAK4W,OACzBN,GAAeC,EAAaC,GACxBG,GtBjCiB,csBiCDJ,EAAYhV,OAAOE,MACrCgV,EACEF,EACAG,EAC+B,OAA/B9V,EAAQ2V,EAAa,OAAkBI,IAKzCE,GAAW,SAACjN,UAAkCA,EAAIkN,SAC3CC,GAAY,SACvBvN,SAEEkN,cAGE,MAHFA,KAKEC,EAAe,KAEfnN,EAASwN,UAAUxN,EAASwN,SAAS1R,OAAOkE,GAC5CrC,EAASqC,GACXqN,GAAS1K,EAAe3C,SACnB,GAAIrC,EAAUqC,GAAW,CAC9BmN,EAAe,MACTM,EAAUzN,EAASyN,QACzBJ,GAASI,EAAQC,QACjBL,GAASI,EAAQE,SACjBN,GAASI,EAAQ3I,QACjBuI,GAASI,EAAQG,SAEnBX,GAAoB1S,EAASyF,KAAakN,EAAMC,ICnErCtK,GAAqB,SAACpL,OAC3BmB,EAAS,kBAAM2U,GAAU9V,WAC/BmB,EAAO+P,YAAc/P,EACdA,GCAIkI,GAAiB,SAC5B7J,EACAS,EACAD,EACA0P,EACA0G,UAEArW,EAAW,CACTC,KAAAA,EACAR,OAAAA,EACAS,MAAAA,EACAG,MAAO,CAACpB,GAAIoX,GACZ/V,KAAM,CAACqP,GAAAA,GACPpP,OAAQ,CAACS,OAAQ,CAACvB,EAAQS,GAAQa,MAAOb,GACzCQ,SAAU,KCZDiI,GAAY,SACvBpJ,EACA8N,UAEAnO,EAAO8L,GAAWqC,GAAU,wCACrBhC,GACLrL,EAAW,CACTK,MAAO,CAACpB,GAAIoO,GACZpN,KAAM,CAACiT,GAAI,CAACjU,GAAI+J,MAChBvJ,OAAQF,EACRe,KAAM,CAACqP,GAAI,SACXpP,OAAQ,CAACS,OAAQzB,GACjBmB,SAAU,MpB4BH6I,GAAkB,SAC7BzI,EACAV,EACAkW,YAAAA,IAAAA,ELlDmB,SKoDfvW,EAAUe,IAASf,EAAUe,GAAQ2I,MAAM6M,GAAUlW,IAG9CqI,GAAW,SAAC4F,EAAY9O,EAAWwH,OACxCkB,EAASC,GAAcnB,GACvBwP,ELvDc,WKuDHlI,EACXhN,EAAK8Q,MACwDlK,EAA5D+E,IAAAA,aAAM,SAAsD/E,EAAhD+B,MAAAA,aAAQ,SAAwC/B,EAAlCuB,SAAkCvB,EAAnBxI,OAAAA,wBAAN,SACpCwG,EAAO+D,GAAgB/B,EAAOhC,OAASsQ,EAAW,GAAKlV,GACvDoQ,EAAgBlL,EAAWN,EAAMxG,GACjCa,EAA4B,CAChCqP,GAAKpQ,EAAK8O,KAAOA,EACjBpI,KAAO1G,EAAKkH,UAAYR,EACxB+G,IAAMzN,EAAKyN,IAAMqF,EAAYrF,GAC7BhD,MAAAA,EACAwM,OAASjX,EAAK8B,GAAKA,EACnB6L,UAAWjF,EAAOiF,UAClBjD,QAAShC,EAAOgC,QAChBhC,OAAAA,MAEF1I,EAAKE,OAASA,EACdF,EAAKkS,cAAgBA,EACrBlS,EAAK+M,cAAgBrE,EACrB1I,EAAKkX,KAAO,SAACxX,UACXmJ,EAAU,EAAO,OAAQ,WAClBnJ,EAAGM,IAEZA,EAAK0P,QAAU,kBAAMwC,EAAcpL,WAC9BkQ,EAAU,CACbhX,EAAKmX,UAAY,SAACC,UAChB3P,GAAa2P,GACNpX,EAAKmJ,MACVsC,GAAW2L,GACPA,EACA,SAACpK,UAAaoK,EAASpV,MAAQoV,EAASpV,KAAKgL,MAGrDhN,EAAK6R,GAAoB,kBAAM7R,OACzBI,EAAWE,IACbF,IAAUW,EAAKsW,eAAiBjX,UAE/BW,GAIHuI,GAAc,SAClBV,EACAwH,EACA1Q,EACAgB,OAEIgI,EACAX,GAASrI,KACXgJ,EAAShJ,EACTA,EAAMA,EAAiCA,QAEnC4X,EAAS/O,EAAY,CACzB7B,KAASkC,EAAM1B,sBACfwD,QAAS,EACT7C,IAAKa,WAEPqB,GAAenB,EAAO0O,EAAQ5W,EAAM0P,EAAI1Q,GACjC4X,GAgQHvL,GAAc,SAClBzK,EACA4D,EACAkL,EACAmH,EACA7X,OAEM8X,EAAW9K,EAAcxH,GACzBuS,EAASpK,GAAI,CACjBnI,MAAOsS,EACP5W,GLhXiB,IKiXjB6D,SAAU,SAER2L,IAAO7G,IAAKkO,EAAOzS,KAAKM,SAAW,OACjC5E,EAAO,CAAC+W,EAAQjO,GAAW+N,WACjCtP,EACE,aACAuP,EACA9W,EACAkG,EAAStF,IAASoL,EAAcpL,IAE3ByI,GAAezI,EAAM4D,EAAOxE,EAAM0P,EAAI1Q,ICxTzC2O,GAAmB,SACvBjL,EACAsU,EACArY,EACAqJ,EACAhJ,OAEMiY,EAAQvU,EAAU,SAAC3D,mBAAkBA,IAAQ,SAACJ,2BAAkBA,IAChE+K,EAAoChH,EAAU,GAAK,GAEnDwU,EAAWD,EAAMvN,GACjByN,EAAWtN,GAAeqN,GAC1BjC,EAAUpL,GAAe,GAC/BsN,EAAS3W,KAAOkC,EAAU,OAAS,QACnCyU,EAASlL,OAAS,EAClB1E,EAAc,cAAe4P,EAAUlC,OACjCzQ,EAAQiF,EAAYyN,EAAU,CAClClR,KAAMH,EAAelH,GACrBqL,QAAS,EACT7C,IAAKa,IAEDoP,EAAgBpL,EAAcxH,GACpC4S,EAAcnL,OAAS,EACvBe,EAAQxI,EAAO,YAAa,OACtB6S,EAAiB5K,GAAK0K,GAM5BE,EAAevT,MAAQ,CAACC,SAAU,eAC5B/D,EAAO,CACXiJ,IAAK,SAACqD,EAAKC,EAAGhJ,UACRA,EAAMnD,QAAUmD,EAAMnD,MAAM8C,IAAIiU,EAAS/V,MAC3CmC,EAAM+T,EAAI,GAELhL,KAET+K,EACA1K,GAAI,CAACnI,MAAOyQ,EAAS/U,GAAI,MACzB+I,IAAK,SAACqD,IAAYpJ,OAANrE,IAAAA,OACNqE,EAAIoU,GAAKhL,IAAQpJ,EAAIwJ,EAAE7N,UACrBmY,GAAc9T,EAAIsJ,IACpBtJ,EAAIwJ,EAAIuK,EAAM/T,EAAIwJ,IAEpBxJ,EAAIwJ,EAAE7N,GAAOyN,EACN,IAER,GACHK,GAAI,CAAC/L,KNpHY,IMoHCT,OAAQgX,IAC1BxK,GAAI,CAAC/L,KNxHY,QMwHC4D,MAAO,EAAOrE,OAAQ8U,IACxCtI,GAAI,CACF/L,KN1He,QM2Hf4D,MAAO,EACPrE,OAAQ8U,EACRlR,SN9HiB,UM+HjB+O,MAAO,IAETrG,GAAK0K,EAAU,GACfnY,GAAM8J,aAERpK,EAAMC,GAAK,SAACsB,EAAyBpB,OAC9BqH,EAASjG,UACZhB,GACGiH,EAAQjG,KAAWiJ,GAAOjJ,yCACWpB,QAExCqY,EAASrY,GAAO6K,EAAa7K,GAAOoB,GAGtCyJ,EAAa7K,GAAOoB,EAAMyJ,aAC1BwN,EAASrY,GAAOoB,EAAMoK,eAChBwB,EAAWxC,GAAepJ,EAAOuE,EAAOxE,EAAM,UAAWhB,GAC/D6M,EAASzL,MAAMvB,IAAMA,MACf0Y,EAAWvL,EAAc/L,GAC/B8L,GAASoL,EAAU,CAAC3W,KAAM,QAAS+P,MAAO1R,EAAK+B,KAAM2W,IACrDhQ,EAAc,eAAgBgQ,EAAU1L,MAG1CrH,EAAMgT,aAAe7Y,EACrBoN,GAASqL,EAAe,CACtB5W,KAAMqI,EACNjI,KAAMuW,EACNnY,GAAAA,IAEGY,MACH4E,EAAMkF,aAAe1K,EAChBoY,EAAcpS,QAAUhG,EAAGkY,GAC5BxN,GAEClF,GEiDIgL,GAAQ,SACnBxQ,EACAuQ,EACA3I,aAGS,CAAC,EAAM5H,eAAM4H,IACpB,MAAOuO,UACP5F,EAAS4F,GACF,CAAC,EAAO,QAIN/F,GAAiB,SAAC7L,OACvBnD,EAAQoC,EAAYe,GACpB4L,EAAW,CAACmE,IAAKlT,UACnBA,GAAOc,EAAId,EAAMqX,cAAetI,GAC7BA,GAGIG,GACX,SACEjN,EACAwL,EAIA6J,EACAlJ,EACAjL,EACA4L,UAEF,SAAC7K,GACK6K,EAASmE,KAAK7B,EAAWtC,EAASmE,IAAImE,cAAetI,GACzDtN,EAAO,CACL1B,OAAQ,CAACqO,EAAQmJ,IACjBtV,OAAQ,CACNqV,EACI,CAAC/I,OAAQ,OAAQtM,OAAAA,EAAQlB,OAAQmD,GACjC,CAACqK,OAAQ,OAAQtM,OAAAA,EAAQuM,MAAOtK,GACpC,CAAC7E,MAAO6E,EAAMtF,GAAI0Y,EAAK7J,EAAIE,GAAKF,EAAIG,KAEtC1L,MAAO,EAEPC,KAAMgB,EAAMhB,KACZnC,MAAO+O,EAASmE,QAGhBqE,GAAY5X,EAAW,CAC3BC,KAAM,CAACiT,GAAI,CAACjU,GAAI,mBAAiBA,IAAfA,MAAIS,WACtBY,KAAM,CAACqP,GAAI,KAAMC,GAAI,eElPjBW,GAAqB,CAAC,SAAU,QAAS,UAEzCE,GAAoB,SAACzK,EAAgBwK,UACzCxK,OAAcwK,wBAoDHqH,GAAiB,SAC5B7R,EACA8R,EACAhX,EACAwE,EACAlF,EACAnB,EACAgH,EACAgB,EACA8Q,EACAC,EACAC,EACAjL,OAEMkL,IAAa9X,EACnBlB,GACGiK,GAAOrI,KAAYqI,GAAO2O,GAC3BrH,GAAkBzK,EAAQ,+BAExBmS,EAAgB,EAChBhP,GAAOrI,GACTqX,EAAgB,EACNhS,EAAQrF,KAClBA,EAASsM,EAAQtM,IAEfqI,GAAO2O,GAETA,EAAQhX,GAERiK,GAAc+M,EAAO9R,EAAQ,SACzBtD,MAAMC,QAAQmV,KAChBA,EAAQ1H,EAAM0H,KAGdK,IACFrX,EAASgX,GAGN7Q,GAAahB,IAAMA,EAAOnF,EAAO2F,eAClC2R,EAAqC,QACrCH,GAAkB3S,KAChBa,EAAQb,GACV8S,EAAa,QAEblZ,EAAO8L,GAAW1F,GAAS,uCAC3B8S,EAAa,OAGbhY,GACF2K,GAAc3K,EAAQ4F,EAAQ,UAC9B4M,GAAa5M,EAAQ5F,IAGJ,SAAfgY,GACAJ,GACA7R,EAASrF,IACTqF,EAAS2R,GAMT1X,EAASsJ,EAJYzK,EACjBA,EAAG8F,GAAQkH,EAAcnL,IAAUiE,GAAQkH,EAAc6L,KACzD/S,GAAQkH,EAAcnL,IAES,CAACmF,KAAAA,EAAM+G,IAAAA,EAAK9F,GAAID,KAEnD7G,EAAS0H,EAAY,CAAC7B,KAAAA,EAAMgE,QAAS,EAAM/C,GAAID,IAC/CO,EAAc,eAAgBzE,EAAS3C,SAKrCiY,EAAavO,KACfwO,EAAqB,MACN,SAAfF,EAAuB,OACMG,GAC7BjT,EACAlF,EAEA0X,EACAO,EACArS,GANKwS,OAQPF,YAAkBG,SAA6BA,GAAcD,UAEhCD,GAE7BzX,EACAV,EACA0X,EACAO,EACArS,GANK2O,OAAW+D,OAQZC,EAAYrP,GAEhBwO,EACA1X,GAEEoH,EAAc,sBACdoF,GAAI,CAAC/L,KAAM2D,EAAOpE,OAAQiY,YACvBI,GAAcC,IACjBhM,GAAKiI,EAAW,EAAMoD,IACnBO,GACH5L,GAAK2L,GACU,OAAfD,GAAuBrP,IAAW,SAAC6P,EAAKpM,YAAWlH,EAAOsT,IAAdjM,KAAuB,GACnE1N,GAAM8J,GAAWgD,IACjBvE,EAAc,qBAAsB0Q,KAEtClS,EACA/G,UAGF2C,GAAId,EAAQ,CAAC6X,IACbrQ,OAAOC,OAAOoQ,EAAUrY,KAAM2G,EAAU,CAAC4R,MAAO,IACzCzY,GAGHqY,GAAgB,SAAC/N,SAAoB,CACzCgC,GAAKhC,GACLxB,IAAK,SAACqD,EAAKlM,cAAQsM,IAAU,KAGzB4L,GAAkB,SACtBzX,EACAV,EACA0X,EACAO,EACArS,OAEM8S,EAAgB3S,EAASrF,GACzB6T,EAAYmE,EAAgB7M,EAAcnL,GAAUgJ,KACpD4O,EAAY5O,GAAegP,UAC5BA,GACH9Y,EAAW,CACTP,OAAQqB,EACRb,KAAM,CACJ2M,GAAI,CAAC/L,KAAM2D,EAAOpE,OAAQuU,IAC1B/H,GAAI,CAAC/L,KV/MQ,QU+MK4D,MAAO,EAAMrE,OAAQsY,KAEzCnY,OAAQ,CAACS,OAAQ,CAACF,EAAQV,EAAQ0X,GAAQ/W,MAAOX,GACjDE,KAAM,CAACqP,GAAI3J,GACXtF,SAAU,IAGd8G,EAAc,eAAgBkR,EAAW/D,EAAW0D,GAC7C,CAAC1D,EAAW+D,IgBjNfK,GAAa,SACjBC,EACAxI,EACAjM,EACAf,OAEMpD,EAAS4Y,EAAaxI,GACxBpQ,GACF0B,EAAO,CACL1B,OAAAA,EACAkC,OAAQI,MAAMC,QAAQvC,GAAUA,EAAOwI,KAAI,kBAAMrE,KAAQA,EACzDhC,MAAO,EACPiB,MAAAA,KCtBAyV,GAAiB,SAACjJ,UAAWA,sBCA5B,SACLkJ,SACC7Y,IAAAA,MAAe8Y,IAAR7W,WAEH6D,EAAQ+S,GACX,OAAOnL,QAAQqL,OAAO,IAAI/Z,MAAM,sCAC7B8G,EAAU+S,KAAW/S,EAAS+S,KAAW/S,EAAS+S,GACrD,OAAOnL,QAAQqL,OACb,IAAI/Z,MAAM,+DAERkD,EAAQsL,IACdtL,EAAM8W,WAAahX,OACZoD,EAAWpF,EAAXoF,QACPtE,EAAIsE,EAAQpF,MAAMiZ,OAAQ/W,OAEpBgX,EAA6B,CAACL,GAC9BM,EAAe,UACrBrY,EACEqY,EACArT,EAAU+S,GACN,CACE5W,OAAQ6W,EACRrL,IAAK,CACHE,YAAGtO,GACD6C,EAAM7C,MAAQ,CAACkP,OAAQ,OAAQlP,MAAAA,IAEjCuO,YAAGvO,GACD6C,EAAM7C,MAAQ,CAACkP,OAAQ,OAAQlP,MAAAA,MAIrCyZ,GAENhY,EAAIoY,EAAa9T,GACjBtE,EAAIqY,EAAc,MAClB1X,EAAO,CACL1B,OAAQmZ,EACRjX,OAAQkX,EACRnZ,MAAAA,IAEKkC,EAAMuL,oBC3BR,SAAgB7F,WAECrB,EAAoBqB,EAAQ,GAC7CnH,GADHmH,QACGnH,OAAQqP,EAAqBlI,EAArBkI,OAAQsJ,EAAaxR,EAAbwR,UACfC,EAAWvL,EAAalG,QAC9BgF,EAAQyM,EAAU,WAAY,OAE1BC,EAwCEjP,EAzCC6D,EAAUxL,EAAS2W,GAAUrZ,MAA7BkO,OAEDqL,EAAe1Q,IACnB,SAACqD,EAAKC,EAAGhJ,OAQHqW,EAPGvX,EAAwBiK,EAAxBjK,OAAQwL,EAAgBvB,EAAhBuB,IAAKT,EAAWd,EAAXc,QACdoB,EAASiL,EAAShL,QAClBU,EAAWC,GAAe7L,GAC1ByK,EAAKsB,GAAUjN,EAAQwL,EAAK,EAAOW,EAAQjL,EAAO4L,GAClD0K,EAAatW,EAAMmJ,EACnBoN,EAAkB5T,EAAUkH,GAC9BsK,EAAK,KAEL8B,EAAW,OACWhK,GAAMgK,EAAWxL,EAAI,CAAC3L,EAAQwX,IAApDnC,OAAIkC,YAENA,EAAiB/Y,GAAUiZ,EAAkBD,EAAaxX,KAExDqV,EAAI,KACFoC,SAcFxN,EAAI1F,KAAO,CAACiT,EAAYD,GACjB,EAdP/X,EAAO,CACL1B,OAAQiN,EACR/K,OAAQ,CACNA,OAAQuX,EACR/L,IAAK,CACHE,GAAIuB,GAAUjN,EAAQwL,EAAK,EAAMW,EAAQjL,EAAO4L,GAChDnB,GAAAA,IAGJzL,KAAMgB,EAAMhB,KACZD,MAAO,OAQf,EACA,GAEEzB,GAEEqF,EAASrF,GAEXc,GADA8I,EAAQ5J,EACG,CAAC4Y,KAEZhP,EAAQ0C,EAAQtM,GAChBc,GAAI8X,EAAU,CAAChP,KAEjBiP,EAAc,CAACjN,GAAKT,EAAcvB,IAASkP,IAE3CD,EAAc,CAACC,MAEjBrL,EAAOtN,KAAI4Q,gBAAO,EAAG,UAAM8H,IAC3BD,EAASpL,IAAI6B,OACP6J,EAA8Bja,EAAUoQ,UAC1C6J,IACF1R,OAAOC,OACLnC,EAAiBsT,GACjBnT,EAAWmT,EAASjT,UAAWuT,IAEjCN,EAASpN,cAAc7M,OAASua,GAElCzQ,GAAgB4G,EAAQuJ,E7BtFJ,U6BuFbA,4DCnFF,sCAAsB7S,2BAAAA,wBACQD,EAAoBC,UAAjDpC,OAAOwV,OAAUhT,OACjB7F,EAAqC,UAC3CzC,EAAMsb,GAAS,SAAChb,EAAIH,OACZqJ,EAAS/G,EAAOtC,GAAOgJ,EAAYhJ,EAAK,CAC5CW,OAAQM,EAAU0E,GAClBwD,OAAQhB,IAEVxC,EAAMoG,GAAG1C,EAAOlJ,GAChBsK,GAAgB9E,EAAO0D,MAElB/G,wBCEF,SAAS8Y,EAAanS,EAAmBC,OACxCC,EAASC,GAAc,CAC3BhB,GAAIc,EACJZ,IAA6B,iBAAjBW,EAA4B,CAAC9B,KAAM8B,GAAgBA,IAG3D9H,EAAOD,EAAW,CACtBO,OAAQ,CAACE,K/BvBS,U+BwBlBC,SAAU,EACVjB,QAAQwI,MAAAA,SAAAA,EAAQuB,UAAUvB,MAAAA,SAAAA,EAAQxI,UAG9B+J,EAAS,CACbyM,QAAS,GACTzN,SAAUvI,EACVwJ,MAAO,IAGTxJ,EAAKK,KAAOmI,G/BlCQ,S+BkCSe,EAAQ,CACnC/J,QAAQwI,MAAAA,SAAAA,EAAQuB,UAAUvB,MAAAA,SAAAA,EAAQxI,QAClCyH,GAAIe,IAGNtJ,EACE,CACEwb,MAAOrS,EACPsS,OAAQjM,EACRkM,MAAO3Q,EACP4Q,OAAQJ,IAEV,SAACK,EAASC,OACFC,EAAeD,EAAIE,cAMnBC,E1BwCuC7S,EAAY,CAACkC,W0BxCfwQ,IAC3ChR,EAAOC,MAAMgR,GAAgBE,MAEvB1E,EAAU,IAAI3B,IACpB9K,EAAOyM,QAAWwE,OAAmBxE,EAErC0E,EAAa9S,OAAS,SAAAtI,UACpBuC,EAAO6Y,EAAcpb,GACdA,GAET4B,EACE4B,EAAS4X,GAAc1Z,IACvBiI,IAAK,SAACqD,EAAKC,EAAGhJ,UACZA,EAAMnD,MAAQ,KACPkM,MAGXoO,EAAajS,OAAM,SAAAnJ,GACjBqC,GAAI4H,EAAQ,CAACjK,IACb0W,EAAQ9U,IAAI5B,GACPA,EAAKyW,WAAUzW,EAAKyW,SAAWC,GAC/BlW,EAAUR,KAAOA,EAAKE,OAAS+J,MAEtC5H,GAAI4H,EAAQ,CAACmR,IAEbnR,aAAkBgR,GAAS,SAACI,UAC1B7b,EAAQkX,EAAS2E,GACVD,EAAajS,MAAMkS,IAE5BpR,WAAgBgR,GAAShR,EAAOiR,GAAgB,SAC9C1S,EACAhB,OAEMkB,EAASC,GAAc,CAACd,IAAKL,EAAWG,GAAIa,WAC9CE,MAAAA,GAAAA,EAAQuB,OAEH+Q,EAAQxS,EAAchB,GAGxB4T,EAAaJ,EAAQxS,EAAc,CAACtI,OAAQ+J,EAAQtC,GAAIe,aAK/DxI,EAASM,EAAUyJ,UACrB/J,GACFd,EAAM6K,EAAOC,OAAO,SAAC5I,EAAgB/B,UACnCwK,GAAezI,EAAMpB,EAAOgK,MAAM3K,OAGlCmJ,MAAAA,GAAAA,EAAQuB,QACVvB,EAAOuB,OAAOC,MAAMD,OAAOA,GAEtBA,qHzBgEF,kBACLpB,EAAU,EAAO,oBAAqB,WAC/BgF,+CMzKF,gBACL7N,IAAAA,KACAN,IAAAA,GACAoB,IAAAA,MAMMY,EAAM,CAAC6C,GAAKoP,IAAI,CAACjU,GAAI,SAAAS,UAAST,EAAGS,UACnCW,EAAO,KACHJ,EAAOD,EAAW,CAACC,KAAMgB,IACzBI,EAAM9B,EAAaiJ,SAASnH,GAC5BwZ,EAAqCxa,EAAcuF,gBACnD7E,EAAQ8Z,EAAWxZ,IAAO,UAChCwZ,EAAWxZ,GAAMN,EACjBA,EAAM+Q,KAAK7R,GACJoL,GAAmB,eAClB9H,EAAMxC,EAAM6Q,QAAQ3R,IACb,IAATsD,GAAYxC,EAAM8Q,OAAOtO,EAAK,GAClCwS,GAAU9V,UAGNA,EAAOD,EAAW,CACtBC,KAAMgB,EACNxB,OAAQ,CAACF,GACTgB,OAAQ,CAACS,OAAQzB,YAEZ8L,GAAmB,WACxB0K,GAAU9V,oBoBtBT,SACL6a,EACAC,OAGIvR,EADAvB,EAA4B6S,EAE5B3U,EAAU2U,KACZtR,EAASsR,EACT7S,EAAS8S,OAGL1a,ECfD,SAAqBd,OACpByb,EAAsBhb,EAAW,CACrCK,MAAO,CACLiZ,OAAQ,GACRvJ,SAAU,EACVkL,KAAM,GAERhb,KAAM,CACJiJ,IAAK,SAACsD,EAAGnM,EAAOmD,GACTzD,EAAUyD,GAIyC,QAApD5D,EAAQG,EAAUyD,GAAOvD,KAAM,iBACjCI,EAAM0P,UAAY,GAElB1P,EAAM0P,UAAY,EAClB1P,EAAM4a,MAAQ,GAPd5a,EAAM4a,MAAQ,KAUlBhI,GAAQ,CAACjP,SjCxBQ,UiCwBW+O,MAAO,IACnC7J,IACE,SACEsD,EACAnM,OAMOiZ,EAAgBjZ,EAAhBiZ,OAAQ2B,EAAQ5a,EAAR4a,KACX5a,EAAM0P,SAAW,GAAuB,IAAlBuJ,EAAOzW,QACjCkL,QAAQmN,UAAUxL,MAAK,WACjBrP,EAAM4a,OAASA,GACnBlc,EAAQua,EAAOzH,OAAO,EAAGyH,EAAOzW,SAAS,SAAAN,GACvCuN,GAAYvN,EAAM8W,YAClB9W,EAAMyL,GAAGzL,EAAM7C,eAIrB,EACA,MAKAgG,EAAc1F,EAAW,CAC7BC,KAAM,CACJiJ,IAAK,SAACxJ,EAAOyb,EAAI3X,OACT4X,EAAarb,EAAUyD,MACzB4X,EAAY,KACRC,EAAYD,EAAWnb,SAE1BL,EAAQyb,EAAW,cACnBtb,EAAUqb,IACqC,YAA9Cxb,EAAQG,EAAUqb,GAAYnb,KAAM,MACtC,KACMoC,EAAWI,EAAYe,GACvBnC,EAAKga,EAAUhb,MAAMqK,MAAMrJ,GAC3B2L,EAAMpN,EAAQyb,EAAW,OAC/BhZ,EAAS2S,SAAShI,GAAO3L,EACzBgB,EAAS0S,aAAa/H,GAAOtN,MAEvBwN,EAAYtN,EAAQyb,EAAW,aACjCnO,GAA2B,WAAdA,IACf7K,EAASiZ,gBAAgBtO,GAAOE,EAAUqO,eAOhD5V,EAAoB3F,EAAW,CACnCC,KAAM,CACJiJ,IAAK,SAACsD,EAAG2O,EAAI3X,OACLnB,EAAWI,EAAYe,MACzBnB,EAAU,KACN+Y,EAAarb,EAAUyD,GACzB4X,KAGCxb,EAFewb,EAAWnb,KAEP,cACnBF,EAAUqb,IACqC,YAA9Cxb,EAAQG,EAAUqb,GAAYnb,KAAM,SAEtCoC,EAASmZ,cAAgB,UAO/BC,EAAqB,CACzBC,QAASnc,EACT4D,IAjDW,GAkDX4R,aAAc,GACdC,SAAU,GACVsG,gBAAiB,GACjBhR,kBAAS7F,MACH,YAAaA,SACRO,GAAW9C,GAAauZ,EAAa,KAAMhX,GAAOQ,YAErDhF,EAAO8C,EAAS0B,UACfO,GAAW9C,GAAauZ,EAAaxb,EAAMA,EAAKI,MAAMqK,MAAO,GACjEzF,SAELoJ,KjC/GiB,QiCgHjB7F,SAAUxI,EAAW,CACnBO,OAAQ,CACNE,KjCnHc,SiCoHdM,MAAO,CAACia,EAAqBtV,EAAaC,IAE5CrF,KAAM,CAACf,KAAM,QACbc,MAAO,CAAC2a,oBAAAA,KAEVpV,gBAAiB,GACjB6B,SAAU,GACVhC,QAASuV,EACTtV,YAAAA,EACAC,kBAAAA,EACA+R,cAAe,WAEV+D,ED3GOE,CAAYnS,MAEtBvB,EAAQ,KACJ2T,EAAW3T,EAAO5H,SACpBub,EAAU,KACNlE,EAAgBkE,EAASlE,cAC/BkE,EAASlE,cAAgB,GACzBrX,EAAMqX,cAAgBA,EACtB3Y,EAAQ2Y,GAAe,SAAAtI,UAAaA,EAASmE,IAAMlT,QAEjD4H,EAAO8I,OAAQ,KACX8K,EAAe/K,EAAgB7I,EAAO8I,QAAQ,SAAAxR,UAClDL,EAAOiH,EAAS5G,GAAO,iDAEzB+I,OAAOC,OAAOlI,EAAM0U,aAAc8G,GAClCxb,EAAM4U,gBACHvS,MAAMC,QAAQsF,EAAO8I,SAAa9I,EAAO8I,kBAAkB3G,KAE5DnC,EAAOR,WACTpH,EAAMoH,SAAWqJ,EAAgB7I,EAAOR,UAAU,SAAAlI,UAChDL,EACEiH,EAAU5G,+DAMXc,mBR7Bc,SAACyb,OAKhB9V,EAAS,YACcY,EAAoBkV,EAAM,UAA/Cjb,IAAAA,KAAMV,IAAAA,GAAK8H,cACnB8C,GAAclK,EAAMmF,EAAQ,UAC5B+E,GAAc5K,EAAI6F,EAAQ,QAC1B4M,GAAa5M,EAAQ7F,EAAI,MAClBkL,GACLrL,EAAW,CACTP,OAAQoB,EACRX,MAAOC,EACPG,KAAM,CAACqP,GAAI3J,EAAQiC,OAAAA,GACnB1H,OAAQ,GACRG,SAAU,6BU/BT,SAA2B4Q,GAChCtK,GAAasK,OACPyK,EACJ3K,KAAoBE,EAAaA,EAAWF,KAAsBE,EACpEpS,EAAO6c,EAAerF,UAAW,4CAC3BvO,EAAQL,IACRkU,EAAW3Q,GAAmBlD,UACpC4T,EAAerF,UAAU,CACvBnV,KAAM4G,EACN0G,MAAOmN,EACPC,SAAUD,IAEL7T,iBChBF,sCAAkBtB,2BAAAA,wBACYD,EAAoBC,UAAjD/F,OAAQmH,OAAShB,cAClBgB,IAEHnH,GADAmH,EAASnH,GACOA,QAElBuP,EAAqBpI,EAAQ,SACtB4P,GACL,QACA5P,EAAO6P,MACPhX,EACAmH,EAAO3C,OACP2C,EAAO7H,OACP,KACA6H,EAAOhC,KACPgB,GACCgB,EAAOiU,OACR,EACA,oBCHG,SAAiB1S,SAAyBuH,IAAAA,OAC/C7R,EAAOoI,GAASyJ,GAAS,2CAKrB1O,EACA8Z,EACAhH,EANEiH,EAAmBtL,EAAgBC,GACnCsL,EAAgB/T,OAAOgU,oBAAoBF,GAC3CG,EAAqB,GACrBC,EAAqB,GAIvBrW,EAASqD,IAEX2L,EAAe,EACfjW,GAFAmD,EAAWmH,GAEKkS,QAAS,uCACzBS,EAAiBpZ,EAASV,EAASqZ,UAC1BvV,EAAUqD,GACnB2S,EAAiBpZ,EAASyG,GAE1BtK,EAAO,EAAO,uDAEhBwR,EAAeyL,GAAiB,SAAClc,EAAM+M,MAEjC6D,EAASwL,EAAerP,GAAM,CAChC7L,EAAIob,EAAYtc,OACVwc,EAAa7c,EAAQK,EAAM,aAC7Bwc,GAA6B,WAAfA,IAChBL,EAAiBpP,GAAOyP,EAAW/P,KAAK0P,EAAiBpP,KAE3D7L,EAAIqb,EAAaJ,EAAiBpP,QAGtClL,EAAO,CACL1B,OAAQmc,EACRja,OAAQka,EACRnc,MAAOgC,IAEL8S,GACF7M,OAAOC,OAAOlG,EAAU0S,aAAcqH,kEC/CnC,SAAiBxd,EAAU+K,EAAmB1B,MAC/C9B,EAASvH,UACXwJ,EAAU,EAAO,mBACVxJ,KAELuH,EAASvH,IAAQuH,EAAUvH,GAAM,KAC7B4K,EAASzJ,EAAUnB,GACnBwC,EAASsI,EAAYC,EAAc,CACvClK,OAAQ+J,EACRvD,KAAMrH,EAAI6H,UACVW,IAAKa,WAEPqB,GAAenD,EAAUvH,GAAOA,EAAIkQ,SAAWlQ,EAAKwC,GAChDoI,GAAQA,EAAOC,MAAMhF,MAAMrD,GACxBA,MAEHA,EAA8BsB,MAAMC,QAAQ/D,GAAO,GAAK,UAC9DD,EACEC,GACA,SAACc,EAAOZ,UACLsC,EAAOtC,GAAOqH,EAASzG,GAASA,EAAQgK,EAAYhK,EAAO,CAACuG,KAAMnH,OAEhEsC,kB3BcF,mBACDhB,EACA6F,qBAFoBY,2BAAAA,sBAIpBmG,EAEA1H,IAHkCsB,EAAoBC,UAApD/F,OAAQgX,OAAO7Y,OAAKgI,OAEtB8Q,EAAU,SAIZ5O,GAAO2O,IACPxQ,GAASxG,IACTuP,EAAqBvP,EV3CH,YU6ClBgX,EAAQhX,EAAOgX,MACf7Y,EAAK6B,EAAO7B,GACZ8Y,GAAWjX,EAAOob,OAClB5W,EAASxE,EAAOwE,OAEhBlF,EAASU,EAAOV,OAChB6F,EAAOnF,EAAOmF,KACd+G,EAAMlM,EAAOkM,IACblM,EAASA,EAAOA,QAEX+W,GVvDa,SUyDlBC,EACAhX,EACAwE,EACAlF,EACAnB,EACAgH,EACAgB,EACA8Q,EACA,EACA,EACA/K,sB4BtEG,SACLzN,sBAC8C,KAA7Cc,IAAAA,MAEDnB,EACEmB,GAASgC,MAHH+C,KAIN,2DAEIsX,EAAgBrc,GAASgC,UACxB8D,EAAU5G,GACb,SAAC+C,OACOwL,EAAMD,WACZ/L,EAAO,CACL1B,OAAQb,EACR+C,OAAQ,CACNA,OAAAA,EACAwL,IAAAA,GAEFzN,MAAOqc,IAEF5O,EAAIA,KAEb,SAACxL,UACCR,EAAO,CAAC1B,OAAQb,EAAM+C,OAAAA,EAAQjC,MAAOqc,IAC9Bpa,sBXtBR,SACLjC,EACA4H,YAAAA,IAAAA,EAA8D,IAE1D5H,EAAMmb,eACRvJ,QAAQpD,MACN,wEAGE8N,EAAgB1U,EAAO2U,OAAS3U,EAAO2U,OAAOhU,KAAI,qBAAEoE,OAAgB,GACpE5L,EAAS,UACfzC,EAAM0B,EAAM0U,cAAc,SAACrV,EAAOsN,OAC5B6D,EAAS8L,EAAe3P,QACtB3L,EAAKhB,EAAM2U,SAAShI,GAIxB5L,EAAO4L,IAHU3M,EAAMib,gBAAgBtO,IAAQiM,IAE7C5X,GAAMA,KAAMhB,EAAM8C,IACK9C,EAAM8C,IAAI9B,GAAI4D,QAEdvF,OAGzB,gBAAiBuI,IAAWA,EAAO4U,cACrC3d,EAAOmB,EAAMqb,QAAS,uCACtBhL,EAAe3N,EAAS1C,EAAMqb,UAAU,SAACzb,EAAM+M,GAEzCA,KAAO5L,GACRyP,EAAS8L,EAAe3P,IACxBpN,EAAQK,EAAM,cACgB,WAA/BL,EAAQK,EAAM,eAEdmB,EAAO4L,GAAO3M,EAAMiK,SAASrK,QAG5BmB,wBzBnBF,SAA6BqD,EAAqBqY,GACvDrY,EAAMgC,UAAYqW,EAClBxU,OAAOC,OAAOnC,EAAiB3B,GAAQ8B,EAAWuW,EAAS/c,EAAU0E,oBwBMhE,mBAEDsY,EACAjF,EAFEkF,EAAS,2BADQnW,2BAAAA,wBAIWD,EAAoBC,UAAhD/F,OAAQmc,OAAQhW,OAChBiW,GAAcD,EAChBC,IACFH,EAAUjc,EAAOqc,MACjBF,EAAQnc,EAAOmc,MACfnF,EAAQhX,EAAOgX,MACfhX,EAASA,EAAOA,YAEZsc,EAAcjX,EAAS8W,GACvBI,GAAmBlX,EAAQ8W,IAAUjS,GAAWiS,GAChDK,GAAgBF,IAAgBC,GAAmB/V,GAAS2V,GAC7DF,IAAUA,EAAU,IACpBG,EAYHve,EAAMoe,GAAS,SAAC3c,EAAQoQ,UACtBoC,GAAaoK,EAAQ5c,WAAiBoQ,OAZxCtR,EAAOoe,EAAc,6BACrB3e,EACEse,GACA,SAACzQ,EAAG1N,UACDie,EAAQje,GAAOgJ,EAAY,CAC1BmC,QAAS,EACT7C,IAAKH,OAGX8V,EAAQ5B,GAAKrT,EAAY,CAACmC,QAAS,EAAM7C,IAAKH,SAY5CsW,EANEvc,EAAS,IAAIsT,IAChB,GAAqB3N,OAAO7F,EAAQgX,GAAS,GAAIxP,OAAOyI,OAAOgM,KAE5DS,EAAYlV,OAAOmV,KACvBL,GAAeC,EAAkBN,EAAUE,MAGzCG,GAAeC,EACbD,GAAapc,EAAOG,IAAI8b,GAC5BM,EAAc,CACZH,GAAe1Q,GAAKT,EAAcgR,GAAQ,EAAO,GACjDhK,GAAQ,CACN7N,KAAMgY,EACN9X,OAAQ,EACRJ,MAAOkY,EACPne,YAAGsF,EAAMyU,EAAcxV,OACf9D,EAAQge,OAAON,EAAc5Z,EAAMmJ,EAAIsQ,EAAM1Y,IACnDwU,GACEC,EACAnI,EAAS2M,EAAW9d,GAASA,EAAQ,KACrC6E,EACAf,YAKH,GAAI8Z,EAAc,KACjBK,EAAa7T,GAAe,IAClC6T,EAAWld,KAAO,YAEdmd,EADEhT,EAAQ,GAEdjM,EAAMse,GAAO,SAACY,EAAW/e,MACnBqH,EAAQ0X,GAAY,CACtBD,EAAc,EACdzc,EAAIyJ,EAAO9L,GAEXkC,EAAOG,IAAI0c,OACLC,EAAUxU,GACduU,EACA,GACA,CAACnR,GAAKiR,GAAazU,IAAK,SAACqD,EAAKC,cAAIG,EAAU7N,GAAOyN,UAEjDpG,EAAS0X,GAAY,CACvBF,EAAW1Y,QAAQnG,GAAO+e,EAAUvT,eAC9ByM,EAAW9K,EAAc4R,GAC/B7R,GAAS2R,EAAY,CAAC9c,KAAMkW,EAAUvG,MAAO1R,EAAK2B,KAAM,UACxD+G,EAAc,kBAAmBuP,EAAU+G,QAI7CF,GACFpW,EAAc,YAAamW,GAE7BJ,EAAc,CACZK,GAAgBlR,GAAKiR,EAAY,EAAO,GACxC5U,IAAW,SAACxE,EAAMyU,EAAcxV,OACzB,IAAIZ,EAAI,EAAGA,EAAI4a,EAAU3a,OAAQD,IAAK,KACnCmb,EAAWP,EAAU5a,MACTiO,EAASjG,EAAOmT,GAC9Bva,EAAMmJ,EAAEoR,GACRd,EAAMc,GAAUxZ,eAElBwU,GAAWC,EAAc+E,EAAUxZ,EAAMf,GAI7CuV,GAAWC,EAAc,KAAMzU,EAAMf,KACpC,SAGLtE,EAAO,EAAO,mDAEV8e,EAAehe,EAAW,CAC9BM,KAAM,CAACqP,GAAIqN,GACXvd,OAAQqY,EAAQ,GAAKhX,EACrBT,MAAO0c,EACP9c,KAAMsd,EACNhd,OAAQ,CAACS,OAAQ0B,MAAM7B,KAAKG,IAC5BN,SAAU,OAERoX,GACFD,GACEmF,EACAlF,EACAhX,EACA,KACAkd,EACA,KACAhB,EACA/V,IAGA,EACA,IAGCiW,EAAY,OAAOH,gE5B7HC,gBAEzB9W,IAAAA,KACAgY,IAAAA,IACAjY,IAAAA,OACA/G,IAAAA,UAWOK,EAHSU,EAAW,CACzBM,KAAM,CAACR,QAASuS,IAblBrF,KAaoC/G,KAAAA,EAAMgY,IAAAA,EAAKjY,OAAAA,KAEpB/G"}