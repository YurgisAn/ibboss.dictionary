import React, { FC, KeyboardEvent, ReactNode, useRef, useState, useMemo } from 'react';

import { KEY_CODES } from '../../common';
import { OverflowMenu } from '../../OverflowMenu';
import { useClickOutside } from '../../common/hooks';
import { MaskField } from '../Mask/MaskField';
import type { IInputMaskProps } from '../Mask';
import type { IOverflowMenuItem } from '../../OverflowMenu';

import * as FlagIcons from './flags/index';
import { phoneCodes } from './flags/phoneCodes';
import { Wrapper } from './styled-components/Wrapper';
import { ReactComponent as EmptyFlag } from './flags/EmptyFlag.svg';
export interface IInputPhoneCountry extends IInputMaskProps {
  /** Значение инпута */
  value: string;
  /** Дополнительная иконка */
  icon?: ReactNode;
  /** Ширина меню */
  menuWidth?: string | number;
  /** Коллбек на изменение  значения меню */
  onSelectItem?: (value: IOverflowMenuItem) => void;
  /** Значение меню */
  menuValue?: IOverflowMenuItem | undefined;
}

export const InputPhoneCountry: FC<IInputPhoneCountry> = ({
  value = '',
  disabled,
  status,
  size = 'big',
  onChange,
  width = 'inherit',
  menuWidth = '320px',
  onFocus,
  onBlur,
  onSelectItem,
  additionalText,
  menuValue,
  mask,
  ...props
}) => {
  const [phoneCode, setPhoneCode] = useState('+7');
  const [focused, setFocused] = useState(false);

  const [valueSelect, setSelectValue] = useState<IOverflowMenuItem>();
  const ref = useRef<HTMLInputElement | null>(null);
  const wrapperRef = useRef<HTMLDivElement | null>(null);
  const [opened, setOpened] = useState(false);

  const inputValue = value.slice(phoneCode.length);

  const optionsList = useMemo(
    () =>
      Object.keys(FlagIcons)
        .map((componentName) => {
          const countryName = componentName.replace('Icon', '');
          const countryInfo = phoneCodes.find(
            ({ name }) => countryName.toLowerCase() === name.toLowerCase().replace(/[-'",. ]/g, '')
          );

          const countryDialCode = countryInfo?.dial_code?.replace(/\s/, '');

          return {
            label: `${countryInfo?.russianName || countryName} ${countryDialCode}`,
            value: countryDialCode,
            icon: FlagIcons[componentName],
          };
        })
        .sort((a, b) => {
          if (a.label > b.label) return 1;
          if (a.label < b.label) return -1;
          return 0;
        }),
    [FlagIcons]
  );

  const DEFAULT_FLAG = FlagIcons.Russia;

  const handleEscKeyDown = (event: KeyboardEvent) => {
    if (opened && event.keyCode === KEY_CODES.ESCAPE) {
      setOpened(false);
      setFocused(false);
    }
  };
  const handleOnChange = (value: any) => {
    onChange(value.masked.replace(/[()\s]/g, ''));
  };
  const clickOutside = () => {
    setOpened(false);
    focused && !opened && setFocused(false);
  };

  useClickOutside(wrapperRef, clickOutside, handleEscKeyDown);

  const handleSelectChange = (item: IOverflowMenuItem) => {
    const phoneCode = item.value.replace(/\s/, '');
    onSelectItem?.(item);
    !onSelectItem && setSelectValue(item);
    setOpened(false);
    onChange(`${phoneCode}${inputValue}`);
    setPhoneCode(phoneCode);
    setFocused(true);
    ref?.current?.focus();
  };

  const IconFlag = valueSelect ? valueSelect.icon : DEFAULT_FLAG;
  const DisabledFlag = EmptyFlag;

  return (
    <Wrapper ref={wrapperRef}>
      <MaskField
        size={size}
        disabled={disabled}
        status={status}
        placeholder={''}
        focused={focused}
        setFocused={setFocused}
        mask={mask ? mask : `${phoneCode} (999) 999 999`}
        onFocus={onFocus}
        onChange={handleOnChange}
        value={inputValue}
        refInput={ref}
        opened={opened}
        setOpened={setOpened}
        alwaysShowMask
        additionalText={opened ? '' : additionalText}
        CountryIcon={disabled ? DisabledFlag : IconFlag}
        phoneCountry
        {...props}
      />
      <OverflowMenu
        width={menuWidth}
        value={menuValue ? menuValue : valueSelect}
        size={size}
        list={optionsList}
        onChange={handleSelectChange}
        disabled={disabled}
        menuIsOpen={opened && !disabled}
        hideDropdownIndicator
      />
    </Wrapper>
  );
};
