import React, { useState, useRef, useLayoutEffect } from 'react';
import type { FC, ReactNode, RefObject } from 'react';

import { createTooltipHOC } from '../TooltipHOC';

import { ContentWrapper } from './ContentWrapper';
import { IconWrapper as Icon } from './IconWrapper';
import { ICON_DEFAULT_SIZE, ICON_MICRO_SIZE } from './constants';
import type { Size } from './constants';

export interface ISelectItemProps<T = any> {
  /** Уникальное значение опции */
  value: T;
  /** Элементы содержимого, текст опции или иконка + текст опции */
  children: ReactNode;
  /** Отключение опции */
  disabled?: boolean;
  /** Размер селекта (данный параметр автоматически передается из компонента Select) */
  size?: Size;
  /** Контейнер, в котором будет отрисовываться тултип с помощью createPortal (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра container */
  tooltipPortalContainer?: Element | null;
  /** Элемент, относительно которого будет позиционироваться тултип (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра target */
  tooltipTargetContainer?: RefObject<any>;
}

export const SelectItem: FC<ISelectItemProps> = ({
  size,
  tooltipPortalContainer,
  tooltipTargetContainer,
  children,
}) => {
  const contentRef = useRef(null);
  const [overflow, setOverflow] = useState<boolean>(false);

  const detectOverflow = (e: any) => e.offsetWidth < e.scrollWidth;
  const isObject = (element: ReactNode) => typeof element === 'object';

  useLayoutEffect(() => {
    const contentCurrent = contentRef.current;
    if (contentCurrent && detectOverflow(contentCurrent) !== overflow) {
      setOverflow(detectOverflow(contentCurrent));
    }
  }, [children, tooltipTargetContainer]);

  const Content = overflow ? createTooltipHOC(ContentWrapper) : ContentWrapper;
  const iconSize = size === 'micro' ? ICON_MICRO_SIZE : ICON_DEFAULT_SIZE;

  const renderChild = (child: ReactNode, key?: number) => {
    return isObject(child) ? (
      <Icon key={key} width={iconSize} height={iconSize}>
        {child}
      </Icon>
    ) : (
      <Content
        key={key}
        ref={contentRef}
        tooltip={child?.toString() || ''}
        container={tooltipPortalContainer}
        target={tooltipTargetContainer?.current}
      >
        {child}
      </Content>
    );
  };

  return <>{Array.isArray(children) ? children.map(renderChild) : renderChild(children)}</>;
};
