import React, { createRef } from 'react';
import type { FC, MutableRefObject, MouseEvent, KeyboardEvent } from 'react';

import { SelectItem } from '../SelectItem';

import { MenuList, MenuWrapper, OptionWrapper } from './styled-components';
import type { Size } from './constants';

import type { IOverflowMenuItem } from './';

type PropsType = {
  menuRef: MutableRefObject<HTMLDivElement | null>;
  menuListRef: MutableRefObject<HTMLDivElement | null>;
  optionsRefs: { [value: string]: any };
  tooltipContainer?: Element | null;
  size: Size;
  value: IOverflowMenuItem | undefined;
  opened?: boolean;
  disabled?: boolean;
  width?: string | number;
  list: IOverflowMenuItem[];
  onOptionClick: (value: any) => (event: MouseEvent<HTMLDivElement>) => void;
  onKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;
};

export const DropdownMenu: FC<PropsType> = ({
  list,
  value,
  size,
  opened,
  disabled,
  width,
  menuRef,
  menuListRef,
  optionsRefs,
  tooltipContainer,
  onOptionClick,
  onKeyDown,
}) => {
  const renderListItems = (list: IOverflowMenuItem[]) => {
    return list.map((item: any, index: number) => {
      const { label, value: childValue, disabled: childDisabled, icon: Icon, id } = item;
      const selected = JSON.stringify(value) === JSON.stringify(item);
      const onClick = childDisabled || disabled ? undefined : onOptionClick(item);

      const ref = createRef<HTMLDivElement>();
      optionsRefs.current[childValue] = ref;

      return (
        <OptionWrapper
          key={`${value}_${index}`}
          data-value={childValue}
          tabIndex={-1}
          id={id || index}
          ref={ref}
          size={size}
          disabled={disabled || childDisabled}
          selected={selected}
          onMouseDown={(e) => {
            e.preventDefault();
            onClick?.(item);
          }}
        >
          <SelectItem
            value={undefined}
            disabled={childDisabled}
            tooltipPortalContainer={tooltipContainer}
            tooltipTargetContainer={ref}
            size={size}
          >
            {Icon && <Icon />}
            {label}
          </SelectItem>
        </OptionWrapper>
      );
    });
  };
  return (
    <MenuWrapper ref={menuRef} onKeyDown={onKeyDown} opened={opened} width={width}>
      <MenuList ref={menuListRef} size={size} tabIndex={-1}>
        {renderListItems(list)}
      </MenuList>
    </MenuWrapper>
  );
};
