import React, { useState, useRef, useLayoutEffect, useMemo } from 'react';
import type { FC, ReactNode, RefObject } from 'react';

import { createTooltipHOC } from '../TooltipHOC';

import { OptionWrapper } from './OptionWrapper';
import { Image } from './Image';
import { Content } from './Content';
import { Note } from './Note';
import { Label } from './Label';
import { currencyToSymbol } from './constants';
import type { Currency, Size, ItemType } from './constants';

export interface IProductSelectItemProps<T = any> {
  /** Уникальное значение опции */
  value: T;
  /** Отключение опции */
  disabled?: boolean;
  /** Подпись к опции */
  children: string | number;
  /** Изображение продукта / карты. Если в качестве image передана строка, то она будет использована как src для элемента img. Во всех остальных случаях image будет отрисован как есть */
  image?: ReactNode;
  /** Знак валюты */
  currency?: string | Currency;
  /** Подпись для продукта и карты */
  note?: ReactNode;
  /** Размер селекта (данный параметр автоматически передается из компонента Select) */
  size?: Size;
  /** Контейнер, в котором будет отрисовываться тултип с помощью createPortal (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра container */
  tooltipPortalContainer?: Element | null;
  /** Элемент, относительно которого будет позиционироваться тултип (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра target */
  tooltipTargetContainer?: RefObject<any>;
}

interface IProductOrCardSelectItemProps extends IProductSelectItemProps {
  type: ItemType;
}

export type ICardSelectItemProps = IProductSelectItemProps;

const ProductOrCardSelectItem: FC<IProductOrCardSelectItemProps> = ({
  children,
  tooltipPortalContainer,
  tooltipTargetContainer,
  image,
  note,
  currency,
  type,
}) => {
  const labelRef = useRef<HTMLDivElement | null>(null);
  const noteRef = useRef<HTMLDivElement | null>(null);
  const wrapperRef = useRef<HTMLDivElement | null>(null);
  const [overflow, setOverflow] = useState<boolean>(false);

  const detectOverflow = (e: HTMLDivElement) => e.offsetWidth < e.scrollWidth;

  useLayoutEffect(() => {
    const labelCurrent = labelRef.current;
    const noteCurrent = noteRef.current;

    const labelOverflow = labelCurrent && detectOverflow(labelCurrent);
    const noteOverflow = noteCurrent && detectOverflow(noteCurrent);
    const contentOverflow = labelOverflow || noteOverflow;

    if (contentOverflow !== null && contentOverflow !== overflow) {
      setOverflow(contentOverflow);
    }
  }, [wrapperRef, labelRef, noteRef, overflow, children, tooltipTargetContainer]);

  const Wrapper = overflow ? createTooltipHOC(OptionWrapper) : OptionWrapper;

  const isImageUrl = typeof image === 'string';
  const currencySymbol = useMemo(() => {
    if (!currency) return null;
    const cur = ['usd', 'rub', 'eur'].includes(currency.toLowerCase())
      ? currencyToSymbol[currency.toLowerCase()]
      : null;
    return cur;
  }, [currency]);
  const currencyLabel = currencySymbol ? ` ${currencySymbol}` : '';

  const tooltip = `${children}${currencyLabel}${note ? `\n${note}` : ''}`;

  return (
    <Wrapper
      ref={wrapperRef}
      tooltip={tooltip}
      container={tooltipPortalContainer}
      target={tooltipTargetContainer?.current}
    >
      <Image $type={type} $image={isImageUrl ? `${image}` : ''}>
        {!isImageUrl && image}
      </Image>
      <Content>
        <Label ref={labelRef}>
          {children}
          {currencyLabel}
        </Label>
        {note && <Note ref={noteRef}>{note}</Note>}
      </Content>
    </Wrapper>
  );
};

export const ProductSelectItem = (props: IProductSelectItemProps) => (
  <ProductOrCardSelectItem {...props} type="product" />
);
export const CardSelectItem = (props: IProductSelectItemProps) => (
  <ProductOrCardSelectItem {...props} type="card" />
);
