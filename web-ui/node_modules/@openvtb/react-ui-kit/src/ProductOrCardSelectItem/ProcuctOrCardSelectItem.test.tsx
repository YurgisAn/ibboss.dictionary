import React from 'react';
import { shallow, mount } from 'enzyme';

import { Tooltip } from '../TooltipHOC/Tooltip';
import { ProductSelectItem, CardSelectItem } from '../ProductOrCardSelectItem';

describe('ProductOrCardSelectItem', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const note = 'note';
  const currency = 'rub';
  const image = 'https://duckduckgo.com/assets/common/dax-logo.svg';

  it('should render component with text, image, note and currency', () => {
    const wrapper = mount(
      <ProductSelectItem value={1} note={note} currency={currency} image={image}>
        text
      </ProductSelectItem>
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with correct image src', () => {
    const wrapper = mount(
      <ProductSelectItem value={1} image={image}>
        text
      </ProductSelectItem>
    );
    setTimeout(() => {
      expect(wrapper.find('img').prop('src')).toEqual(image);
    }, 10000);
  });

  it('should render component with disabled state', () => {
    const wrapper = shallow(
      <ProductSelectItem value={1} disabled>
        text
      </ProductSelectItem>
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with small size', () => {
    const wrapper = shallow(
      <ProductSelectItem value={1} size="small">
        text
      </ProductSelectItem>
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with tooltip if detects overflow of children or note', () => {
    const wrapper1 = mount(
      <ProductSelectItem value={1}>
        texttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
      </ProductSelectItem>
    );
    const wrapper2 = mount(
      <CardSelectItem value={1} note="noteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee">
        text
      </CardSelectItem>
    );
    setTimeout(() => {
      expect(wrapper1.find(Tooltip));
      expect(wrapper2.find(Tooltip));
      const tooltip1 = wrapper1.find(Tooltip);
      const tooltip2 = wrapper2.find(Tooltip);
      expect(tooltip1.prop('children')).toBe(
        'texttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt'
      );
      expect(tooltip2.prop('children')).toBe('noteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee');
    }, 10000);
  });
});
