import React from 'react';
import { shallow } from 'enzyme';

import { ReactComponent as PersonOutline } from '../Icons/system/PersonOutline.svg';
import { ReactComponent as SaveOutline } from '../Icons/system/SaveOutline.svg';
import { ReactComponent as PrintOutline } from '../Icons/system/PrintOutline.svg';
import { Select, ISelectComponentProps, ISelectComponentItem } from '../Select';
import { SelectItem } from '../SelectItem';

describe('Select', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  const selectRequiredProps: ISelectComponentProps = {
    value: 1,
    onChange: (value: any) => console.log(value),
  };

  const defaultList: ISelectComponentItem[] = [
    { value: 1, label: 'Москва' },
    { value: 2, label: 'Новгород' },
    { value: 3, label: 'Орел' },
  ];

  const cardOrProductList: ISelectComponentItem[] = [
    {
      value: 17812,
      label: '123000.56',
      note: 'Дебетовая карта (*7812)',
      // eslint-disable-next-line react/display-name
      image: () => <div />,
      currency: 'rub',
    },
    {
      value: 298,
      label: '905.00',
      note: 'Кредитная карта (*1234)',
      // eslint-disable-next-line react/display-name
      image: () => <div />,
      currency: 'usd',
    },
    {
      value: 334,
      label: '7775.00',
      note: 'Дебетовая карта (*9845)',
      // eslint-disable-next-line react/display-name
      image: () => <div />,
      currency: 'eur',
    },
  ];

  it('should render component with children prop', () => {
    const wrapper = shallow(
      <Select {...selectRequiredProps}>
        <SelectItem value={1}>1</SelectItem>
        <SelectItem value={2}>2</SelectItem>
        <SelectItem value={3}>3</SelectItem>
      </Select>
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with list prop', () => {
    const wrapper = shallow(<Select {...selectRequiredProps} list={defaultList} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should check that component with children prop and component with list prop have equal menulist', () => {
    const wrapper1 = shallow(<Select {...selectRequiredProps} list={defaultList} menuIsOpen />);
    const wrapper2 = shallow(
      <Select {...selectRequiredProps} menuIsOpen>
        <SelectItem value={1}>1</SelectItem>
        <SelectItem value={2}>2</SelectItem>
        <SelectItem value={3}>3</SelectItem>
      </Select>
    );

    setTimeout(() => {
      const menuList1 = wrapper1.childAt(1).childAt(1).childAt(0);
      const menuList2 = wrapper2.childAt(1).childAt(1).childAt(0);
      const children1 = menuList1.prop('children');
      const children2 = menuList2.prop('children');

      expect(children1.toEqual(children2));
    }, 10000);
  });

  it('should render component with icon', () => {
    const wrapper = shallow(
      <Select {...selectRequiredProps}>
        <SelectItem value={1}>
          <PersonOutline />1
        </SelectItem>
        <SelectItem value={2}>
          <SaveOutline />2
        </SelectItem>
        <SelectItem value={3}>
          <PrintOutline />3
        </SelectItem>
      </Select>
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with small size', () => {
    const wrapper = shallow(<Select {...selectRequiredProps} list={defaultList} size="small" />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with micro size', () => {
    const wrapper = shallow(<Select {...selectRequiredProps} list={defaultList} size="micro" />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with disabled state', () => {
    const wrapper = shallow(<Select {...selectRequiredProps} list={defaultList} disabled />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with error state', () => {
    const wrapper = shallow(<Select {...selectRequiredProps} list={defaultList} error />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with label, placeholder, additionalText', () => {
    const wrapper = shallow(
      <Select
        {...selectRequiredProps}
        list={defaultList}
        label="Город"
        placeholder="Выберите из списка"
        additionalText="Место фактического проживания"
      />
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with card type', () => {
    const wrapper = shallow(
      <Select {...selectRequiredProps} list={cardOrProductList} type="card" />
    );
    expect(wrapper).toMatchSnapshot();
  });

  it('should render component with product type', () => {
    const wrapper = shallow(
      <Select {...selectRequiredProps} list={cardOrProductList} type="product" />
    );
    expect(wrapper).toMatchSnapshot();
  });
});
