import styled, { css } from 'styled-components';

import { DEFAULT_THEME } from '../../common';
import type { ITheme } from '../../themes';
import { INPUT_HEIGHT, INPUT_PADDING, Size, SelectType } from '../constants';

type PropsType = {
  size: Size;
  $type: SelectType;
  focused?: boolean;
  disabled?: boolean;
  error?: boolean;
};

const getBorderColor = (theme: ITheme, disabled?: boolean, error?: boolean, focused?: boolean) => {
  if (error && !disabled) return theme.color.error[60];
  if (disabled) return theme.color.neutral[10];
  if (focused) return theme.color.primary[60];
  return theme.color.neutral[30];
};

export const InputWrapper = styled.div<PropsType>`
  display: flex;
  position: relative;
  box-sizing: border-box;

  ${({ theme, disabled, error, focused, size, $type }) => css`
    height: ${INPUT_HEIGHT[size]};
    padding: ${INPUT_PADDING($type)[size]};
    color: ${disabled ? theme.color.neutral[30] : theme.color.neutral[90]};
    border-radius: ${theme.borderRadius};
    background: ${disabled ? theme.color.neutral[10] : theme.color.neutral.white};
    cursor: default;

    &::before {
      content: '';
      pointer-events: none;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      position: absolute;
      background: transparent;
      border: ${focused ? 2 : 1}px solid ${getBorderColor(theme, disabled, error, focused)};
      border-radius: ${theme.borderRadius};
    }
  `}

  &:hover::before {
    border-color: ${({ theme, focused, disabled, error }) =>
      !focused && !disabled && !error && theme.color.neutral[50]};
  }
  &:focus::before {
    outline: none;
  }
  &:focus {
    outline: none;
  }
`;

InputWrapper.defaultProps = {
  theme: DEFAULT_THEME,
};
