import React, { FC, useState, useRef } from 'react';

import { ReactComponent as ChevronDownOutline } from '../Icons/system/ChevronDownOutline.svg';
import { ReactComponent as ChevronUpOutline } from '../Icons/system/ChevronUpOutline.svg';
import { KEY_CODES } from '../common';
import type { IButtonProps } from '../Button';
import type { IOverflowMenuProps, IOverflowMenuItem } from '../OverflowMenu';
import { OverflowMenu } from '../OverflowMenu';
import { useClickOutside } from '../common/hooks';

import { MainButton } from './MainButton';
import { DropdownButton } from './DropdownButton';
import { Wrapper } from './Wrapper';
import { ButtonsWrapper } from './ButtonsWrapper';
import type { Kind } from './ButtonsWrapper';
import { Separator } from './Separator';

const ICON_SIZE = 24;
const ICON_SIZE_SMALL = 20;

export interface IMultiButtonProps {
  /** Значение кнопки */
  button: IOverflowMenuItem;
  /** Массив опций для меню */
  list: IOverflowMenuProps['list'];
  /** Коллбэк на изменение выбранной опции (кнопки или пункта меню). Срабатывает при клике на опцию или при нажатии Enter/Space при фокусе на опции */
  onChange?: IOverflowMenuProps['onChange'];
  /** Внешний вид кнопки */
  kind?: Kind;
  /** Размер кнопки */
  size?: IButtonProps['size'];
  /** Отключение кнопки */
  disabled?: boolean;
  /** Имя класса для переопределения стилей */
  className?: string;
  /** data-test-id атрибут для тестирования компонента */
  dataTestId?: string;
}

export const MultiButton: FC<IMultiButtonProps> = ({
  className,
  dataTestId,
  disabled,
  kind = 'primary',
  size = 'big',
  button,
  list,
  onChange,
}) => {
  const wrapperRef = useRef<HTMLDivElement>(null);
  const [menuOpened, setMenuOpened] = useState<boolean>(false);
  const [value, setValue] = useState<IOverflowMenuItem>(button);

  const handleDropdownClick = () => {
    setMenuOpened(!menuOpened);
  };
  const handleChange: IOverflowMenuProps['onChange'] = (value) => {
    setMenuOpened(false);
    setValue(value);
    onChange?.(value);
  };

  const handleOutsideClick = () => setMenuOpened(false);

  const handleEscKeyDown = (event: KeyboardEvent) => {
    if (menuOpened && event.keyCode === KEY_CODES.ESCAPE) {
      setMenuOpened(false);
    }
  };

  useClickOutside(wrapperRef, handleOutsideClick, handleEscKeyDown);

  const iconSize = size === 'big' || size === 'medium' ? ICON_SIZE : ICON_SIZE_SMALL;
  const Icon = menuOpened ? ChevronUpOutline : ChevronDownOutline;

  return (
    <Wrapper ref={wrapperRef} className={className} data-test-id={dataTestId} disabled={disabled}>
      <ButtonsWrapper disabled={disabled} kind={kind}>
        <MainButton
          disabled={disabled}
          kind={kind}
          size={size}
          onClick={() => handleChange(button)}
        >
          {button.label}
        </MainButton>
        <Separator size={size} />
        <DropdownButton disabled={disabled} kind={kind} size={size} onClick={handleDropdownClick}>
          <Icon height={iconSize} width={iconSize} />
        </DropdownButton>
      </ButtonsWrapper>
      <OverflowMenu
        disabled={disabled}
        hideDropdownIndicator
        list={list}
        menuIsOpen={menuOpened}
        alignment="right"
        size={size == 'micro' ? 'micro' : 'big'}
        value={value}
        onChange={handleChange}
      />
    </Wrapper>
  );
};
