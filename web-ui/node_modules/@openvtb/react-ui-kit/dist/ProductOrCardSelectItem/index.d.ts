import type { ReactNode, RefObject } from 'react';
import type { Currency, Size } from './constants';
export interface IProductSelectItemProps<T = any> {
    /** Уникальное значение опции */
    value: T;
    /** Отключение опции */
    disabled?: boolean;
    /** Подпись к опции */
    children: string | number;
    /** Изображение продукта / карты. Если в качестве image передана строка, то она будет использована как src для элемента img. Во всех остальных случаях image будет отрисован как есть */
    image?: ReactNode;
    /** Знак валюты */
    currency?: string | Currency;
    /** Подпись для продукта и карты */
    note?: ReactNode;
    /** Размер селекта (данный параметр автоматически передается из компонента Select) */
    size?: Size;
    /** Контейнер, в котором будет отрисовываться тултип с помощью createPortal (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра container */
    tooltipPortalContainer?: Element | null;
    /** Элемент, относительно которого будет позиционироваться тултип (данный параметр автоматически передается из компонента Select). Передать в компонент createTooltipHOC в качестве параметра target */
    tooltipTargetContainer?: RefObject<any>;
}
export declare type ICardSelectItemProps = IProductSelectItemProps;
export declare const ProductSelectItem: (props: IProductSelectItemProps) => JSX.Element;
export declare const CardSelectItem: (props: IProductSelectItemProps) => JSX.Element;
//# sourceMappingURL=index.d.ts.map