import React, { Component, RefObject, FocusEvent } from 'react';
import type { IDateSelectionProps, ICalendarProps } from '../Calendar';
import type { IInputMaskProps } from '../Inputs';
declare type CalendarSize = ICalendarProps['size'];
declare type IDatePickerInputMaskProps = Omit<IInputMaskProps, 'value'>;
export interface IDatePickerProps extends IDateSelectionProps, IDatePickerInputMaskProps {
    /** Коллбэк выбора даты, срабатывает при клике на дне или годе (в режиме диапазона date - это массив из двух дат) */
    onChange: (value: string) => void;
    value: string | Date | Date[] | null;
    /** Ширина инпута (по умолчанию используется ширина календаря) */
    width?: string | number;
    /** Размер календаря */
    calendarSize?: CalendarSize;
    /** Коллбэк обработки открытия календаря */
    onShow?: () => void;
    /** Коллбэк обработки закрытия календаря */
    onHide?: () => void;
    /** Коллбэк обработки выбора даты */
    onDateSelected?: () => void;
    /** Контейнер, в котором происходит размещение выпадающего календаря */
    calendarContainer?: Element;
    /** Флаг для открывания календаря */
    calendarIsOpen?: boolean;
    /** Коллбек парсит строку для получения даты для календаря */
    getDateFromCalendar?: (value: string | Date | Date[] | null, date?: 'start' | 'end', range?: boolean) => Date | null;
    /** Коллбек для изменения input value. Cейчас формат 11.11.1111 */
    formatInputValue?: (value: string | Date | Date[] | null, range?: boolean) => string;
}
interface IState {
    visible?: boolean;
    focused?: boolean;
    error?: string | null;
    posX: number;
    posY: number;
    mask: string;
}
export declare class DatePicker extends Component<IDatePickerProps, IState> {
    static defaultProps: Partial<IDatePickerProps>;
    refInput: RefObject<HTMLInputElement>;
    refDatePicker: RefObject<HTMLDivElement>;
    refCalendar: RefObject<any>;
    scrollableParents?: Array<Element>;
    state: IState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(_: IDatePickerProps, prevState: IState): void;
    changePosition: () => void;
    getValidator(): import("../Calendar/Validator").IDateValidator;
    handleToggleVisible: (e: React.MouseEvent<HTMLDivElement>) => void;
    handleChangeValue: (date: Date | null, event?: React.SyntheticEvent<any, Event> | undefined) => void;
    handleChangeRange: (dates: Date[] | null, event?: React.SyntheticEvent<any, Event> | undefined) => void;
    handleChangeInput: (value: {
        value: string;
        masked: string;
    }) => void;
    getDate: (value: string) => Date;
    onHide: () => void;
    onFocus: (event: FocusEvent<HTMLInputElement>) => void;
    onBlur: (event: FocusEvent<HTMLInputElement>) => void;
    getFormattedString: (value: Date) => string;
    getDateFromCalendar: (value: string | Date | Date[] | null, date?: "start" | "end" | undefined) => Date | null;
    handleParseInputValue: (value: string | Date | Date[] | null) => string;
    getStatus: (value: any, status: any, errorMessage: any) => any;
    getAdditionalText: (value: any, additionalText: any, errorMessage: any) => any;
    renderCalendar(): JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=index.d.ts.map