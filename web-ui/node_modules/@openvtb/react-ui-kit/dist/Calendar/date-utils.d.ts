import { addDays, addWeeks, addMonths, subMonths, addYears, subYears, differenceInCalendarDays, differenceInCalendarMonths, differenceInCalendarYears, getDate, getMonth, setMonth, getYear, setYear, startOfYear, startOfMonth, isAfter, isBefore, isValid } from 'date-fns';
import { LocaleType } from './constants';
export { isAfter as after, isBefore as before, isValid as valid, differenceInCalendarDays as differenceDays, differenceInCalendarMonths as differenceMonths, differenceInCalendarYears as differenceYears, addDays, addWeeks, addMonths, subMonths, addYears, subYears, getDate, getMonth, setMonth, getYear, setYear, startOfMonth, startOfYear, };
export declare const outOfBounds: (day: Date, minDate?: Date | null | undefined, maxDate?: Date | null | undefined) => boolean | null | undefined;
export declare const sameDay: (date1?: Date | null | undefined, date2?: Date | null | undefined) => boolean;
export declare const sameMonth: (date1?: Date | null | undefined, date2?: Date | null | undefined) => boolean;
export declare const equal: (date1?: Date | null | undefined, date2?: Date | null | undefined) => boolean;
export declare const changeTime: (dateTime: Date, newTime?: Date | null | undefined) => Date;
export declare const weekInMonth: (startOfWeek: Date, day: Date) => boolean;
export declare const dayInRange: (day: Date, startDate: Date, endDate: Date) => boolean;
export declare const yearsRange: (date: Date, yearCount: number) => {
    start: number;
    end: number;
};
export declare const startOfWeek: (date: Date, localeName: LocaleType) => Date;
export declare const endOfWeek: (date: Date, localeName: LocaleType) => Date;
export declare const getFormattedValue: (date: Date | null, pattern: string, localeName: LocaleType) => string;
export declare const getParsedValue: (dateString: string, formatString: string, localeName: LocaleType) => Date;
//# sourceMappingURL=date-utils.d.ts.map