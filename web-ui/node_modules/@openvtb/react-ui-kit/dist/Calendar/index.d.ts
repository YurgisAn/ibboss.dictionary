import React, { Component } from 'react';
import type { ICalendarProps, IDateSelectionProps } from './interfaces';
interface IState {
    viewDate: Date;
    activeDate: Date | null;
    yearView: boolean;
}
export type { ICalendarProps, IDateSelectionProps };
export declare class Calendar extends Component<ICalendarProps> {
    static getDefaultValidator: (minDate?: Date | undefined, maxDate?: Date | undefined) => import("./Validator").IDateValidator;
    static defaultProps: Partial<ICalendarProps>;
    state: IState;
    constructor(props: any);
    componentDidMount(): void;
    getValidator(): import("./Validator").IDateValidator;
    getInitialViewDate: () => Date;
    changeView: () => void;
    changeYear: (year: any) => void;
    increaseYear: () => void;
    decreaseYear: () => void;
    changeMonth: (month: any) => void;
    increaseMonth: () => void;
    decreaseMonth: () => void;
    handleDayMouseEnter: (day: Date, _: any) => void;
    handleMonthMouseLeave: () => void;
    handleDayClick: (day: Date, event: any) => void;
    handleYearClick: (date: Date, _: any) => void;
    renderHeader: () => React.ReactNode;
    renderPanel: () => React.ReactNode;
    renderMonth: () => JSX.Element;
    renderYears: () => JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=index.d.ts.map