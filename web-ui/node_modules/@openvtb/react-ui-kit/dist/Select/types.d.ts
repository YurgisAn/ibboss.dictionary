import type { ReactNode, FocusEvent, MouseEvent, KeyboardEvent } from 'react';
import type { SelectCurrency, Size, SelectType } from './constants';
export interface ISelectComponentItem<T = any> {
    /** Подпись к опции */
    label: string | number;
    /** Уникальное значение опции */
    value: T;
    /** Отключение опции */
    disabled?: boolean;
    /** Иконка для опции. Используется в обычном селекте */
    icon?: ReactNode;
    /** Подпись для продукта и карты */
    note?: ReactNode;
    /** Изображение продукта / карты. Если в качестве image передана строка, то она будет использована как src для элемента img. Во всех остальных случаях image будет отрисован как есть */
    image?: ReactNode;
    /** Добавить знак валюты */
    currency?: string | SelectCurrency;
}
export interface ISelectComponentProps {
    /** Массив опций. Если не передать массив, то в качестве опций будут использованы children */
    list?: ISelectComponentItem[];
    /** Верхняя надпись к селекту */
    label?: string;
    /** Плейсхолдер селекта */
    placeholder?: string;
    /** Дополнительный текст под селектом */
    additionalText?: string;
    /** Ширина селекта */
    width?: string | number;
    /** Размер компонента */
    size?: Size;
    /** Отключение компонента */
    disabled?: boolean;
    /** Селект с возможностью очищения, по умолчанию false */
    clearable?: boolean;
    /** Селект в состоянии ошибки */
    error?: boolean;
    /** Значение селекта. Если в качестве значения используется объект, то должно соблюдаться равенство ссылок этого объекта с одним из value опций (reference equality), иначе value не будет установлено */
    value: any;
    /** Сообщение, которое будет выведено в меню при отсутствии опций */
    withoutOptionMessage?: string;
    /** Тип селекта */
    type?: SelectType;
    /** Открытие меню */
    menuIsOpen?: boolean;
    /** Имя класса для переопределения стилей */
    className?: string;
    /** data-test-id атрибут для тестирования компонента */
    dataTestId?: string;
    /** Контейнер, в котором при необходимости можно отрисовать меню через ReactDOM.createPortal */
    menuContainer?: Element | null;
    /** Контейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal */
    tooltipContainer?: Element | null;
    /** Коллбэк на изменение значения селекта */
    onChange: (value: any) => void;
    /** Коллбэк на открытие меню */
    onOpen?: (evt?: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement>) => void;
    /** Коллбэк на закрытие меню */
    onClose?: (evt?: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement>) => void;
    /** Коллбэк на потерю фокуса селектом */
    onBlur?: () => void;
    /** Коллбэк на фокус селекта */
    onFocus?: (event: FocusEvent<HTMLDivElement>) => void;
}
//# sourceMappingURL=types.d.ts.map