import { FC, RefObject, MutableRefObject, ChangeEvent, FocusEvent, KeyboardEvent } from 'react';
import type { Status, Size } from '../common';
export interface IInputSuggest {
    /** Ширина инпута */
    width?: string | number;
    /** Отключение поля ввода */
    disabled?: boolean;
    /** Лейбл инпута */
    label?: string;
    /** Подсказка в поле ввода */
    placeholder?: string;
    /** Текст под инпутом */
    additionalText?: string;
    /** Статус */
    status?: Status;
    /** Аттрибут name */
    inputName?: string;
    /** Уникальный идентификатор */
    id?: string;
    /** Имя класса для переопределения стилей */
    className?: string;
    /** data-test-id атрибут для тестирования компонента */
    dataTestId?: string;
    /** Размер инпута */
    size?: Size;
    /** Ref инпута */
    refInput?: MutableRefObject<HTMLInputElement> | MutableRefObject<null> | RefObject<HTMLInputElement>;
    /** Контейнер, в котором при необходимости можно отрисовать тултип через ReactDOM.createPortal */
    tooltipContainer?: Element | null;
    /** Массив опций */
    options: (string | IOptionSuggest<any>)[];
    /** Количество символов, после которого будут показаны подсказки */
    charsToShowSuggest?: number;
    /** Текст сообщения если не найден ни один элемент */
    noopMessage?: string;
    /** Загрузка данных */
    load?: boolean;
    /** Текст сообщения  при загрузке данных */
    loadMessage?: string;
    /** Очищаемое поле */
    clearable?: boolean;
    /** Коллбек на изменение блюр */
    onBlur?: (event: FocusEvent<HTMLInputElement>, value: string) => void;
    /** Коллбек на изменение фокуса */
    onFocus?: (event: FocusEvent<HTMLInputElement>) => void;
    /** Коллбек на нажатие клавиш */
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;
    /** Функция фильтрации опций */
    filterOptions?: (options: (string | IOptionSuggest<any>)[]) => (string | IOptionSuggest<any>)[];
    /** Максимальная высота выпадающего меню */
    menuMaxHeight?: string | number;
    /** Выпадающее меню */
    menuIsOpen?: boolean;
    /** Коллбек на изменение состояния input */
    onInputChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void;
    /** Коллбек для кастомизации опций */
    renderElementOption?: (options: string | IOptionSuggest<any>) => any;
    /** Коллбек для выбора опций dropDown */
    onChange: (value: string | IOptionSuggest<any>) => void;
    /** Значение dropdown */
    selectedItem?: string | IOptionSuggest<any>;
    /** Значение инпута */
    value?: string;
}
export interface IOptionSuggest<T = any> {
    id: string | number;
    label: string;
    value?: T;
}
export declare const InputSuggest: FC<IInputSuggest>;
//# sourceMappingURL=index.d.ts.map