import { Dispatch, SetStateAction, ChangeEvent, FocusEvent, KeyboardEvent, ReactNode, FC, MutableRefObject, RefObject } from 'react';
import type { Status, Size, Type, Mask } from '../common/types';
export interface ISkeletonProps {
    onChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void;
    focused: boolean;
    setFocused: Dispatch<SetStateAction<boolean>>;
    value?: any;
    placeholder?: string;
    id?: string;
    icon?: ReactNode;
    type?: Type;
    inputName?: string;
    onClick?: (event: any) => void | undefined;
    iconServices?: ReactNode;
    size?: Size;
    status?: Status;
    width?: string | number;
    disabled?: boolean;
    onBlur?: (event: FocusEvent<HTMLInputElement>, value: string) => void;
    onFocus?: (event: FocusEvent<HTMLInputElement>) => void;
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;
    activeInformer?: boolean;
    maxLength?: number;
    mask?: Mask | object | string | any;
    suffix?: string;
    iconIsActive?: boolean;
    setIconIsActive?: Dispatch<SetStateAction<boolean>>;
    number?: boolean;
    range?: boolean;
    withCoins?: boolean;
    ref: MutableRefObject<HTMLInputElement> | null | RefObject<HTMLInputElement> | undefined;
    defaultValue?: any;
}
export declare const InputSkeleton: FC<ISkeletonProps>;
//# sourceMappingURL=InputSkeleton.d.ts.map