import { FocusEvent, KeyboardEvent, MouseEvent, PureComponent, RefObject } from 'react';
export interface IBreadcrumbsProps {
    /** Имя класса для переопределения стилей */
    className?: string;
    /** data-test-id атрибут для тестирования компонента */
    dataTestId?: string;
    /** Список элементов */
    list: Array<IBreadcrumbsItem>;
    /** Мобильный вид компонента */
    mobile?: boolean;
    /** Маленький размер компонента */
    small?: boolean;
}
export interface IBreadcrumbsItem {
    /** Подпись к элементу */
    label: string;
    /** url элемента */
    url?: string;
}
interface IBreadcrumbsState {
    focusedItemId: number | null;
    hiddenItems: Array<IBreadcrumbsItem & {
        id: number;
    }>;
    items: Array<IBreadcrumbsItem & {
        id: number;
    }>;
    overflowMenuFocused: boolean;
    valueOverflow: any;
}
export declare class Breadcrumbs extends PureComponent<IBreadcrumbsProps, IBreadcrumbsState> {
    selfRef: RefObject<HTMLDivElement>;
    overflowMenuRef: RefObject<HTMLDivElement>;
    constructor(props: IBreadcrumbsProps);
    static getDerivedStateFromProps({ list }: IBreadcrumbsProps): {
        items: {
            id: number;
            /** Подпись к элементу */
            label: string;
            /** url элемента */
            url?: string | undefined;
        }[];
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    handleOverflowMenuChange: (value: any) => void;
    handleOverflowMenuBlur: () => void;
    handleItemClick: (id: number) => void;
    handleMouseDown: (event: MouseEvent<HTMLDivElement>) => void;
    handleFocus: ({ currentTarget, target }: FocusEvent<HTMLDivElement>) => void;
    handleBlur: () => void;
    handleKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;
    focusPreviousItem: () => void;
    focusNextItem: () => void;
    getItemById: (itemId: number) => (IBreadcrumbsItem & {
        id: number;
    }) | undefined;
    getHiddenItemById: (itemId: number) => (IBreadcrumbsItem & {
        id: number;
    }) | undefined;
    getNextVisibleItem: () => (IBreadcrumbsItem & {
        id: number;
    }) | undefined;
    hideItem: () => void;
    renderContent: () => (false | JSX.Element)[];
    renderItem: ({ id, label, url }: IBreadcrumbsItem & {
        id: number;
    }) => JSX.Element;
    renderOverflowMenu: () => JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=index.d.ts.map