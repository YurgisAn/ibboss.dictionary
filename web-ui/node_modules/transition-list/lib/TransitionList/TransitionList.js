"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitionList = void 0;
var react_1 = __importStar(require("react"));
var utils_1 = require("./utils");
var TransitionList = function (props) {
    var className = props.className, children = props.children;
    var _a = __read(react_1.useState({}), 2), forceUpdate = _a[1];
    var childrenHeight = react_1.useRef([]);
    var deferredChildren = react_1.useRef([]);
    var parentNode = react_1.useRef(null);
    var prevChildren = react_1.useRef([]);
    var renderChildren = react_1.useRef([]);
    var wasUnmount = react_1.useRef(false);
    var isAnimated = react_1.useRef(false);
    if (isAnimated.current) {
        deferredChildren.current.push(children);
    }
    else {
        var nextChildren = deferredChildren.current[0] || children;
        renderChildren.current = utils_1.mergeChildrenForRender(prevChildren.current, nextChildren, childrenHeight.current);
        prevChildren.current = nextChildren;
        deferredChildren.current.shift();
    }
    react_1.useLayoutEffect(function () {
        var _a;
        var childNodes = (_a = parentNode.current) === null || _a === void 0 ? void 0 : _a.childNodes;
        if (!isAnimated.current && parentNode.current && childNodes.length) {
            var hasAnimatedChildren = !!parentNode.current.querySelectorAll('div[data-render-type]').length;
            if (hasAnimatedChildren) {
                isAnimated.current = true;
                childrenHeight.current.length = 0;
                var rerenderDelay_1 = 0;
                var hasNew = parentNode.current.querySelectorAll('div[data-render-type="NEW"]').length;
                var hasMoved_1 = parentNode.current.querySelectorAll('div[data-render-type="MOVED"]').length;
                var hasRemoved_1 = parentNode.current.querySelectorAll('div[data-render-type="REMOVED"]').length;
                var hasAllNew_1 = hasNew === childNodes.length;
                childNodes.forEach(function (cn) {
                    cn.style.visibility = 'visible';
                    cn.style.position = 'unset';
                    var firstChildStyle = getComputedStyle(cn.firstChild);
                    var height = cn.offsetHeight +
                        parseInt(firstChildStyle.marginTop) +
                        parseInt(firstChildStyle.marginBottom);
                    if (cn.dataset.key) {
                        childrenHeight.current.push({ key: cn.dataset.key, height: height });
                    }
                    switch (cn.dataset.renderType) {
                        case 'NEW':
                            cn.style.height = '0';
                            var delay = hasAllNew_1 || (!hasMoved_1 && !hasRemoved_1) ? 0 : 400;
                            setTimeout(function () {
                                cn.style.transition = 'height ease 0.3s, opacity ease 0.2s 0.20s';
                                cn.style.height = height + "px";
                                cn.style.opacity = '1';
                            }, delay);
                            rerenderDelay_1 = Math.max(rerenderDelay_1, delay + 400);
                            break;
                        case 'MOVED':
                            cn.style.transition = 'transform ease 0.4s';
                            cn.style.transform = 'none';
                            rerenderDelay_1 = Math.max(rerenderDelay_1, 400);
                            break;
                        case 'REMOVED':
                            cn.style.transition = 'height ease 0.2s 0.2s, opacity ease 0.2s';
                            cn.style.height = '0';
                            cn.style.opacity = '0';
                            rerenderDelay_1 = Math.max(rerenderDelay_1, 400);
                            break;
                    }
                });
                setTimeout(function () {
                    var _a;
                    var childNodes = (_a = parentNode.current) === null || _a === void 0 ? void 0 : _a.childNodes;
                    if (parentNode.current && childNodes) {
                        childNodes.forEach(function (cn) {
                            cn.removeAttribute('data-render-type');
                            cn.removeAttribute('style');
                        });
                    }
                    isAnimated.current = false;
                    if (!wasUnmount.current) {
                        forceUpdate({});
                    }
                }, rerenderDelay_1);
            }
        }
    });
    react_1.useEffect(function () { return function () {
        wasUnmount.current = true;
    }; }, []);
    return (react_1.default.createElement("div", { ref: parentNode, className: className }, renderChildren.current.map(function (item) {
        var child = item.child, newChild = item.newChild, translateY = item.translateY, removedChild = item.removedChild, height = item.height;
        var key = child.key;
        if (newChild)
            return (react_1.default.createElement("div", { key: key, "data-key": key, children: child, "data-render-type": 'NEW', style: { opacity: 0, visibility: 'hidden', position: 'absolute' } }));
        if (removedChild)
            return (react_1.default.createElement("div", { key: key, "data-key": key, children: child, "data-render-type": 'REMOVED', style: { transform: "translateY(" + translateY + "px)", height: height + "px" } }));
        if (translateY)
            return (react_1.default.createElement("div", { key: key, "data-key": key, children: child, "data-render-type": 'MOVED', style: { transform: "translateY(" + translateY + "px)" } }));
        return (react_1.default.createElement("div", { key: key, "data-key": key, children: child }));
    })));
};
exports.TransitionList = TransitionList;
//# sourceMappingURL=TransitionList.js.map