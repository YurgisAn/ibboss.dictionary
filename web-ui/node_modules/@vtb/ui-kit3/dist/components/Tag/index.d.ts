import * as React from 'react';
export declare type TagKind = 'neutral' | 'green' | 'blue' | 'red' | 'orange';
export interface TagProps extends React.HTMLAttributes<HTMLButtonElement> {
    /** Тип тэга. Можно выбрать из предложенных вариантов, либо задать свои цвета для тэга.
     * В случае когда статус задается через статусную метку (кружок), свойство background отвечает за цвет статусной метки.
     * В случае когда статус задается через цвет фона и обводки, свойство background отвечает за цвет фона,
     * свойстов border отвечает за цвет обводки.
     */
    kind?: TagKind | {
        background: string;
        border?: string;
    };
    /** Отображение статуса через цвет обводки и фона. По умолчанию, при statusViaBackground = false, отображение статуса
     * происходит через цветную статусную метку (цветной кружок рядом с текстом)
     */
    statusViaBackground?: boolean;
    /** Отображение иконки. Иконка отображается только по левому краю и при условии, что статус отображается через цвет обводки и фона */
    icon?: React.ReactNode;
    /** Ширина тэга */
    width?: number | string;
    /** Обработчик клика */
    onClick?: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement>) => void;
    /**
     * Позволяет рендерить компонент используя другой тег HTML (https://styled-components.com/docs/api#as-polymorphic-prop).
     * В storybook в качестве примера приведены несколько возможных вариантов этого параметра (кроме них можно использовать любой другой HTML тег).
     */
    as?: React.ElementType;
}
export declare const Tag: React.FC<React.PropsWithChildren<TagProps>>;
//# sourceMappingURL=index.d.ts.map