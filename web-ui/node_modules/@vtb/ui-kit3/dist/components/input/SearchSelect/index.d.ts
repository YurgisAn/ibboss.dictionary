import * as React from 'react';
import type { InputStatus, ComponentDimension } from "../types";
import type { HighlightFormat } from './types';
export interface SearchSelectProps extends Omit<React.InputHTMLAttributes<HTMLSelectElement>, 'onFocus' | 'onBlur'> {
    value?: string | string[];
    /** Отображать статус загрузки данных */
    isLoading?: boolean;
    /** Позволяет использовать SearchSelect как select */
    mode?: 'select' | 'searchSelect';
    /** Сообщение, отображаемое при наличии флага isLoading */
    loadingMessage?: React.ReactNode;
    /** Добавить селекту возможность множественного выбора */
    multiple?: boolean;
    /** По умолчанию, если в компоннет Option передан текст и только текст, то в зависимости от набранного в Input значения,
     * опции будут подсвечиваться. Описываемый флаг отключает это поведение. */
    defaultHighlighted?: boolean;
    /** По умолчанию, если multiple = true, в опции присутствует checkbox. Данный флаг позволяет убрать его */
    showCheckbox?: boolean;
    /** Значение по умолчанию для некотролируемого селекта */
    defaultValue?: string | string[];
    displayStatusIcon?: boolean;
    displayClearIcon?: boolean;
    /** Позволяет определить действия при нажатии на иконку очистки. По умолчанию произойдет очистка выбранных значений */
    onClearIconClick?: () => void;
    idleHeight?: 'full' | 'fixed';
    /** По умолчанию опции подсвечиваются отдельно по каждой разделенной пробелом части в поисковой строке. Данная опция
     * позволяет искать по строке целиком */
    highlightFormat?: HighlightFormat;
    /** Референс на контейнер для правильного позиционирования выпадающего списка */
    portalTargetRef?: React.RefObject<HTMLElement>;
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: ComponentDimension;
    /** Иконки для отображения в правом углу поля */
    icons?: React.ReactNode;
    /** Статус поля */
    status?: InputStatus;
    renderSelectValue?: (value: string | string[] | undefined, searchText: string) => React.ReactNode;
    /**  Значение введенное пользователем для поиска */
    inputValue?: string;
    /** первоначальное значение в строке поиска без переведения строки в контролируемый компонент */
    defaultInputValue?: string;
    onInputChange?: React.ChangeEventHandler<HTMLInputElement>;
    onFocus?: (evt: React.FocusEvent<HTMLDivElement>) => void;
    onBlur?: (evt: React.FocusEvent<HTMLDivElement>) => void;
}
export declare const SearchSelect: React.ForwardRefExoticComponent<SearchSelectProps & React.RefAttributes<HTMLSelectElement>>;
export { Option } from './Option';
export { Highlight } from './Highlight';
export { OptionGroup } from './OptionGroup';
//# sourceMappingURL=index.d.ts.map