import * as React from 'react';
import { DefaultTheme, FlattenInterpolation, ThemeProps } from 'styled-components';
import type { RefCallback, RefObject } from "../common/utils/handleRef";
import type { Dimension } from './style';
declare type Trigger = 'click' | 'hover';
export interface HintProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Функция, которая возвращает реакт-компонент с контентом тултипа. Если этому компоненту нужны props, используйте замыкание */
    renderContent: () => React.ReactNode;
    /** Контейнер, в котором будет отрисован тултип через React.createPortal. По умолчанию тултип отрисовывается в document.body */
    container?: Element | null;
    /** Элемент, относительно которого будет позиционироваться хинт, если позиционирование относительно children не подходит */
    target?: React.MutableRefObject<Element | null | undefined>;
    /** Триггер появления компонента (событие, которое вызывает появление хинта) */
    visibilityTrigger?: Trigger;
    /** Размер компонента */
    dimension?: Dimension;
    /** Ссылка на тултип */
    hintRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement> | null;
    /** ClassName для внешнего контейнера (AnchorWrapper) */
    anchorClassName?: string;
    /** Id для внешнего контейнера (AnchorWrapper) */
    anchorId?: string;
    /** Позволяет добавлять миксин созданный с помощью styled css для внешнего контейнера (AnchorWrapper) */
    anchorCssMixin?: FlattenInterpolation<ThemeProps<DefaultTheme>>;
}
export declare const Hint: React.FC<HintProps>;
export {};
//# sourceMappingURL=index.d.ts.map