import type { HTMLAttributes, ReactNode } from 'react';
import * as React from 'react';
import { DefaultTheme, FlattenInterpolation, ThemeProps } from 'styled-components';
export declare type MultiSelectDimension = 'xl' | 'm' | 's';
export interface MultiSelectProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {
    /** Отключение селекта */
    disabled?: boolean;
    /** Размер Меню */
    dimension?: MultiSelectDimension;
    /** Значение селекта */
    value: string[];
    /** Функция, которая возвращает реакт-компонент с контентом для отображения в cелекте*/
    renderInputValue?: () => ReactNode;
    /** Обработчик для изменения состояния селекта */
    onChange: (value: string[]) => void;
    /** Ссылка на Дропдаун */
    dropDownRef?: React.RefObject<HTMLElement>;
    /** Колбек на открытие селекта */
    onOpen?: () => void;
    /** Колбек на закрытие селекта */
    onClose?: () => void;
    /**
     * Позволяет выравнивать позицию дропдаун контейнера относительно селекта.
     * Принимает стандартные значения css свойства align-self (auto | flex-start | flex-end | center | baseline | stretch)
     */
    alignDropdown?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    /** Задает максимальную высоту контейнера с опциями */
    dropMaxHeight?: string | number;
    /** Позволяет добавлять миксин на дроп контейнер созданный с помощью styled css  */
    dropContainerCssMixin?: FlattenInterpolation<ThemeProps<DefaultTheme>>;
}
export declare const MultiSelect: React.ForwardRefExoticComponent<MultiSelectProps & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=index.d.ts.map