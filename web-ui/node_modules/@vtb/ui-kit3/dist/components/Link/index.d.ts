import * as React from 'react';
export interface LinkOwnProps {
    /** Вид ссылки */
    appearance?: AppearanceLink;
    /** Отключение ссылки */
    disabled?: boolean;
    /** Размер ссылки */
    dimension?: DimensionLink;
}
export declare type AppearanceLink = 'primary' | 'secondary';
export declare type DimensionLink = 'm' | 's';
export declare const styleDisabledMixin: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    disabled?: boolean | undefined;
}, import("styled-components").DefaultTheme>>;
export declare const styleColorMixin: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    appearance?: AppearanceLink | undefined;
}, import("styled-components").DefaultTheme>>;
export declare const styleMixin: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<import("styled-components").DefaultTheme>>;
export declare const styleTextMixin: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<{
    dimension?: DimensionLink | undefined;
}, import("styled-components").DefaultTheme>>;
export declare const LinkCssMixin: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<LinkOwnProps, import("styled-components").DefaultTheme>>;
export declare const LinkComponent: import("styled-components").StyledComponent<"a", import("styled-components").DefaultTheme, LinkOwnProps, never>;
export interface LinkProps extends LinkOwnProps, React.AnchorHTMLAttributes<HTMLAnchorElement> {
}
export declare const Link: React.ForwardRefExoticComponent<LinkProps & React.RefAttributes<HTMLAnchorElement>>;
//# sourceMappingURL=index.d.ts.map