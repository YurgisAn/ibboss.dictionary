import * as React from 'react';
declare type Dimension = 'xl' | 'l' | 'm' | 's';
declare type FilterProps = {
    /** Функция закрытия фильтра */
    closeMenu: () => void;
    /** Функция установки состояния фильтра (активный/неактивный).
     * Необходимо для окрашивания иконки фильтра в синий цвет при активном фильтре и в серый при неактивном фильтре.
     */
    setFilterActive: (isActive: boolean) => void;
};
export interface FilterCompProps extends Omit<React.HTMLAttributes<HTMLButtonElement>, 'onChange'> {
    /** Размер компонента */
    dimension?: Dimension;
    /** Функция отрисовки содержимого фильтра (выпадающего меню фильтра). Если её не передать, значок фильтра отображаться не будет */
    renderFilter: (obj: FilterProps) => React.ReactNode;
    /** Функция отрисовки иконки фильтра. По умолчанию в качестве иконки фильтра применяется OverflowIcon (троеточие) */
    renderFilterIcon?: () => React.ReactNode;
    /** Колбек на клик вне меню фильтра */
    onFilterMenuClickOutside?: (obj: FilterProps, event: Event) => void;
    /** Колбек на открытие меню фильтра */
    onFilterMenuOpen?: () => void;
    /** Колбек на закрытие меню фильтра */
    onFilterMenuClose?: () => void;
    /** Выравнивание контента ячеек столбца по левому или правому краю. По умолчанию left */
    cellAlign?: 'left' | 'right';
    /** Ref на элемент, относительно которого будет позиционироваться меню фильтра */
    targetRef: React.RefObject<HTMLElement>;
}
export declare const Filter: React.ForwardRefExoticComponent<FilterCompProps & React.RefAttributes<HTMLButtonElement>>;
export {};
//# sourceMappingURL=Filter.d.ts.map