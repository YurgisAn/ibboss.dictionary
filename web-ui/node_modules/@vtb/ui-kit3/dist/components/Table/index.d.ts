import * as React from 'react';
export declare const DEFAULT_COLUMN_WIDTH = 100;
export declare type Dimension = 'xl' | 'l' | 'm' | 's';
declare type FilterProps = {
    /** Функция закрытия меню фильтра */
    closeMenu: () => void;
    /** Функция установки состояния фильтра (активный/неактивный).
     * Необходимо для окрашивания иконки фильтра в синий цвет при активном фильтре и в серый при неактивном фильтре.
     */
    setFilterActive: (isActive: boolean) => void;
};
export declare type Column = {
    /** Уникальное название столбца */
    name: string;
    /** Заголовок столбца */
    title: string;
    /** Дополнительный текст заголовка столбца */
    extraText?: string;
    /** Ширина столбца. По умолчанию 100px */
    width?: number | string;
    /** Выравнивание контента ячеек столбца по левому или правому краю. По умолчанию left */
    cellAlign?: 'left' | 'right';
    /** Является ли столбец сортируемым. По умолчанию false */
    sortable?: boolean;
    /** Дефолтная сортировка столбца (по возрастанию или по убыванию) */
    defaultSort?: 'asc' | 'desc';
    /** Отображение столбца как фиксированного (которые остаются при скролле на месте).
     * Столбец с чекбоксами по умолчанию фиксированный.
     * Фиксированные столбцы располагаются по левому краю таблицы и идут друг за другом
     * (в columnList фиксированные столбцы должны быть в начале массива и идти друг за другом).
     */
    sticky?: boolean;
    /** Функция отрисовки содержимого фильтра (выпадающего меню фильтра). Если её не передать, значок фильтра отображаться не будет */
    renderFilter?: (obj: FilterProps) => React.ReactNode;
    /** Функция отрисовки иконки фильтра. По умолчанию в качестве иконки фильтра применяется OverflowIcon (троеточие) */
    renderFilterIcon?: () => React.ReactNode;
    /** Колбек на клик вне меню фильтра */
    onFilterMenuClickOutside?: (obj: FilterProps, event: Event) => void;
    /** Колбек на открытие меню фильтра */
    onFilterMenuOpen?: () => void;
    /** Колбек на закрытие меню фильтра */
    onFilterMenuClose?: () => void;
};
declare type RowId = string | number;
declare type IdSelectionStatusMap = Record<RowId, boolean>;
export interface TableRow extends Record<RowId, React.ReactNode> {
    id: RowId;
    className?: string;
    /** Строка в состоянии selected */
    selected?: boolean;
    /** Строка в состоянии disabled  */
    disabled?: boolean;
    /** Строка в состоянии error */
    error?: boolean;
    /** Строка в состоянии success */
    success?: boolean;
    /** Строка в раскрытом состоянии */
    expanded?: boolean;
    /** Функция рендера содержимого раскрытой части строки (детализации строки) */
    expandedRowRender?: (row: any) => React.ReactNode;
    /** Функция рендера OverflowMenu для строки.
     * Входные параметры: сама строка, колбеки onMenuOpen и onMenuClose.
     * Колбеки необходимо вызывать при открытии/закрытии меню для того, чтобы таблица могла управлять видимостью OverflowMenu.
     * OverflowMenu отображается при ховере на строку или при открытом меню
     * и располагается по правому краю строки в видимой области таблицы.
     *
     * В качестве результата функция должна возвращать OverflowMenu.
     * Для таблицы с dimension='s' или dimension='m' используется OverflowMenu c dimension='m'.
     * Для таблицы с dimension='l' или dimension='xl' используется OverflowMenu c dimension='l'.
     */
    overflowMenuRender?: (row: any, onMenuOpen: () => void, onMenuClose: () => void) => React.ReactNode;
}
export interface TableProps extends React.HTMLAttributes<HTMLDivElement> {
    /** Массив столбцов */
    columnList: Column[];
    /** Массив строк */
    rowList: TableRow[];
    /** Установка чекбокса в шапке таблицы в состояние checked.
     * По умолчанию состояние checked вычисляется на основе анализа параметра selected у строк таблицы
     */
    headerCheckboxChecked?: boolean;
    /** Установка чекбокса в шапке таблицы в состояние indeterminate (состояние, при котором выбрана только часть строк).
     * По умолчанию состояние checked вычисляется на основе анализа параметра selected у строк таблицы
     */
    headerCheckboxIndeterminate?: boolean;
    /** Колбек на изменение состояния чекбокса, находящегося в хедере
     * Возвращает параметр selectAll (если true - выбраны все строки в таблице, false - выбор снят со всех строк таблицы)
     */
    onHeaderSelectionChange?: (selectAll: boolean) => void;
    /** Колбек на выбор/снятие выбора со строки (на нажатие по чекбоксу строки).
     * idSelectionStatusMap - это объект, ключами которого являются id строк, чье состояние checked было изменено,
     * а значениями ключей - значение checked
     */
    onRowSelectionChange?: (idSelectionStatusMap: IdSelectionStatusMap) => void;
    /** Колбек на раскрытие/свертывание строки (на нажатие по стрелке слева).
     * idSelectionStatusMap - это объект, ключами которого являются id строк, чье состояние expanded было изменено,
     * а значениями ключей - значение expanded
     */
    onRowExpansionChange?: (idSelectionStatusMap: IdSelectionStatusMap) => void;
    /** Колбек для клика по строке таблицы */
    onRowClick?: (rowId: RowId) => void;
    /** Колбек для двойного клика по строке таблицы */
    onRowDoubleClick?: (rowId: RowId) => void;
    /** Размер таблицы */
    dimension?: Dimension;
    /** Отображение столбца с чекбоксами, позволяющими выбрать необходимые строки */
    displayRowSelectionColumn?: boolean;
    /** Отображение столбца со стрелками для детализации (раскрытия) строк */
    displayRowExpansionColumn?: boolean;
    /** Окрашивание шапки таблицы в серый цвет */
    greyHeader?: boolean;
    /** Ширина колонки (заголовка) регулируется через параметр Spacing Between Items в настройках
     * Auto Layout, при выбранном заголовке. Минимальное значение 12px, для таблиц S и M, и 16px для таблиц L и XL.
     * При выборе расстояния следует учитывать размеры пространства под иконки сортировки и меню, если они есть
     * в функционале заголовка.
     */
    spacingBetweenItems?: string;
    /** Колбек на изменение сортировки. Возвращает уникальное имя столбца, к которому применили сортировку,
     * и порядок сортировки (возрастающий/убывающий или сброс сортировки до первоначального состояния (initial))
     */
    onSortChange?: (sortObj: {
        name: string;
        sort: 'asc' | 'desc' | 'initial';
    }) => void;
    /** Колбек, который срабатывает при изменении ширины столбца.
     * Колбек не срабатывает, когда пользователь тянет ресайзер влево/вправо (onMouseMove).
     * Колбек срабатывает в момент, когда пользователь отпускает ресайзер (onMouseUp) и столбец принимает окончательную ширину.
     */
    onColumnResize?: (colObj: {
        name: string;
        width: string;
    }) => void;
    /** Рендер функция для отрисовки контента ячейки. Входные параметры - объект строки и название столбца */
    renderCell?: (row: TableRow, columnName: string) => React.ReactNode;
    /** Параметр, определяющий максимальное количество строк, которое может занимать заголовок столбца таблицы.
     * По умолчанию заголовок занимает не более одной строки
     */
    headerLineClamp?: number;
    /** Параметр, определяющий максимальное количество строк, которое может занимать дополнительный текст заголовка столбца таблицы.
     * По умолчанию дополнительный текст занимает не более одной строки
     */
    headerExtraLineClamp?: number;
    /** Отображение разделителя для последней колонки. По умолчанию разделитель не отображается */
    showDividerForLastColumn?: boolean;
    /** Отключение возможности ресайза колонок. По умолчанию эта возможность включена */
    disableColumnResize?: boolean;
    /** Отображение серой линии подчеркивания для последней строки. По умолчанию линия отображается */
    showLastRowUnderline?: boolean;
    /** Включение виртуального скролла для тела таблицы.
     * У таблицы обязательно должна быть задана высота, тогда тело таблицы растянется по высоте и подстроится под высоту таблицы.
     */
    virtualScroll?: {
        /** Фиксированная высота строки, для правильного функционирования виртуального скролла
         * все строки должны быть одной фиксированной высоты
         */
        fixedRowHeight: number;
    };
}
export declare const Table: React.FC<TableProps>;
export {};
//# sourceMappingURL=index.d.ts.map