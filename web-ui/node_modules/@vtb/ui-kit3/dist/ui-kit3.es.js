import * as React from "react";
import React__default, { useState, useEffect, useRef, useCallback, Fragment, Children, isValidElement, cloneElement, useLayoutEffect, useContext } from "react";
import styled, { css, keyframes, ThemeContext, ThemeProvider } from "styled-components";
import { ReactComponent } from "@openvtb/admiral-icons/build/system/ChevronDownOutline.svg";
import { ReactComponent as ReactComponent$1 } from "@openvtb/admiral-icons/build/system/ChevronLeftOutline.svg";
import { ReactComponent as ReactComponent$2 } from "@openvtb/admiral-icons/build/system/ChevronRightOutline.svg";
import ReactDOM, { createPortal } from "react-dom";
import { ReactComponent as ReactComponent$7 } from "@openvtb/admiral-icons/build/service/CloseOutline.svg";
import { ReactComponent as ReactComponent$5 } from "@openvtb/admiral-icons/build/service/EyeCloseOutline.svg";
import { ReactComponent as ReactComponent$6 } from "@openvtb/admiral-icons/build/service/EyeOutline.svg";
import { ReactComponent as ReactComponent$3 } from "@openvtb/admiral-icons/build/service/ErrorSolid.svg";
import { ReactComponent as ReactComponent$4 } from "@openvtb/admiral-icons/build/service/CheckSolid.svg";
import { ReactComponent as ReactComponent$8 } from "@openvtb/admiral-icons/build/system/CalendarSolid.svg";
import { ReactComponent as ReactComponent$9 } from "@openvtb/admiral-icons/build/system/SearchOutline.svg";
import { ReactComponent as ReactComponent$a } from "@openvtb/admiral-icons/build/system/TimeSolid.svg";
import { ReactComponent as ReactComponent$b } from "@openvtb/admiral-icons/build/service/MinusOutline.svg";
import { ReactComponent as ReactComponent$c } from "@openvtb/admiral-icons/build/service/PlusOutline.svg";
import { ReactComponent as ReactComponent$d } from "@openvtb/admiral-icons/build/documents/DocsSolid.svg";
import { ReactComponent as ReactComponent$h } from "@openvtb/admiral-icons/build/documents/FilePDFSolid.svg";
import { ReactComponent as ReactComponent$g } from "@openvtb/admiral-icons/build/documents/FilePPTSolid.svg";
import { ReactComponent as ReactComponent$e } from "@openvtb/admiral-icons/build/documents/FileWordSolid.svg";
import { ReactComponent as ReactComponent$f } from "@openvtb/admiral-icons/build/documents/FileXLSSolid.svg";
import { ReactComponent as ReactComponent$i } from "@openvtb/admiral-icons/build/documents/JpgSolid.svg";
import { ReactComponent as ReactComponent$j } from "@openvtb/admiral-icons/build/system/AttachFileOutline.svg";
import { ReactComponent as ReactComponent$k } from "@openvtb/admiral-icons/build/system/EditSolid.svg";
import { ReactComponent as ReactComponent$l } from "@openvtb/admiral-icons/build/service/CheckClearOutline.svg";
import metadata from "@openvtb/admiral-icons/metadata.json";
import { ReactComponent as ReactComponent$m } from "@openvtb/admiral-icons/build/flags/Afghanistan.svg";
import { ReactComponent as ReactComponent$n } from "@openvtb/admiral-icons/build/flags/AlandIslands.svg";
import { ReactComponent as ReactComponent$o } from "@openvtb/admiral-icons/build/flags/Albania.svg";
import { ReactComponent as ReactComponent$p } from "@openvtb/admiral-icons/build/flags/Algeria.svg";
import { ReactComponent as ReactComponent$q } from "@openvtb/admiral-icons/build/flags/Andorra.svg";
import { ReactComponent as ReactComponent$r } from "@openvtb/admiral-icons/build/flags/Angola.svg";
import { ReactComponent as ReactComponent$s } from "@openvtb/admiral-icons/build/flags/Anguilla.svg";
import { ReactComponent as ReactComponent$t } from "@openvtb/admiral-icons/build/flags/AntiguaAndBarbuda.svg";
import { ReactComponent as ReactComponent$u } from "@openvtb/admiral-icons/build/flags/ArabEmirates.svg";
import { ReactComponent as ReactComponent$v } from "@openvtb/admiral-icons/build/flags/Argentina.svg";
import { ReactComponent as ReactComponent$w } from "@openvtb/admiral-icons/build/flags/Armenia.svg";
import { ReactComponent as ReactComponent$x } from "@openvtb/admiral-icons/build/flags/Aruba.svg";
import { ReactComponent as ReactComponent$y } from "@openvtb/admiral-icons/build/flags/Australia.svg";
import { ReactComponent as ReactComponent$z } from "@openvtb/admiral-icons/build/flags/Austria.svg";
import { ReactComponent as ReactComponent$A } from "@openvtb/admiral-icons/build/flags/Azerbaijan.svg";
import { ReactComponent as ReactComponent$B } from "@openvtb/admiral-icons/build/flags/Bahamas.svg";
import { ReactComponent as ReactComponent$C } from "@openvtb/admiral-icons/build/flags/Bahrain.svg";
import { ReactComponent as ReactComponent$D } from "@openvtb/admiral-icons/build/flags/Bangladesh.svg";
import { ReactComponent as ReactComponent$E } from "@openvtb/admiral-icons/build/flags/Barbados.svg";
import { ReactComponent as ReactComponent$F } from "@openvtb/admiral-icons/build/flags/Belarus.svg";
import { ReactComponent as ReactComponent$G } from "@openvtb/admiral-icons/build/flags/Belgium.svg";
import { ReactComponent as ReactComponent$H } from "@openvtb/admiral-icons/build/flags/Belize.svg";
import { ReactComponent as ReactComponent$I } from "@openvtb/admiral-icons/build/flags/Benin.svg";
import { ReactComponent as ReactComponent$J } from "@openvtb/admiral-icons/build/flags/Bermuda.svg";
import { ReactComponent as ReactComponent$K } from "@openvtb/admiral-icons/build/flags/Bhutan.svg";
import { ReactComponent as ReactComponent$L } from "@openvtb/admiral-icons/build/flags/Bolivia.svg";
import { ReactComponent as ReactComponent$M } from "@openvtb/admiral-icons/build/flags/BosniaAndHerzegovina.svg";
import { ReactComponent as ReactComponent$N } from "@openvtb/admiral-icons/build/flags/Botswana.svg";
import { ReactComponent as ReactComponent$O } from "@openvtb/admiral-icons/build/flags/Brazil.svg";
import { ReactComponent as ReactComponent$P } from "@openvtb/admiral-icons/build/flags/BritishVirginIslands.svg";
import { ReactComponent as ReactComponent$Q } from "@openvtb/admiral-icons/build/flags/Brunei.svg";
import { ReactComponent as ReactComponent$R } from "@openvtb/admiral-icons/build/flags/Bulgaria.svg";
import { ReactComponent as ReactComponent$S } from "@openvtb/admiral-icons/build/flags/BurkinaFaso.svg";
import { ReactComponent as ReactComponent$T } from "@openvtb/admiral-icons/build/flags/Burundi.svg";
import { ReactComponent as ReactComponent$U } from "@openvtb/admiral-icons/build/flags/CAF.svg";
import { ReactComponent as ReactComponent$V } from "@openvtb/admiral-icons/build/flags/CAS.svg";
import { ReactComponent as ReactComponent$W } from "@openvtb/admiral-icons/build/flags/CEU.svg";
import { ReactComponent as ReactComponent$X } from "@openvtb/admiral-icons/build/flags/CNA.svg";
import { ReactComponent as ReactComponent$Y } from "@openvtb/admiral-icons/build/flags/COC.svg";
import { ReactComponent as ReactComponent$Z } from "@openvtb/admiral-icons/build/flags/CSA.svg";
import { ReactComponent as ReactComponent$_ } from "@openvtb/admiral-icons/build/flags/CaboVerde.svg";
import { ReactComponent as ReactComponent$$ } from "@openvtb/admiral-icons/build/flags/Cambodia.svg";
import { ReactComponent as ReactComponent$10 } from "@openvtb/admiral-icons/build/flags/Cameroon.svg";
import { ReactComponent as ReactComponent$11 } from "@openvtb/admiral-icons/build/flags/Canada.svg";
import { ReactComponent as ReactComponent$12 } from "@openvtb/admiral-icons/build/flags/CaymanIslands.svg";
import { ReactComponent as ReactComponent$13 } from "@openvtb/admiral-icons/build/flags/CentralAfricanRepublic.svg";
import { ReactComponent as ReactComponent$14 } from "@openvtb/admiral-icons/build/flags/Chad.svg";
import { ReactComponent as ReactComponent$15 } from "@openvtb/admiral-icons/build/flags/Chile.svg";
import { ReactComponent as ReactComponent$16 } from "@openvtb/admiral-icons/build/flags/China.svg";
import { ReactComponent as ReactComponent$17 } from "@openvtb/admiral-icons/build/flags/Colombia.svg";
import { ReactComponent as ReactComponent$18 } from "@openvtb/admiral-icons/build/flags/Comoros.svg";
import { ReactComponent as ReactComponent$19 } from "@openvtb/admiral-icons/build/flags/CongoDemocraticRepublic.svg";
import { ReactComponent as ReactComponent$1a } from "@openvtb/admiral-icons/build/flags/CongoRepublic.svg";
import { ReactComponent as ReactComponent$1b } from "@openvtb/admiral-icons/build/flags/CostaRica.svg";
import { ReactComponent as ReactComponent$1c } from "@openvtb/admiral-icons/build/flags/CoteDIvoire.svg";
import { ReactComponent as ReactComponent$1d } from "@openvtb/admiral-icons/build/flags/Croatia.svg";
import { ReactComponent as ReactComponent$1e } from "@openvtb/admiral-icons/build/flags/Cuba.svg";
import { ReactComponent as ReactComponent$1f } from "@openvtb/admiral-icons/build/flags/Cyprus.svg";
import { ReactComponent as ReactComponent$1g } from "@openvtb/admiral-icons/build/flags/Czechia.svg";
import { ReactComponent as ReactComponent$1h } from "@openvtb/admiral-icons/build/flags/Denmark.svg";
import { ReactComponent as ReactComponent$1i } from "@openvtb/admiral-icons/build/flags/Djibouti.svg";
import { ReactComponent as ReactComponent$1j } from "@openvtb/admiral-icons/build/flags/Dominica.svg";
import { ReactComponent as ReactComponent$1k } from "@openvtb/admiral-icons/build/flags/DominicanRepublic.svg";
import { ReactComponent as ReactComponent$1l } from "@openvtb/admiral-icons/build/flags/Ecuador.svg";
import { ReactComponent as ReactComponent$1m } from "@openvtb/admiral-icons/build/flags/Egypt.svg";
import { ReactComponent as ReactComponent$1n } from "@openvtb/admiral-icons/build/flags/ElSalvador.svg";
import { ReactComponent as ReactComponent$1o } from "@openvtb/admiral-icons/build/flags/EquatorialGuinea.svg";
import { ReactComponent as ReactComponent$1p } from "@openvtb/admiral-icons/build/flags/Eritrea.svg";
import { ReactComponent as ReactComponent$1q } from "@openvtb/admiral-icons/build/flags/Estonia.svg";
import { ReactComponent as ReactComponent$1r } from "@openvtb/admiral-icons/build/flags/Ethiopia.svg";
import { ReactComponent as ReactComponent$1s } from "@openvtb/admiral-icons/build/flags/EuropeanUnion.svg";
import { ReactComponent as ReactComponent$1t } from "@openvtb/admiral-icons/build/flags/FalklandIslands.svg";
import { ReactComponent as ReactComponent$1u } from "@openvtb/admiral-icons/build/flags/Fiji.svg";
import { ReactComponent as ReactComponent$1v } from "@openvtb/admiral-icons/build/flags/Finland.svg";
import { ReactComponent as ReactComponent$1w } from "@openvtb/admiral-icons/build/flags/France.svg";
import { ReactComponent as ReactComponent$1x } from "@openvtb/admiral-icons/build/flags/Gabon.svg";
import { ReactComponent as ReactComponent$1y } from "@openvtb/admiral-icons/build/flags/Gambia.svg";
import { ReactComponent as ReactComponent$1z } from "@openvtb/admiral-icons/build/flags/Georgia.svg";
import { ReactComponent as ReactComponent$1A } from "@openvtb/admiral-icons/build/flags/Germany.svg";
import { ReactComponent as ReactComponent$1B } from "@openvtb/admiral-icons/build/flags/Ghana.svg";
import { ReactComponent as ReactComponent$1C } from "@openvtb/admiral-icons/build/flags/Gibraltar.svg";
import { ReactComponent as ReactComponent$1D } from "@openvtb/admiral-icons/build/flags/GreatBritain.svg";
import { ReactComponent as ReactComponent$1E } from "@openvtb/admiral-icons/build/flags/Greece.svg";
import { ReactComponent as ReactComponent$1F } from "@openvtb/admiral-icons/build/flags/Grenada.svg";
import { ReactComponent as ReactComponent$1G } from "@openvtb/admiral-icons/build/flags/Guatemala.svg";
import { ReactComponent as ReactComponent$1H } from "@openvtb/admiral-icons/build/flags/Guernsey.svg";
import { ReactComponent as ReactComponent$1I } from "@openvtb/admiral-icons/build/flags/Guinea.svg";
import { ReactComponent as ReactComponent$1J } from "@openvtb/admiral-icons/build/flags/GuineaBissau.svg";
import { ReactComponent as ReactComponent$1K } from "@openvtb/admiral-icons/build/flags/Guyana.svg";
import { ReactComponent as ReactComponent$1L } from "@openvtb/admiral-icons/build/flags/Haiti.svg";
import { ReactComponent as ReactComponent$1M } from "@openvtb/admiral-icons/build/flags/Honduras.svg";
import { ReactComponent as ReactComponent$1N } from "@openvtb/admiral-icons/build/flags/HongKong.svg";
import { ReactComponent as ReactComponent$1O } from "@openvtb/admiral-icons/build/flags/Hungary.svg";
import { ReactComponent as ReactComponent$1P } from "@openvtb/admiral-icons/build/flags/Iceland.svg";
import { ReactComponent as ReactComponent$1Q } from "@openvtb/admiral-icons/build/flags/India.svg";
import { ReactComponent as ReactComponent$1R } from "@openvtb/admiral-icons/build/flags/Indonesia.svg";
import { ReactComponent as ReactComponent$1S } from "@openvtb/admiral-icons/build/flags/Iran.svg";
import { ReactComponent as ReactComponent$1T } from "@openvtb/admiral-icons/build/flags/Iraq.svg";
import { ReactComponent as ReactComponent$1U } from "@openvtb/admiral-icons/build/flags/Ireland.svg";
import { ReactComponent as ReactComponent$1V } from "@openvtb/admiral-icons/build/flags/IsleOfMan.svg";
import { ReactComponent as ReactComponent$1W } from "@openvtb/admiral-icons/build/flags/Israel.svg";
import { ReactComponent as ReactComponent$1X } from "@openvtb/admiral-icons/build/flags/Italy.svg";
import { ReactComponent as ReactComponent$1Y } from "@openvtb/admiral-icons/build/flags/Jamaica.svg";
import { ReactComponent as ReactComponent$1Z } from "@openvtb/admiral-icons/build/flags/Japan.svg";
import { ReactComponent as ReactComponent$1_ } from "@openvtb/admiral-icons/build/flags/Jersey.svg";
import { ReactComponent as ReactComponent$1$ } from "@openvtb/admiral-icons/build/flags/Jordan.svg";
import { ReactComponent as ReactComponent$20 } from "@openvtb/admiral-icons/build/flags/Kazakhstan.svg";
import { ReactComponent as ReactComponent$21 } from "@openvtb/admiral-icons/build/flags/Kenya.svg";
import { ReactComponent as ReactComponent$22 } from "@openvtb/admiral-icons/build/flags/KoreaNorth.svg";
import { ReactComponent as ReactComponent$23 } from "@openvtb/admiral-icons/build/flags/KoreaSouth.svg";
import { ReactComponent as ReactComponent$24 } from "@openvtb/admiral-icons/build/flags/Kuwait.svg";
import { ReactComponent as ReactComponent$25 } from "@openvtb/admiral-icons/build/flags/Kyrgyzstan.svg";
import { ReactComponent as ReactComponent$26 } from "@openvtb/admiral-icons/build/flags/Laos.svg";
import { ReactComponent as ReactComponent$27 } from "@openvtb/admiral-icons/build/flags/Latvia.svg";
import { ReactComponent as ReactComponent$28 } from "@openvtb/admiral-icons/build/flags/Lebanon.svg";
import { ReactComponent as ReactComponent$29 } from "@openvtb/admiral-icons/build/flags/Lesotho.svg";
import { ReactComponent as ReactComponent$2a } from "@openvtb/admiral-icons/build/flags/Liberia.svg";
import { ReactComponent as ReactComponent$2b } from "@openvtb/admiral-icons/build/flags/Libya.svg";
import { ReactComponent as ReactComponent$2c } from "@openvtb/admiral-icons/build/flags/Liechtenstein.svg";
import { ReactComponent as ReactComponent$2d } from "@openvtb/admiral-icons/build/flags/Lithuania.svg";
import { ReactComponent as ReactComponent$2e } from "@openvtb/admiral-icons/build/flags/Luxembourg.svg";
import { ReactComponent as ReactComponent$2f } from "@openvtb/admiral-icons/build/flags/Macao.svg";
import { ReactComponent as ReactComponent$2g } from "@openvtb/admiral-icons/build/flags/Macedonia.svg";
import { ReactComponent as ReactComponent$2h } from "@openvtb/admiral-icons/build/flags/Madagascar.svg";
import { ReactComponent as ReactComponent$2i } from "@openvtb/admiral-icons/build/flags/Malawi.svg";
import { ReactComponent as ReactComponent$2j } from "@openvtb/admiral-icons/build/flags/Malaysia.svg";
import { ReactComponent as ReactComponent$2k } from "@openvtb/admiral-icons/build/flags/Maldives.svg";
import { ReactComponent as ReactComponent$2l } from "@openvtb/admiral-icons/build/flags/Mali.svg";
import { ReactComponent as ReactComponent$2m } from "@openvtb/admiral-icons/build/flags/Malta.svg";
import { ReactComponent as ReactComponent$2n } from "@openvtb/admiral-icons/build/flags/Mauritania.svg";
import { ReactComponent as ReactComponent$2o } from "@openvtb/admiral-icons/build/flags/Mauritius.svg";
import { ReactComponent as ReactComponent$2p } from "@openvtb/admiral-icons/build/flags/Mexico.svg";
import { ReactComponent as ReactComponent$2q } from "@openvtb/admiral-icons/build/flags/Micronesia.svg";
import { ReactComponent as ReactComponent$2r } from "@openvtb/admiral-icons/build/flags/Moldova.svg";
import { ReactComponent as ReactComponent$2s } from "@openvtb/admiral-icons/build/flags/Monaco.svg";
import { ReactComponent as ReactComponent$2t } from "@openvtb/admiral-icons/build/flags/Mongolia.svg";
import { ReactComponent as ReactComponent$2u } from "@openvtb/admiral-icons/build/flags/Montenegro.svg";
import { ReactComponent as ReactComponent$2v } from "@openvtb/admiral-icons/build/flags/Montserrat.svg";
import { ReactComponent as ReactComponent$2w } from "@openvtb/admiral-icons/build/flags/Morocco.svg";
import { ReactComponent as ReactComponent$2x } from "@openvtb/admiral-icons/build/flags/Mozambique.svg";
import { ReactComponent as ReactComponent$2y } from "@openvtb/admiral-icons/build/flags/Myanmar.svg";
import { ReactComponent as ReactComponent$2z } from "@openvtb/admiral-icons/build/flags/Namibia.svg";
import { ReactComponent as ReactComponent$2A } from "@openvtb/admiral-icons/build/flags/Nepal.svg";
import { ReactComponent as ReactComponent$2B } from "@openvtb/admiral-icons/build/flags/Netherlands.svg";
import { ReactComponent as ReactComponent$2C } from "@openvtb/admiral-icons/build/flags/NetherlandsAntillesCountry.svg";
import { ReactComponent as ReactComponent$2D } from "@openvtb/admiral-icons/build/flags/NewZealand.svg";
import { ReactComponent as ReactComponent$2E } from "@openvtb/admiral-icons/build/flags/Nicaragua.svg";
import { ReactComponent as ReactComponent$2F } from "@openvtb/admiral-icons/build/flags/Niger.svg";
import { ReactComponent as ReactComponent$2G } from "@openvtb/admiral-icons/build/flags/Nigeria.svg";
import { ReactComponent as ReactComponent$2H } from "@openvtb/admiral-icons/build/flags/Norway.svg";
import { ReactComponent as ReactComponent$2I } from "@openvtb/admiral-icons/build/flags/Oman.svg";
import { ReactComponent as ReactComponent$2J } from "@openvtb/admiral-icons/build/flags/Pakistan.svg";
import { ReactComponent as ReactComponent$2K } from "@openvtb/admiral-icons/build/flags/Palau.svg";
import { ReactComponent as ReactComponent$2L } from "@openvtb/admiral-icons/build/flags/Panama.svg";
import { ReactComponent as ReactComponent$2M } from "@openvtb/admiral-icons/build/flags/PapuaNewGuinea.svg";
import { ReactComponent as ReactComponent$2N } from "@openvtb/admiral-icons/build/flags/Paraguay.svg";
import { ReactComponent as ReactComponent$2O } from "@openvtb/admiral-icons/build/flags/Peru.svg";
import { ReactComponent as ReactComponent$2P } from "@openvtb/admiral-icons/build/flags/Philippines.svg";
import { ReactComponent as ReactComponent$2Q } from "@openvtb/admiral-icons/build/flags/Poland.svg";
import { ReactComponent as ReactComponent$2R } from "@openvtb/admiral-icons/build/flags/PolynesiaFrench.svg";
import { ReactComponent as ReactComponent$2S } from "@openvtb/admiral-icons/build/flags/Portugal.svg";
import { ReactComponent as ReactComponent$2T } from "@openvtb/admiral-icons/build/flags/PuertoRico.svg";
import { ReactComponent as ReactComponent$2U } from "@openvtb/admiral-icons/build/flags/Qatar.svg";
import { ReactComponent as ReactComponent$2V } from "@openvtb/admiral-icons/build/flags/Romania.svg";
import { ReactComponent as ReactComponent$2W } from "@openvtb/admiral-icons/build/flags/Russia.svg";
import { ReactComponent as ReactComponent$2X } from "@openvtb/admiral-icons/build/flags/Rwanda.svg";
import { ReactComponent as ReactComponent$2Y } from "@openvtb/admiral-icons/build/flags/SaintHelena.svg";
import { ReactComponent as ReactComponent$2Z } from "@openvtb/admiral-icons/build/flags/SaintKittsAndNevis.svg";
import { ReactComponent as ReactComponent$2_ } from "@openvtb/admiral-icons/build/flags/SaintLucia.svg";
import { ReactComponent as ReactComponent$2$ } from "@openvtb/admiral-icons/build/flags/SaintVincentAndTheGrenadines.svg";
import { ReactComponent as ReactComponent$30 } from "@openvtb/admiral-icons/build/flags/Samoa.svg";
import { ReactComponent as ReactComponent$31 } from "@openvtb/admiral-icons/build/flags/SanMarino.svg";
import { ReactComponent as ReactComponent$32 } from "@openvtb/admiral-icons/build/flags/SaoTomeAndPrincipe.svg";
import { ReactComponent as ReactComponent$33 } from "@openvtb/admiral-icons/build/flags/SaudiArabia.svg";
import { ReactComponent as ReactComponent$34 } from "@openvtb/admiral-icons/build/flags/Senegal.svg";
import { ReactComponent as ReactComponent$35 } from "@openvtb/admiral-icons/build/flags/Serbia.svg";
import { ReactComponent as ReactComponent$36 } from "@openvtb/admiral-icons/build/flags/Seychelles.svg";
import { ReactComponent as ReactComponent$37 } from "@openvtb/admiral-icons/build/flags/SierraLeone.svg";
import { ReactComponent as ReactComponent$38 } from "@openvtb/admiral-icons/build/flags/Singapore.svg";
import { ReactComponent as ReactComponent$39 } from "@openvtb/admiral-icons/build/flags/Slovakia.svg";
import { ReactComponent as ReactComponent$3a } from "@openvtb/admiral-icons/build/flags/Slovenia.svg";
import { ReactComponent as ReactComponent$3b } from "@openvtb/admiral-icons/build/flags/SolomonIslands.svg";
import { ReactComponent as ReactComponent$3c } from "@openvtb/admiral-icons/build/flags/Somalia.svg";
import { ReactComponent as ReactComponent$3d } from "@openvtb/admiral-icons/build/flags/SouthAfrica.svg";
import { ReactComponent as ReactComponent$3e } from "@openvtb/admiral-icons/build/flags/Spain.svg";
import { ReactComponent as ReactComponent$3f } from "@openvtb/admiral-icons/build/flags/SriLanka.svg";
import { ReactComponent as ReactComponent$3g } from "@openvtb/admiral-icons/build/flags/Sudan.svg";
import { ReactComponent as ReactComponent$3h } from "@openvtb/admiral-icons/build/flags/Suriname.svg";
import { ReactComponent as ReactComponent$3i } from "@openvtb/admiral-icons/build/flags/Swaziland.svg";
import { ReactComponent as ReactComponent$3j } from "@openvtb/admiral-icons/build/flags/Sweden.svg";
import { ReactComponent as ReactComponent$3k } from "@openvtb/admiral-icons/build/flags/Switzerland.svg";
import { ReactComponent as ReactComponent$3l } from "@openvtb/admiral-icons/build/flags/Syria.svg";
import { ReactComponent as ReactComponent$3m } from "@openvtb/admiral-icons/build/flags/Taiwan.svg";
import { ReactComponent as ReactComponent$3n } from "@openvtb/admiral-icons/build/flags/Tajikistan.svg";
import { ReactComponent as ReactComponent$3o } from "@openvtb/admiral-icons/build/flags/Tanzania.svg";
import { ReactComponent as ReactComponent$3p } from "@openvtb/admiral-icons/build/flags/Thailand.svg";
import { ReactComponent as ReactComponent$3q } from "@openvtb/admiral-icons/build/flags/TimorLeste.svg";
import { ReactComponent as ReactComponent$3r } from "@openvtb/admiral-icons/build/flags/Togo.svg";
import { ReactComponent as ReactComponent$3s } from "@openvtb/admiral-icons/build/flags/Tonga.svg";
import { ReactComponent as ReactComponent$3t } from "@openvtb/admiral-icons/build/flags/TrinidadAndTobago.svg";
import { ReactComponent as ReactComponent$3u } from "@openvtb/admiral-icons/build/flags/Tunisia.svg";
import { ReactComponent as ReactComponent$3v } from "@openvtb/admiral-icons/build/flags/Turkey.svg";
import { ReactComponent as ReactComponent$3w } from "@openvtb/admiral-icons/build/flags/Turkmenistan.svg";
import { ReactComponent as ReactComponent$3x } from "@openvtb/admiral-icons/build/flags/TurksAndCaicosIslands.svg";
import { ReactComponent as ReactComponent$3y } from "@openvtb/admiral-icons/build/flags/Uganda.svg";
import { ReactComponent as ReactComponent$3z } from "@openvtb/admiral-icons/build/flags/Ukraine.svg";
import { ReactComponent as ReactComponent$3A } from "@openvtb/admiral-icons/build/flags/UnitedStatesOfAmerica.svg";
import { ReactComponent as ReactComponent$3B } from "@openvtb/admiral-icons/build/flags/Uruguay.svg";
import { ReactComponent as ReactComponent$3C } from "@openvtb/admiral-icons/build/flags/Uzbekistan.svg";
import { ReactComponent as ReactComponent$3D } from "@openvtb/admiral-icons/build/flags/Vanuatu.svg";
import { ReactComponent as ReactComponent$3E } from "@openvtb/admiral-icons/build/flags/Venezuela.svg";
import { ReactComponent as ReactComponent$3F } from "@openvtb/admiral-icons/build/flags/Vietnam.svg";
import { ReactComponent as ReactComponent$3G } from "@openvtb/admiral-icons/build/flags/WW.svg";
import { ReactComponent as ReactComponent$3H } from "@openvtb/admiral-icons/build/flags/Yemen.svg";
import { ReactComponent as ReactComponent$3I } from "@openvtb/admiral-icons/build/flags/Zambia.svg";
import { ReactComponent as ReactComponent$3J } from "@openvtb/admiral-icons/build/flags/Zimbabwe.svg";
import { ReactComponent as ReactComponent$3K } from "@openvtb/admiral-icons/build/system/MoreHorizontalOutline.svg";
import { ReactComponent as ReactComponent$3M } from "@openvtb/admiral-icons/build/service/InfoSolid.svg";
import { ReactComponent as ReactComponent$3L } from "@openvtb/admiral-icons/build/service/CloseSolid.svg";
import { ReactComponent as ReactComponent$3N } from "@openvtb/admiral-icons/build/system/ArrowUpOutline.svg";
import VTBGroupUI_Medium_eot from "@openvtb/fonts/VTBGroupUI-Medium/VTBGroupUI-Medium.eot";
import VTBGroupUI_Medium_woff2 from "@openvtb/fonts/VTBGroupUI-Medium/VTBGroupUI-Medium.woff2";
import VTBGroupUI_Medium_woff from "@openvtb/fonts/VTBGroupUI-Medium/VTBGroupUI-Medium.woff";
import VTBGroupUI_Medium_ttf from "@openvtb/fonts/VTBGroupUI-Medium/VTBGroupUI-Medium.ttf";
import VTBGroupUI_Medium_svg from "@openvtb/fonts/VTBGroupUI-Medium/VTBGroupUI-Medium.svg";
import VTBGroupUI_Regular_eot from "@openvtb/fonts/VTBGroupUI-Regular/VTBGroupUI-Regular.eot";
import VTBGroupUI_Regular_woff2 from "@openvtb/fonts/VTBGroupUI-Regular/VTBGroupUI-Regular.woff2";
import VTBGroupUI_Regular_woff from "@openvtb/fonts/VTBGroupUI-Regular/VTBGroupUI-Regular.woff";
import VTBGroupUI_Regular_ttf from "@openvtb/fonts/VTBGroupUI-Regular/VTBGroupUI-Regular.ttf";
import VTBGroupUI_Regular_svg from "@openvtb/fonts/VTBGroupUI-Regular/VTBGroupUI-Regular.svg";
const BASIC$1 = {
  primary: "#0D69F2",
  secondary: "#2B313B",
  tertiary: "#8A96A8",
  hover: "#0A54C2",
  press: "#0949AA",
  disable: "#C4CAD4",
  primaryLight: "#6EA5F7"
};
const BACKGROUND$1 = {
  primary: "#FFFFFF",
  secondary: "#F1F2F4",
  tertiary: "#E2E5E9",
  tertiaryHover: "#D3D8DE",
  card: "#FFFFFF",
  cardHover: "#FFFFFF",
  inversion: "#2B313B",
  shadow: "#8A96A8",
  header: "#0949AA",
  surfaceDanger: "#FEF0F1",
  surfaceWarn: "#FFF7F0",
  surfaceSuccess: "#F2FCF5",
  page: "#F1F2F4"
};
const TEXT$1 = {
  primary: "#2B313B",
  secondary: "#626F84",
  tertiary: "#A7B0BE",
  inversion: "#FFFFFF",
  staticWhite: "#FFFFFF",
  staticBlack: "#2B313B"
};
const STATUS$1 = {
  warn: "#FF8C19",
  hoverWarn: "#E57300",
  pressWarn: "#CC6600",
  success: "#2ABB5B",
  hoverSuccess: "#219246",
  pressSuccess: "#1C7D3C",
  danger: "#DA0B20",
  hoverDanger: "#A90919",
  pressDanger: "#910815"
};
const SPECIAL$1 = {
  blueLight: "#0ABBFB",
  lightBlue: "#0ABBFB",
  blue: "#3F7DFE",
  blueDeep: "#3E51B5",
  greenLight: "#C0D20F",
  green: "#5ECF70",
  greenDeep: "#44BF78",
  tiffany: "#5BD8D1",
  tiffanyDeep: "#24A79F",
  tiffanyDark: "#147F94",
  tiffanyBlue: "#00BCD4",
  yellow: "#F0DE37",
  orangeLight: "#FFAF37",
  orange: "#FF8515",
  orangeDeep: "#FF5A32",
  violetLight: "#ED6CCD",
  violet: "#C368DA",
  violetDeep: "#9A64F7",
  fuchsia: "#F86D86",
  fuchsiaDeep: "#D9477C",
  rainySky: "#62676F",
  night: "#2B313B",
  gray: "#98ABCD",
  softBlue: "#E0F2FF",
  softNiceBlue: "#E0E9FF",
  softSkyBlue: "#E2F4FE",
  softTiffany: "#DBF8FF",
  softGreen: "#D8F5E8",
  softYellow: "#FFF1D4",
  softPapaya: "#F9EECF",
  softRed: "#FFEBED",
  softPink: "#FFEBF8",
  softPurple: "#EDF1FF",
  softMallowPurple: "#E8E6FF",
  softGray: "#F1F2F4",
  softLightBlue: "#E6F8FF",
  turquoise: "#4AD2CA",
  softTurquoise: "#EAFAF9",
  red: "#FF525C",
  magenta: "#E052BD",
  softMagenta: "#FBE9F7",
  purple: "#BF67C7",
  softViolet: "#F0E7FD",
  blueDark: "#001157"
};
const SPECIAL_INVERT$1 = {
  blueLight: "#0ABBFB",
  blue: "#3F7DFE",
  blueDeep: "#3E51B5",
  greenLight: "#C0D20F",
  green: "#5ECF70",
  greenDeep: "#44BF78",
  tiffany: "#5BD8D1",
  tiffanyDeep: "#24A79F",
  tiffanyDark: "#147F94",
  tiffanyBlue: "#00BCD4",
  yellow: "#F0DE37",
  orangeLight: "#FFAF37",
  orange: "#FF8515",
  orangeDeep: "#FF5A32",
  violetLight: "#ED6CCD",
  violet: "#C368DA",
  violetDeep: "#9A64F7",
  fuchsia: "#F86D86",
  fuchsiaDeep: "#D9477C",
  rainySky: "#62676F",
  gray: "#98ABCD",
  blueDark: "#001157",
  softBlue: "#E0F2FF",
  softNiceBlue: "#E0E9FF",
  softSkyBlue: "#E2F4FE",
  softTiffany: "#DBF8FF",
  softGreen: "#D8F5E8",
  softYellow: "#FFF1D4",
  softPapaya: "#F9EECF",
  softRed: "#FFEBED",
  softPink: "#FFEBF8",
  softPurple: "#EDF1FF",
  softMallowPurple: "#E8E6FF",
  softGray: "#F1F2F4"
};
const COLOR$1 = {
  basic: BASIC$1,
  background: BACKGROUND$1,
  text: TEXT$1,
  status: STATUS$1,
  special: SPECIAL$1,
  specialInvert: SPECIAL_INVERT$1
};
const shadow$1 = {
  ClickableActive: `
  box-shadow: 0 2px 4px rgba(138, 150, 168, 0.4), 0px -2px 2px rgba(138, 150, 168, 0.08);
`,
  ClickableDefault: `
  box-shadow: 0 4px 8px rgba(138, 150, 168, 0.4), 0px -2px 4px rgba(138, 150, 168, 0.08);
`,
  ClickableHover: `
  box-shadow: 0 8px 16px rgba(138, 150, 168, 0.4), 0px -2px 8px rgba(138, 150, 168, 0.08);
`,
  NonClickable: `
  box-shadow: 0 4px 16px rgba(138, 150, 168, 0.4), 0 0 6px rgba(138, 150, 168, 0.08);
`
};
const Z_INDEX_BASE_NUMBER = 100;
const zIndex = {
  spinner: Z_INDEX_BASE_NUMBER,
  tooltip: Z_INDEX_BASE_NUMBER,
  notification: Z_INDEX_BASE_NUMBER - 1,
  hint: Z_INDEX_BASE_NUMBER - 2,
  dropdown: Z_INDEX_BASE_NUMBER - 3,
  modal: Z_INDEX_BASE_NUMBER - 4
};
const LIGHT_THEME = {
  color: COLOR$1,
  shadow: shadow$1,
  zIndex,
  name: "light"
};
const BASIC = {
  primary: "#4789EB",
  secondary: "#E2E5E9",
  tertiary: "#576375",
  hover: "#1A6BE5",
  press: "#1760CF",
  disable: "#414A58",
  primaryLight: "#75A6F0"
};
const BACKGROUND = {
  primary: "#1A1E23",
  secondary: "#252A32",
  tertiary: "#2B313B",
  tertiaryHover: "#323943",
  card: "#21252C",
  cardHover: "#2B313B",
  inversion: "#E2E5E9",
  shadow: "#000000",
  header: "#2B313B",
  surfaceDanger: "#252A32",
  surfaceWarn: "#252A32",
  surfaceSuccess: "#252A32",
  page: "#0D0F12"
};
const TEXT = {
  primary: "#E2E5E9",
  secondary: "#8A96A8",
  tertiary: "#4C5767",
  inversion: "#1A1E23",
  staticWhite: "#FFFFFF",
  staticBlack: "#2B313B"
};
const STATUS = {
  warn: "#FF9F19",
  hoverWarn: "#E58600",
  pressWarn: "#CC7700",
  success: "#4AB56E",
  hoverSuccess: "#339956",
  pressSuccess: "#2D864B",
  danger: "#E15664",
  hoverDanger: "#CC3342",
  pressDanger: "#B82E3C"
};
const SPECIAL = {
  blueLight: "#0ABBFB",
  lightBlue: "#0ABBFB",
  blue: "#3F7DFE",
  blueDeep: "#3E51B5",
  greenLight: "#C0D20F",
  green: "#5ECF70",
  greenDeep: "#44BF78",
  tiffany: "#5BD8D1",
  tiffanyDeep: "#24A79F",
  tiffanyDark: "#147F94",
  tiffanyBlue: "#00BCD4",
  yellow: "#F0DE37",
  orangeLight: "#FFAF37",
  orange: "#FF8515",
  orangeDeep: "#FF5A32",
  violetLight: "#ED6CCD",
  violet: "#C368DA",
  violetDeep: "#9A64F7",
  fuchsia: "#F86D86",
  fuchsiaDeep: "#D9477C",
  rainySky: "#62676F",
  night: "#2B313B",
  gray: "#98ABCD",
  softBlue: "#E0F2FF",
  softNiceBlue: "#E0E9FF",
  softSkyBlue: "#E2F4FE",
  softTiffany: "#DBF8FF",
  softGreen: "#D8F5E8",
  softYellow: "#FFF1D4",
  softPapaya: "#F9EECF",
  softRed: "#FFEBED",
  softPink: "#FFEBF8",
  softPurple: "#EDF1FF",
  softMallowPurple: "#E8E6FF",
  softGray: "#F1F2F4",
  softLightBlue: "#2B313B",
  turquoise: "#4AD2CA",
  softTurquoise: "#2B313B",
  red: "#FF525C",
  magenta: "#E052BD",
  softMagenta: "#2B313B",
  purple: "#BF67C7",
  softViolet: "#2B313B",
  blueDark: "#252A32"
};
const SPECIAL_INVERT = {
  blueLight: "#2B313B",
  blue: "#2B313B",
  blueDeep: "#2B313B",
  greenLight: "#2B313B",
  green: "#2B313B",
  greenDeep: "#2B313B",
  tiffany: "#2B313B",
  tiffanyDeep: "#2B313B",
  tiffanyDark: "#2B313B",
  tiffanyBlue: "#2B313B",
  yellow: "#2B313B",
  orangeLight: "#2B313B",
  orange: "#2B313B",
  orangeDeep: "#2B313B",
  violetLight: "#2B313B",
  violet: "#2B313B",
  violetDeep: "#2B313B",
  fuchsia: "#2B313B",
  fuchsiaDeep: "#2B313B",
  rainySky: "#2B313B",
  gray: "#2B313B",
  blueDark: "#252A32",
  softBlue: "#2B313B",
  softNiceBlue: "#2B313B",
  softSkyBlue: "#2B313B",
  softTiffany: "#2B313B",
  softGreen: "#2B313B",
  softYellow: "#2B313B",
  softPapaya: "#2B313B",
  softRed: "#2B313B",
  softPink: "#2B313B",
  softPurple: "#2B313B",
  softMallowPurple: "#2B313B",
  softGray: "#2B313B"
};
const COLOR = {
  basic: BASIC,
  background: BACKGROUND,
  text: TEXT,
  status: STATUS,
  special: SPECIAL,
  specialInvert: SPECIAL_INVERT
};
const shadow = {
  ClickableActive: `
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.4), 0px -2px 2px rgba(0, 0, 0, 0.08);;
`,
  ClickableDefault: `
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.4), 0px -2px 4px rgba(0, 0, 0, 0.08);
`,
  ClickableHover: `
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.4), 0px -2px 8px rgba(0, 0, 0, 0.08);
`,
  NonClickable: `
  box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.4), 0px 0px 6px rgba(0, 0, 0, 0.08);
`
};
const DARK_THEME = {
  color: COLOR,
  shadow,
  zIndex,
  name: "dark"
};
const FONT_FAMILY = `'VTB Group UI', sans-serif`;
const FONT_SIZE = {
  12: "12px",
  14: "14px",
  16: "16px",
  18: "18px",
  22: "22px",
  28: "28px",
  32: "32px",
  36: "36px",
  42: "42px"
};
const FONT_WEIGHT = {
  normal: 400,
  medium: 500,
  bold: 600
};
const LINE_HEIGHT$1 = {
  16: "16px",
  20: "20px",
  24: "24px",
  28: "28px",
  36: "36px",
  40: "40px",
  44: "44px",
  52: "52px"
};
const TYPOGRAPHY = {
  fontFamily: FONT_FAMILY,
  fontSize: FONT_SIZE,
  fontWeight: FONT_WEIGHT,
  lineHeight: LINE_HEIGHT$1
};
const typography$1 = {
  "Main/XXL": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 42px;
    line-height: 52px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/XL": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 36px;
    line-height: 44px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/L": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 32px;
    line-height: 40px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/M": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 28px;
    line-height: 36px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/S": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 22px;
    line-height: 28px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/XS-bold": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 18px;
    line-height: 24px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Main/XS": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 18px;
    line-height: 24px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/L-bold": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 16px;
    line-height: 24px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/L": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 16px;
    line-height: 24px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/M": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 16px;
    line-height: 20px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/S": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 14px;
    line-height: 20px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/S-bold": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Additional/XS": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 14px;
    line-height: 16px;
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Button/M": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 16px;
    line-height: 24px;
    /* or 150% */

    font-feature-settings: 'tnum' on, 'lnum' on;
  `,
  "Button/S": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
    /* or 143% */

    font-feature-settings: 'tnum' on, 'lnum' on;
  `,
  "Caption/XS": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 12px;
    line-height: 16px;
    /* identical to box height, or 133% */

    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/HL1": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 72px;
    line-height: 80px;
    /* or 111% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/HL2": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 56px;
    line-height: 64px;
    /* or 114% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/HL3": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 48px;
    line-height: 56px;
    /* or 117% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H1": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 40px;
    line-height: 48px;
    /* or 120% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H2": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 34px;
    line-height: 40px;
    /* or 118% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H3": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 28px;
    line-height: 36px;
    /* or 129% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H4": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 24px;
    line-height: 32px;
    /* or 133% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H5": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 20px;
    line-height: 28px;
    /* or 140% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Header/H6": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 18px;
    line-height: 24px;
    /* or 133% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Subtitle/Subtitle 1": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 18px;
    line-height: 24px;
    /* or 133% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Subtitle/Subtitle 2": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 16px;
    line-height: 24px;
    /* or 150% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Subtitle/Subtitle 3": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
    /* or 143% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Body/Body 1 Long": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 16px;
    line-height: 24px;
    /* or 150% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Body/Body 1 Short": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 16px;
    line-height: 20px;
    /* or 125% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Body/Body 2 Long": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 14px;
    line-height: 20px;
    /* or 133% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Body/Body 2 Short": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 14px;
    line-height: 16px;
    /* or 114% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Button/Button 1": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 16px;
    line-height: 24px;
    /* or 150% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Button/Button 2": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
    /* or 143% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `,
  "Caption/Caption 1": css`
    font-family: ${FONT_FAMILY};
    font-style: normal;
    font-weight: normal;
    font-size: 12px;
    line-height: 16px;
    /* identical to box height, or 133% */
    font-feature-settings: 'tnum' on, 'lnum' on;
    color: ${(p) => p.theme.color.text.primary};
  `
};
const getTextStyle = ({
  color: color2,
  fontSize,
  fontWeight,
  lineHeight
}) => css`
  color: ${color2 || "inherit"};
  font-family: ${TYPOGRAPHY.fontFamily};
  font-size: ${TYPOGRAPHY.fontSize[fontSize]};
  font-weight: ${TYPOGRAPHY.fontWeight[fontWeight]};
  line-height: ${TYPOGRAPHY.lineHeight[lineHeight]};
`;
const Main_XXL = styled.div`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 42, fontWeight: "bold", lineHeight: 52 })};
`;
const Main_XL = styled.div`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 36, fontWeight: "bold", lineHeight: 44 })};
`;
const Main_L = styled.h1`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 32, fontWeight: "bold", lineHeight: 40 })};
`;
const Main_M = styled.h2`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 28, fontWeight: "bold", lineHeight: 36 })};
`;
const Main_S = styled.h3`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 22, fontWeight: "bold", lineHeight: 28 })};
`;
const Main_XS_bold = styled.h4`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 18, fontWeight: "bold", lineHeight: 24 })};
`;
const Main_XS_normal = styled.h5`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 18,
  fontWeight: "normal",
  lineHeight: 24
})};
`;
const Additional_L_bold = styled.h6`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 16, fontWeight: "bold", lineHeight: 24 })};
`;
const Additional_L_normal = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 16,
  fontWeight: "normal",
  lineHeight: 24
})};
`;
const Additional_M_normal = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 16,
  fontWeight: "normal",
  lineHeight: 20
})};
`;
const Additional_S_bold = styled.div`
  ${({ color: color2 }) => getTextStyle({ color: color2, fontSize: 14, fontWeight: "bold", lineHeight: 20 })};
`;
const Additional_S_normal = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 14,
  fontWeight: "normal",
  lineHeight: 20
})};
`;
const Additional_XS_normal = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 14,
  fontWeight: "normal",
  lineHeight: 16
})};
`;
const Button_M = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 16,
  fontWeight: "medium",
  lineHeight: 24
})};
`;
const Button_S = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 14,
  fontWeight: "medium",
  lineHeight: 20
})};
`;
const Caption_XS = styled.div`
  ${({ color: color2 }) => getTextStyle({
  color: color2,
  fontSize: 12,
  fontWeight: "normal",
  lineHeight: 16
})};
`;
function uid() {
  return (performance.now().toString(36) + Math.random().toString(36)).replace(/\./g, "");
}
function isObject(val) {
  return val !== null && !Array.isArray(val) && typeof val === "object";
}
const codes = {
  3: "Cancel",
  6: "Help",
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  28: "Convert",
  29: "NonConvert",
  30: "Accept",
  31: "ModeChange",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  41: "Select",
  42: "Print",
  43: "Execute",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  48: ["0", ")"],
  49: ["1", "!"],
  50: ["2", "@"],
  51: ["3", "#"],
  52: ["4", "$"],
  53: ["5", "%"],
  54: ["6", "^"],
  55: ["7", "&"],
  56: ["8", "*"],
  57: ["9", "("],
  91: "OS",
  93: "ContextMenu",
  144: "NumLock",
  145: "ScrollLock",
  181: "VolumeMute",
  182: "VolumeDown",
  183: "VolumeUp",
  186: [";", ":"],
  187: ["=", "+"],
  188: [",", "<"],
  189: ["-", "_"],
  190: [".", ">"],
  191: ["/", "?"],
  192: ["`", "~"],
  219: ["[", "{"],
  220: ["\\", "|"],
  221: ["]", "}"],
  222: ["'", '"'],
  224: "Meta",
  225: "AltGraph",
  246: "Attn",
  247: "CrSel",
  248: "ExSel",
  249: "EraseEof",
  250: "Play",
  251: "ZoomOut"
};
for (let i = 0; i < 24; i += 1) {
  codes[112 + i] = "F" + (i + 1);
}
for (let j = 0; j < 26; j += 1) {
  let n = j + 65;
  codes[n] = [String.fromCharCode(n + 32), String.fromCharCode(n)];
}
const keyboardKey = {
  codes,
  getCode(eventOrKey) {
    if (isObject(eventOrKey)) {
      return eventOrKey.keyCode || eventOrKey.which || this[eventOrKey.key];
    }
    return this[eventOrKey];
  },
  getKey(eventOrCode) {
    const isEvent = isObject(eventOrCode);
    if (isEvent && eventOrCode.key) {
      return eventOrCode.key;
    }
    let name = codes[isEvent ? eventOrCode.keyCode || eventOrCode.which : eventOrCode];
    if (Array.isArray(name)) {
      if (isEvent) {
        name = name[eventOrCode.shiftKey ? 1 : 0];
      } else {
        name = name[0];
      }
    }
    return name;
  },
  Cancel: 3,
  Help: 6,
  Backspace: 8,
  Tab: 9,
  Clear: 12,
  Enter: 13,
  Shift: 16,
  Control: 17,
  Alt: 18,
  Pause: 19,
  CapsLock: 20,
  Escape: 27,
  Convert: 28,
  NonConvert: 29,
  Accept: 30,
  ModeChange: 31,
  " ": 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40,
  Select: 41,
  Print: 42,
  Execute: 43,
  PrintScreen: 44,
  Insert: 45,
  Delete: 46,
  0: 48,
  ")": 48,
  1: 49,
  "!": 49,
  2: 50,
  "@": 50,
  3: 51,
  "#": 51,
  4: 52,
  $: 52,
  5: 53,
  "%": 53,
  6: 54,
  "^": 54,
  7: 55,
  "&": 55,
  8: 56,
  "*": 56,
  9: 57,
  "(": 57,
  a: 65,
  A: 65,
  b: 66,
  B: 66,
  c: 67,
  C: 67,
  d: 68,
  D: 68,
  e: 69,
  E: 69,
  f: 70,
  F: 70,
  g: 71,
  G: 71,
  h: 72,
  H: 72,
  i: 73,
  I: 73,
  j: 74,
  J: 74,
  k: 75,
  K: 75,
  l: 76,
  L: 76,
  m: 77,
  M: 77,
  n: 78,
  N: 78,
  o: 79,
  O: 79,
  p: 80,
  P: 80,
  q: 81,
  Q: 81,
  r: 82,
  R: 82,
  s: 83,
  S: 83,
  t: 84,
  T: 84,
  u: 85,
  U: 85,
  v: 86,
  V: 86,
  w: 87,
  W: 87,
  x: 88,
  X: 88,
  y: 89,
  Y: 89,
  z: 90,
  Z: 90,
  OS: 91,
  ContextMenu: 93,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  F20: 131,
  F21: 132,
  F22: 133,
  F23: 134,
  F24: 135,
  NumLock: 144,
  ScrollLock: 145,
  VolumeMute: 181,
  VolumeDown: 182,
  VolumeUp: 183,
  ";": 186,
  ":": 186,
  "=": 187,
  "+": 187,
  ",": 188,
  "<": 188,
  "-": 189,
  _: 189,
  ".": 190,
  ">": 190,
  "/": 191,
  "?": 191,
  "`": 192,
  "~": 192,
  "[": 219,
  "{": 219,
  "\\": 220,
  "|": 220,
  "]": 221,
  "}": 221,
  "'": 222,
  '"': 222,
  Meta: 224,
  AltGraph: 225,
  Attn: 246,
  CrSel: 247,
  ExSel: 248,
  EraseEof: 249,
  Play: 250,
  ZoomOut: 251
};
keyboardKey.Spacebar = keyboardKey[" "];
keyboardKey.Digit0 = keyboardKey["0"];
keyboardKey.Digit1 = keyboardKey["1"];
keyboardKey.Digit2 = keyboardKey["2"];
keyboardKey.Digit3 = keyboardKey["3"];
keyboardKey.Digit4 = keyboardKey["4"];
keyboardKey.Digit5 = keyboardKey["5"];
keyboardKey.Digit6 = keyboardKey["6"];
keyboardKey.Digit7 = keyboardKey["7"];
keyboardKey.Digit8 = keyboardKey["8"];
keyboardKey.Digit9 = keyboardKey["9"];
keyboardKey.Tilde = keyboardKey["~"];
keyboardKey.GraveAccent = keyboardKey["`"];
keyboardKey.ExclamationPoint = keyboardKey["!"];
keyboardKey.AtSign = keyboardKey["@"];
keyboardKey.PoundSign = keyboardKey["#"];
keyboardKey.PercentSign = keyboardKey["%"];
keyboardKey.Caret = keyboardKey["^"];
keyboardKey.Ampersand = keyboardKey["&"];
keyboardKey.PlusSign = keyboardKey["+"];
keyboardKey.MinusSign = keyboardKey["-"];
keyboardKey.EqualsSign = keyboardKey["="];
keyboardKey.DivisionSign = keyboardKey["/"];
keyboardKey.MultiplicationSign = keyboardKey["*"];
keyboardKey.Comma = keyboardKey[","];
keyboardKey.Decimal = keyboardKey["."];
keyboardKey.Colon = keyboardKey[":"];
keyboardKey.Semicolon = keyboardKey[";"];
keyboardKey.Pipe = keyboardKey["|"];
keyboardKey.BackSlash = keyboardKey["\\"];
keyboardKey.QuestionMark = keyboardKey["?"];
keyboardKey.SingleQuote = keyboardKey["'"];
keyboardKey.DoubleQuote = keyboardKey['"'];
keyboardKey.LeftCurlyBrace = keyboardKey["{"];
keyboardKey.RightCurlyBrace = keyboardKey["}"];
keyboardKey.LeftParenthesis = keyboardKey["("];
keyboardKey.RightParenthesis = keyboardKey[")"];
keyboardKey.LeftAngleBracket = keyboardKey["<"];
keyboardKey.RightAngleBracket = keyboardKey[">"];
keyboardKey.LeftSquareBracket = keyboardKey["["];
keyboardKey.RightSquareBracket = keyboardKey["]"];
const Collapse = styled.div`
  overflow: hidden;
  transition: max-height 250ms cubic-bezier(0.4, 0, 0.2, 1), visibility 250ms cubic-bezier(0.4, 0, 0.2, 1);
  max-height: ${(p) => !p.opened ? 0 : p.contentMaxHeight};
  visibility: ${(p) => !p.opened ? "hidden" : "visible"};
`;
const moveFocus$2 = (parent, currentFocus, calcNextFocus, stop) => {
  let wrappedOnce = false;
  let nextFocus = calcNextFocus(parent, currentFocus, stop);
  while (nextFocus) {
    if (nextFocus === (parent == null ? void 0 : parent.firstChild)) {
      if (wrappedOnce) {
        return;
      }
      wrappedOnce = true;
    }
    if (nextFocus.hasAttribute("disabled")) {
      nextFocus = calcNextFocus(parent, nextFocus, stop);
    } else {
      nextFocus.focus();
      return;
    }
  }
};
const nextItem$2 = (parent, child, stop) => {
  var _a;
  if (child == null ? void 0 : child.nextElementSibling) {
    return child.nextElementSibling.firstElementChild;
  }
  return stop ? null : (_a = parent == null ? void 0 : parent.firstChild) == null ? void 0 : _a.firstChild;
};
const previousItem$2 = (parent, child, stop) => {
  var _a;
  if (child == null ? void 0 : child.previousElementSibling) {
    return child.previousElementSibling.firstElementChild;
  }
  return stop ? null : (_a = parent == null ? void 0 : parent.lastChild) == null ? void 0 : _a.firstChild;
};
const Chevron$2 = styled(ReactComponent)`
  transition: all 0.3s;
  flex-shrink: 0;
  width: 24px;
  height: 24px;
  margin-left: 8px;
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }
  [data-disabled='true'] & {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
  [data-dimension='m'] & {
    width: 20px;
    height: 20px;
  }
`;
const ItemTitleContent = styled.span`
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;

  padding: 16px 16px 15px 16px;
  [data-dimension='m'] && {
    padding: 10px 16px 9px 16px;
  }
`;
const ItemTitle = styled.button`
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 54px;
  width: 100%;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  text-align: left;
  border: none;
  background: none;
  margin: 0;
  padding: 0;
  cursor: pointer;
  overflow: visible;
  ${typography$1["Subtitle/Subtitle 2"]}
  &:hover {
    background: ${(p) => p.theme.color.background.secondary};
    & ${Chevron$2} *[fill^='#'] {
      fill: ${(p) => p.theme.color.basic.hover};
    }
  }
  &:focus {
    &:before {
      position: absolute;
      content: '';
      border: 2px solid ${({ theme }) => theme.color.basic.hover};
      top: -1px;
      left: 0;
      bottom: -1px;
      right: 0;
    }
  }
  &:focus,
  & > ${ItemTitleContent} {
    outline: none;
  }

  [data-dimension='m'] & {
    min-height: 38px;
    ${typography$1["Subtitle/Subtitle 3"]}
  }
`;
const ItemWrapper = styled.div`
  border-bottom: 1px solid ${(p) => p.theme.color.background.tertiary};
  color: ${(p) => p.theme.color.text.primary};
  & > ${ItemTitle} ${Chevron$2} {
    transform: ${(p) => p.opened ? "rotate(180deg)" : "rotate(0deg)"};
  }
  ${({ disabled }) => disabled && "pointer-events: none;"}
`;
const ItemContent$1 = styled.div`
  box-sizing: border-box;
  overflow-y: auto;
  max-height: ${(p) => p.contentMaxHeight};
  padding: 4px 16px 16px 16px;
  ${typography$1["Body/Body 1 Long"]}
  [data-dimension='m'] & {
    padding: 4px 16px 10px 16px;
    ${typography$1["Body/Body 2 Long"]}
  }
`;
const AccordionWrapper = styled.div`
  position: relative;
  & > ${ItemWrapper}:first-child {
    & ${ItemTitleContent} {
      padding: ${({ dimension }) => dimension === "l" ? "15px 16px" : "9px 16px"};
    }
    border-top: 1px solid ${({ theme }) => theme.color.background.tertiary};
  }
`;
const AccordionItem = ({
  children,
  title,
  id,
  defaultExpanded,
  expanded: userExpanded,
  onClick,
  contentMaxHeight = "100vh",
  disabled,
  ...props2
}) => {
  const [expanded, setExpanded] = React.useState(defaultExpanded);
  const collapseOpened = userExpanded === void 0 ? expanded : userExpanded;
  const itemId = React.useMemo(() => id || uid(), [id]);
  const ITEM_TITLE_ID = `accordion_title_${itemId}`;
  const ITEM_CONTENT_ID = `accordion_content_${itemId}`;
  const handleClick = React.useCallback((event) => {
    if (userExpanded === void 0) {
      onClick == null ? void 0 : onClick(title, !expanded, event);
      setExpanded(!expanded);
    } else {
      onClick == null ? void 0 : onClick(title, !userExpanded, event);
    }
  }, [expanded, userExpanded, onClick, title]);
  return /* @__PURE__ */ React.createElement(ItemWrapper, {
    opened: collapseOpened,
    "data-disabled": disabled,
    disabled
  }, /* @__PURE__ */ React.createElement(ItemTitle, {
    onClick: disabled ? void 0 : handleClick,
    role: "button",
    type: "button",
    "aria-expanded": collapseOpened,
    "aria-controls": ITEM_CONTENT_ID,
    id: ITEM_TITLE_ID,
    ...props2
  }, /* @__PURE__ */ React.createElement(ItemTitleContent, {
    tabIndex: -1
  }, title, /* @__PURE__ */ React.createElement(Chevron$2, {
    "aria-hidden": true
  }))), /* @__PURE__ */ React.createElement(Collapse, {
    opened: collapseOpened,
    contentMaxHeight
  }, /* @__PURE__ */ React.createElement(ItemContent$1, {
    contentMaxHeight,
    role: "region",
    "aria-labelledby": ITEM_TITLE_ID,
    id: ITEM_CONTENT_ID
  }, children)));
};
const Accordion = ({ children, dimension = "l", onKeyDown, ...props2 }) => {
  const accordionRef = React.useRef(null);
  const handleKeyDown = React.useCallback((e) => {
    let focusedOption = (accordionRef.current && accordionRef.current.ownerDocument || document).activeElement;
    if (focusedOption.id.indexOf("accordion_title") > -1 && focusedOption.tagName.toLowerCase() === "button") {
      do {
        focusedOption = focusedOption == null ? void 0 : focusedOption.parentNode;
      } while (focusedOption.parentNode !== accordionRef.current);
      const code = keyboardKey.getCode(e);
      if (code === keyboardKey.ArrowDown) {
        moveFocus$2(accordionRef.current, focusedOption, nextItem$2);
        e.preventDefault();
      } else if (code === keyboardKey.ArrowUp) {
        moveFocus$2(accordionRef.current, focusedOption, previousItem$2);
        e.preventDefault();
      } else if (code === keyboardKey.Home) {
        e.preventDefault();
        moveFocus$2(accordionRef.current, null, nextItem$2);
      } else if (code === keyboardKey.End) {
        e.preventDefault();
        moveFocus$2(accordionRef.current, null, previousItem$2);
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(e);
  }, [accordionRef.current]);
  return /* @__PURE__ */ React.createElement(AccordionWrapper, {
    ref: accordionRef,
    "data-dimension": dimension,
    dimension,
    onKeyDown: handleKeyDown,
    ...props2
  }, children);
};
Accordion.displayName = "Accordion";
const background = css`
  background: ${({ appearance, theme }) => {
  switch (appearance) {
    case "info":
      return theme.color.basic.primary;
    case "warning":
      return theme.color.status.warn;
    case "success":
      return theme.color.status.success;
    case "error":
      return theme.color.status.danger;
    case "grey":
      return theme.color.text.secondary;
    case "dark":
      return theme.color.basic.secondary;
    case "white":
    case "whiteInactive":
    case "whiteDisable":
      return theme.color.background.primary;
    case "light":
    case "lightInactive":
    case "lightDisable":
    default:
      return theme.color.background.tertiary;
  }
}};
`;
const color = css`
  color: ${({ appearance, theme }) => {
  switch (appearance) {
    case "info":
    case "warning":
    case "success":
    case "error":
    case "grey":
      return theme.color.text.staticWhite;
    case "dark":
      return theme.color.text.inversion;
    case "lightInactive":
    case "whiteInactive":
      return theme.color.text.secondary;
    case "lightDisable":
    case "whiteDisable":
      return theme.color.text.tertiary;
    case "white":
    case "light":
    default:
      return theme.color.text.primary;
  }
}};
`;
const BadgeComponent = styled.div`
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: ${({ dimension }) => dimension === "s" ? "0 5px" : "0 7px"};
  height: ${({ dimension }) => dimension === "s" ? "16px" : "20px"};
  border-radius: ${({ dimension }) => dimension === "s" ? "8px" : "10px"};
  ${({ dimension }) => dimension === "s" ? typography$1["Caption/Caption 1"] : typography$1["Body/Body 2 Long"]}
  ${background}
  ${color}
  user-select: none;
`;
const Badge = ({ children, dimension = "m", appearance = "light", ...props2 }) => {
  const ariaLabel = `\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E ${children}`;
  return /* @__PURE__ */ React__default.createElement(BadgeComponent, {
    dimension,
    appearance,
    "aria-label": ariaLabel,
    ...props2
  }, children);
};
Badge.displayName = "Badge";
const DAY_NUMBERS = [0, 1, 2, 3, 4, 5, 6];
const DEFAULT_YEAR_COUNT = 20;
const DEFAULT_LOCALE_NAME = "ru";
const BACK = "\u041D\u0430\u0437\u0430\u0434";
const FORWARD = "\u0412\u043F\u0435\u0440\u0435\u0434";
const NEXT_MONTH = "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043C\u0435\u0441\u044F\u0446";
const PREVIOUS_MONTH = "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u043C\u0435\u0441\u044F\u0446";
const RETURN = "\u0412\u0435\u0440\u043D\u0443\u0442\u044C\u0441\u044F";
const SELECT_YEAR = "\u0412\u044B\u0431\u043E\u0440 \u0433\u043E\u0434\u0430";
const SELECT_MONTH = "\u0412\u044B\u0431\u043E\u0440 \u043C\u0435\u0441\u044F\u0446\u0430";
const capitalizeFirstLetter = (s) => s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
const MILLISECONDS_IN_DAY = 864e5;
const locales = {
  ru: {
    code: "ru",
    options: {
      weekStartsOn: 1,
      firstWeekContainsDate: 1
    }
  },
  enUS: {
    code: "en-US",
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  },
  de: {
    code: "de",
    options: {
      weekStartsOn: 1,
      firstWeekContainsDate: 4
    }
  }
};
const endOfDay = (date) => {
  date.setHours(23, 59, 59, 999);
  return date;
};
const endOfMonth = (date) => {
  const month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
};
const getDaysInMonth = (date) => {
  const year = date.getFullYear();
  const monthIndex = date.getMonth();
  const lastDayOfMonth2 = new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
};
const getTimezoneOffsetInMilliseconds = (date) => {
  const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
};
const isEqual = (dateLeft, dateRight) => {
  return dateLeft.getTime() === dateRight.getTime();
};
const isSameDay = (dateLeft, dateRight) => {
  const dateLeftStartOfDay = startOfDay(dateLeft);
  const dateRightStartOfDay = startOfDay(dateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
};
const isSameMonth = (dateLeft, dateRight) => {
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
};
const isWithinInterval = (date, interval) => {
  const time = date.getTime();
  const startTime = interval.start.getTime();
  const endTime = interval.end.getTime();
  if (!(startTime <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  return time >= startTime && time <= endTime;
};
const startOfDay = (date) => {
  date.setHours(0, 0, 0, 0);
  return date;
};
const addDays = (current, amount) => {
  const date = new Date(current.getTime());
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
};
const addWeeks = (date, amount) => {
  const days = amount * 7;
  return addDays(date, days);
};
const addYears = (date, amount) => {
  return addMonths(date, amount * 12);
};
const addMonths = (current, amount) => {
  const date = new Date(current.getTime());
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  const dayOfMonth = date.getDate();
  const endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  const daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
};
const after = (date, dateToCompare) => date.getTime() > dateToCompare.getTime();
const before = (date, dateToCompare) => date.getTime() < dateToCompare.getTime();
const changeTime = (dateTime, newTime) => {
  if (!newTime)
    return dateTime;
  dateTime.setMilliseconds(newTime.getMilliseconds());
  dateTime.setSeconds(newTime.getSeconds());
  dateTime.setMinutes(newTime.getMinutes());
  dateTime.setHours(newTime.getHours());
  return dateTime;
};
const compareDates = (date1, date2) => {
  if (date1 === null && date2 === null || date1 === void 0 && date2 === void 0)
    return 0;
  if ((date1 === void 0 || date1 === null) && date2 !== void 0 && date2 !== null)
    return -1;
  if ((date2 === void 0 || date2 === null) && date1 !== void 0 && date1 !== null)
    return 1;
  return date1 && date2 ? date1.getTime() - date2.getTime() : 0;
};
const dayInRange = (day, startDate, endDate) => {
  let valid2 = false;
  const start = startOfDay(startDate);
  const end = endOfDay(endDate);
  try {
    valid2 = isWithinInterval(day, { start, end });
  } catch (err) {
    valid2 = false;
  }
  return valid2;
};
const differenceDays = (dateLeft, dateRight) => {
  const startOfDayLeft = startOfDay(dateLeft);
  const startOfDayRight = startOfDay(dateRight);
  const timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  const timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
};
const differenceMonths = (dateLeft, dateRight) => {
  const yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  const monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
};
const differenceYears = (dateLeft, dateRight) => {
  return dateLeft.getFullYear() - dateRight.getFullYear();
};
const endOfWeek = (current, localeName) => {
  const locale = locales[localeName];
  const weekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  const date = new Date(current.getTime());
  const day = date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
};
const equal = (date1, date2) => {
  if (date1 && date2) {
    return isEqual(date1, date2);
  } else {
    return !date1 && !date2;
  }
};
const getFormattedValue = (date, options, localeName) => {
  return new Intl.DateTimeFormat(locales[localeName].code, options).format(date || new Date());
};
const lastDayOfMonth = (date) => {
  return endOfMonth(date).getDate();
};
const outOfBounds = (day, minDate, maxDate) => minDate && differenceDays(day, minDate) < 0 || maxDate && differenceDays(day, maxDate) > 0;
const sameDay = (date1, date2) => {
  if (date1 && date2) {
    return isSameDay(date1, date2);
  } else {
    return !date1 && !date2;
  }
};
const sameMonth = (date1, date2) => {
  if (date1 && date2) {
    return isSameMonth(date1, date2);
  } else {
    return !date1 && !date2;
  }
};
const setMonth = (date, month) => {
  const year = date.getFullYear();
  const day = date.getDate();
  const dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  const daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  const d = new Date(date);
  d.setMonth(month, Math.min(day, daysInMonth));
  return d;
};
const setYear = (date, year) => {
  if (isNaN(date)) {
    return new Date(NaN);
  }
  const d = new Date(date);
  d.setFullYear(year);
  return d;
};
const subYears = (date, amount) => {
  return addYears(date, -amount);
};
const startOfYear = (startDate) => {
  const date = new Date(0);
  date.setFullYear(startDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
};
const startOfMonth = (someDate) => {
  const date = new Date(someDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
};
const weekInMonth = (startOfWeek2, day) => {
  const endOfWeek2 = addDays(startOfWeek2, 6);
  return sameMonth(startOfWeek2, day) || sameMonth(endOfWeek2, day);
};
const yearsRange = (date, yearCount) => {
  const end = Math.ceil(date.getFullYear() / yearCount) * yearCount;
  const start = end - (yearCount - 1);
  return { start, end };
};
const startOfWeek = (current, localeName) => {
  const locale = locales[localeName];
  const weekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  const date = new Date(current.getTime());
  const day = date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
};
const subMonths = (date, amount) => addMonths(date, -amount);
const valid = (date) => !isNaN(date);
const MESSAGE_DATE_UNDEFINED = "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0434\u0430\u0442\u044B";
const MESSAGE_DATE_INVALID = "\u0414\u0430\u0442\u0430 \u043D\u0435 \u0432\u0430\u043B\u0438\u0434\u043D\u0430";
const MESSAGE_START_DATE_INVALID = "\u041D\u0430\u0447\u0430\u043B\u044C\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u043D\u0435 \u0432\u0430\u043B\u0438\u0434\u043D\u0430";
const MESSAGE_END_DATE_INVALID = "\u041A\u043E\u043D\u0435\u0447\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u043D\u0435 \u0432\u0430\u043B\u0438\u0434\u043D\u0430";
const MESSAGE_START_END_DATE_INVALID = "\u0414\u0430\u0442\u044B \u043D\u0435 \u0432\u0430\u043B\u0438\u0434\u043D\u044B";
const MESSAGE_START_DATE_UNDEFINED = "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0439 \u0434\u0430\u0442\u044B";
const MESSAGE_END_DATE_UNDEFINED = "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043A\u043E\u043D\u0435\u0447\u043D\u043E\u0439 \u0434\u0430\u0442\u044B";
const MESSAGE_START_END_DATE_UNDEFINED = "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0434\u0430\u0442";
const MESSAGE_DATE_OUTOFRANGE = "\u0414\u0430\u0442\u0430 \u0432\u043D\u0435 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430";
const MESSAGE_START_DATE_OUTOFRANGE = "\u041D\u0430\u0447\u0430\u043B\u044C\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u0432\u043D\u0435 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430";
const MESSAGE_END_DATE_OUTOFRANGE = "\u041A\u043E\u043D\u0435\u0447\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u0432\u043D\u0435 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D\u0430";
const MESSAGE_DATES_INCORRECT_RANGE = "\u041A\u043E\u043D\u0435\u0447\u043D\u0430\u044F \u0434\u0430\u0442\u0430 \u043C\u0435\u043D\u044C\u0448\u0435 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0439";
const getDefaultDateValidator = (minDate, maxDate) => {
  return {
    invalidValue: (date) => {
      if (!date)
        return MESSAGE_DATE_UNDEFINED;
      if (!valid(date))
        return MESSAGE_DATE_INVALID;
      if (outOfBounds(date, minDate, maxDate))
        return MESSAGE_DATE_OUTOFRANGE;
      return null;
    },
    invalidRange: (startDate, endDate) => {
      if (!startDate && !endDate)
        return MESSAGE_START_END_DATE_UNDEFINED;
      if (!valid(startDate) && !valid(endDate))
        return MESSAGE_START_END_DATE_INVALID;
      if (!startDate)
        return MESSAGE_START_DATE_UNDEFINED;
      if (!endDate)
        return MESSAGE_END_DATE_UNDEFINED;
      if (!valid(startDate))
        return MESSAGE_START_DATE_INVALID;
      if (!valid(endDate))
        return MESSAGE_END_DATE_INVALID;
      if (compareDates(startDate, endDate) >= 0)
        return MESSAGE_DATES_INCORRECT_RANGE;
      if (outOfBounds(startDate, minDate, maxDate))
        return MESSAGE_START_DATE_OUTOFRANGE;
      if (outOfBounds(endDate, minDate, maxDate))
        return MESSAGE_END_DATE_OUTOFRANGE;
      return null;
    },
    invalidYear: (year) => {
      return !!outOfBounds(new Date(year, 11, 31), minDate) || !!outOfBounds(new Date(year, 0, 1), null, maxDate) ? MESSAGE_DATE_OUTOFRANGE : null;
    },
    invalidMonth: (month, year) => {
      const lastDay = lastDayOfMonth(new Date(year, month, 1));
      return !!outOfBounds(new Date(year, month, lastDay), minDate) || !!outOfBounds(new Date(year, month, 1), null, maxDate) ? MESSAGE_DATE_OUTOFRANGE : null;
    }
  };
};
const YEAR_HEIGHT = "36px";
const YEAR_WIDTH$1 = "60px";
const YEAR_MARGIN_BOTTOM = "16px";
const YEAR_PADDING = "8px 0";
const YEAR_BORDER_RADIUS = "18px";
const YearComponent = styled.div`
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  width: ${YEAR_WIDTH$1};
  height: ${YEAR_HEIGHT};
  padding: ${YEAR_PADDING};
  margin-bottom: ${YEAR_MARGIN_BOTTOM};
  border: 1px solid ${({ today, theme }) => today ? theme.color.basic.secondary : "transparent"};
  border-radius: ${YEAR_BORDER_RADIUS};
  background: transparent;
  ${typography$1["Body/Body 2 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
  user-select: none;
  cursor: pointer;

  ${({ disabled, theme }) => disabled && `
      cursor: default;
      color: ${theme.color.text.tertiary};
    `}

  ${({ disabled, theme }) => !disabled && `
      &:hover {
        border: 1px solid ${theme.color.basic.primary};
      }
    `}

  ${({ disabled, theme, selected }) => !disabled && selected && `
      border: 1px solid ${theme.color.basic.primary};
      color: ${theme.color.text.staticWhite};
      background: ${theme.color.basic.primary};
      &:hover {
        border: 1px solid ${theme.color.basic.hover};
        background: ${theme.color.basic.hover};
      }
    `}
`;
const Years = ({ viewDate, startDate, selected, validator, onClick }) => {
  const { start, end } = yearsRange(viewDate, DEFAULT_YEAR_COUNT);
  const years = Array(end - start + 1).fill(0).map((_, index) => start + index);
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, years.map((year) => {
    const disabled = !!(validator == null ? void 0 : validator.invalidYear(year));
    const handleClick = (e) => {
      e.preventDefault();
      const day = startOfYear(setYear(viewDate, year));
      !disabled && onClick && onClick(day, e);
    };
    return /* @__PURE__ */ React__default.createElement(YearComponent, {
      key: year,
      today: year === new Date().getFullYear(),
      selected: !!(selected || startDate) && year === (selected || startDate).getFullYear(),
      disabled,
      onMouseDown: handleClick
    }, year);
  }));
};
const BUTTON_SIZE = "32px";
const BUTTON_PADDING = "4px";
const PanelButton = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: ${BUTTON_SIZE};
  height: ${BUTTON_SIZE};
  padding: ${BUTTON_PADDING};
  border-radius: 50%;
  background-color: transparent;
  cursor: pointer;
  ${({ disabled }) => disabled && `
      pointer-events: none;
      cursor: default;
    `}

  & *[fill^='#'] {
    fill: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.text.secondary};
  }

  ${({ disabled, theme }) => `
    &:hover {
      background-color: ${disabled ? "transparent" : theme.color.background.secondary};
      & *[fill^='#'] {
        fill: ${disabled ? theme.color.text.tertiary : theme.color.text.secondary};
      }
    }
  `}
`;
const ICON_SIZE$1 = 24;
const ButtonComponent$3 = ({ onMouseDown, disabled, type }) => /* @__PURE__ */ React.createElement(PanelButton, {
  onMouseDown: (event) => {
    event == null ? void 0 : event.preventDefault();
    onMouseDown(event);
  },
  disabled
}, type === "left" && /* @__PURE__ */ React.createElement(ReactComponent$1, {
  width: ICON_SIZE$1,
  height: ICON_SIZE$1
}), type === "right" && /* @__PURE__ */ React.createElement(ReactComponent$2, {
  width: ICON_SIZE$1,
  height: ICON_SIZE$1
}));
const Button$8 = React.memo(ButtonComponent$3);
const DAY_SIZE = "36px";
const DAY_PADDING = "8px 0";
const DAY_MARGIN_BOTOM = "4px";
const hoverMixin$1 = css`
  &:hover:after {
    border: 1px solid ${(p) => p.theme.color.basic.primary};
    background: ${(p) => p.theme.color.background.primary};
    z-index: -1;
  }
`;
const DayComponent = styled.div`
  position: relative;
  display: inline-block;
  width: ${DAY_SIZE};
  height: ${DAY_SIZE};
  padding: ${DAY_PADDING};
  margin-bottom: ${DAY_MARGIN_BOTOM};
  ${typography$1["Body/Body 2 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
  box-sizing: border-box;
  user-select: none;
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};

  &:after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    border: 1px solid
      ${({ theme, today, selected }) => today && !selected ? theme.color.basic.secondary : "transparent"};
    border-radius: 50%;
  }

  ${({ disabled, theme, outsideMonth }) => (disabled || outsideMonth) && `
      color: ${theme.color.text.tertiary};
    `}

  ${(p) => p.disabled ? "" : hoverMixin$1}

  ${({ disabled, theme, selected, inSelectingRange }) => !disabled && selected && `
      color: ${theme.color.text.staticWhite};
      background: ${inSelectingRange ? theme.color.basic.hover : theme.color.basic.primary};
      border-radius: 50%;
      &:hover {
        background: ${theme.color.basic.hover};
      }
    `}

  ${({ disabled, inRange, theme, corners, selected, isActiveDate }) => !disabled && inRange && `
      &:before {
        z-index: -1;
        content: '';
        position: absolute;
        width: 100%;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: ${theme.color.background.tertiary};
        ${corners && Object.keys(corners).map((key) => corners[key] ? selected || isActiveDate ? `border-${key}-radius: 50%;` : `border-${key}-radius: 4px;` : "").join("")}
      }
    `}
`;
const Day = ({
  day,
  month,
  startDate,
  endDate,
  selected,
  activeDate,
  range: range2,
  localeName = DEFAULT_LOCALE_NAME,
  validator,
  filterDate,
  onMouseEnter,
  onClick
}) => {
  const disabled = !!(validator == null ? void 0 : validator.invalidValue(day)) || filterDate && !filterDate(day);
  const outsideMonth = month !== void 0 && month !== day.getMonth();
  const inSelectingRange = !disabled && !!range2 && !!startDate && !!activeDate && !endDate && (after(activeDate, startDate) || equal(activeDate, startDate)) && dayInRange(day, startDate, activeDate);
  const inRange = !!startDate && !!endDate && dayInRange(day, startDate, endDate);
  const rangeStart = !!startDate && sameDay(day, startDate);
  const rangeEnd = !!startDate && !!endDate && sameDay(day, endDate);
  const rangeSelectingStart = inSelectingRange && sameDay(day, startDate);
  const rangeSelectingEnd = inSelectingRange && sameDay(day, activeDate);
  const corners = {};
  if (startDate) {
    const weekStart = sameDay(day, startOfWeek(day, localeName));
    const weekEnd = sameDay(day, endOfWeek(day, localeName));
    const start = rangeStart || rangeSelectingStart;
    const end = rangeEnd || rangeSelectingEnd;
    corners["top-left"] = start || weekStart && !end;
    corners["bottom-left"] = start || weekStart && !end;
    corners["top-right"] = end || weekEnd && !start;
    corners["bottom-right"] = end || weekEnd && !start;
  }
  return /* @__PURE__ */ React__default.createElement(DayComponent, {
    today: sameDay(day, new Date()),
    selected: sameDay(day, selected) || rangeStart || rangeEnd,
    inSelectingRange,
    isActiveDate: sameDay(day, activeDate),
    corners,
    inRange: inRange || inSelectingRange,
    disabled,
    outsideMonth,
    onMouseEnter: (e) => !disabled && onMouseEnter && onMouseEnter(day, e),
    onMouseDown: (e) => {
      e.preventDefault();
      !disabled && onClick && onClick(day, e);
    },
    className: sameDay(day, selected) && !rangeStart && !rangeEnd ? "ui-kit-calendar-day-component_selected" : "ui-kit-calendar-day-component"
  }, day.getDate());
};
const DAY_NAME_SIZE = "36px";
const DAY_NAME_MARGIN_BOTTOM = "4px";
const DAY_NAME_PADDING = "8px 0";
const DayNameComponent = styled.div`
  display: inline-block;
  user-select: none;
  width: ${DAY_NAME_SIZE};
  height: ${DAY_NAME_SIZE};
  padding: ${DAY_NAME_PADDING};
  margin-bottom: ${DAY_NAME_MARGIN_BOTTOM};
  ${typography$1["Body/Body 2 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
  box-sizing: border-box;
`;
const DayNames = ({ date, localeName }) => {
  const weekStart = startOfWeek(date, localeName);
  return /* @__PURE__ */ React__default.createElement("div", null, DAY_NUMBERS.map((offset) => {
    const day = addDays(weekStart, offset);
    const weekDayName = capitalizeFirstLetter(getFormattedValue(day, { weekday: "short" }, localeName).slice(0, 2));
    return /* @__PURE__ */ React__default.createElement(DayNameComponent, {
      key: day.valueOf()
    }, weekDayName);
  }));
};
const WeekComponent = styled.div`
  white-space: nowrap;
`;
const Week = ({
  localeName = DEFAULT_LOCALE_NAME,
  day,
  month,
  startDate,
  endDate,
  selected,
  activeDate,
  range: range2,
  validator,
  filterDate,
  onMouseEnter,
  onClick
}) => {
  const handleMouseEnter = (day2, e) => onMouseEnter && onMouseEnter(day2, e);
  const handleDayClick = (day2, e) => onClick && onClick(day2, e);
  const weekStart = startOfWeek(day, localeName);
  return /* @__PURE__ */ React__default.createElement(WeekComponent, null, DAY_NUMBERS.map((offset) => {
    const nextDay = addDays(weekStart, offset);
    return /* @__PURE__ */ React__default.createElement(Day, {
      key: nextDay.valueOf(),
      day: nextDay,
      month,
      startDate,
      endDate,
      selected,
      activeDate,
      range: range2,
      localeName,
      validator,
      filterDate,
      onMouseEnter: (_, e) => handleMouseEnter(nextDay, e),
      onClick: (_, e) => handleDayClick(nextDay, e)
    });
  }));
};
const Month$1 = ({
  localeName = DEFAULT_LOCALE_NAME,
  day,
  startDate,
  endDate,
  selected,
  activeDate,
  range: range2,
  validator,
  filterDate,
  onMouseEnter,
  onMouseLeave,
  onClick
}) => {
  const weeks = [];
  const fixCount = false;
  const handleMouseEnter = (day2, event) => onMouseEnter && onMouseEnter(day2, event);
  const handleMouseLeave = () => onMouseLeave && onMouseLeave();
  const handleDayClick = (day2, event) => onClick && onClick(day2, event);
  let weekStart = startOfWeek(startOfMonth(day), localeName);
  do {
    weeks.push(weekStart);
    weekStart = addWeeks(weekStart, 1);
  } while (weekInMonth(weekStart, day) || fixCount);
  return /* @__PURE__ */ React__default.createElement("div", {
    onMouseLeave: handleMouseLeave
  }, weeks.map((week) => /* @__PURE__ */ React__default.createElement(Week, {
    key: week.valueOf(),
    day: week,
    month: day.getMonth(),
    startDate,
    endDate,
    selected,
    activeDate,
    range: range2,
    localeName,
    validator,
    filterDate,
    onMouseEnter: handleMouseEnter,
    onClick: handleDayClick
  })));
};
const MONTH_WIDTH = "84px";
const MONTH_MARGIN_BOTTOM = "32px";
const MonthComponent = styled(YearComponent)`
  width: ${MONTH_WIDTH};
  margin-bottom: ${MONTH_MARGIN_BOTTOM};
`;
const months = [
  "\u042F\u043D\u0432\u0430\u0440\u044C",
  "\u0424\u0435\u0432\u0440\u0430\u043B\u044C",
  "\u041C\u0430\u0440\u0442",
  "\u0410\u043F\u0440\u0435\u043B\u044C",
  "\u041C\u0430\u0439",
  "\u0418\u044E\u043D\u044C",
  "\u0418\u044E\u043B\u044C",
  "\u0410\u0432\u0433\u0443\u0441\u0442",
  "\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C",
  "\u041E\u043A\u0442\u044F\u0431\u0440\u044C",
  "\u041D\u043E\u044F\u0431\u0440\u044C",
  "\u0414\u0435\u043A\u0430\u0431\u0440\u044C"
];
const Months = ({ viewDate, startDate, selected, validator, onClick }) => /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, months.map((month, index) => {
  const disabled = !!(validator == null ? void 0 : validator.invalidMonth(index, viewDate.getFullYear()));
  const handleClick = (e) => {
    e.preventDefault();
    const day = startOfMonth(setMonth(viewDate, index));
    !disabled && onClick && onClick(day, e);
  };
  return /* @__PURE__ */ React__default.createElement(MonthComponent, {
    key: month,
    today: index === new Date().getMonth(),
    selected: !!(selected || startDate) && index === (selected || startDate).getMonth(),
    disabled,
    onMouseDown: handleClick
  }, month);
}));
const PANEL_MARGIN_BOTTOM = {
  days: "12px",
  months_years: "28px"
};
const PanelComponent = styled.div`
  display: flex;
  align-items: center;
  background-color: transparent;
  border: 0 none;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  margin-bottom: ${({ monthsView, yearsView }) => {
  if (monthsView || yearsView)
    return PANEL_MARGIN_BOTTOM.months_years;
  return PANEL_MARGIN_BOTTOM.days;
}};
`;
const YEAR_MONTH_HEIGHT = "32px";
const YEAR_MONTH_PADDING = "4px 8px";
const YEAR_MONTH_BORDER_RADIUS = "16px";
const YEAR_WIDTH = "54px";
const PanelItem = styled.h6`
  display: flex;
  align-items: center;
  box-sizing: border-box;
  height: ${YEAR_MONTH_HEIGHT};
  padding: ${YEAR_MONTH_PADDING};
  margin: 0;
  border-radius: ${YEAR_MONTH_BORDER_RADIUS};
  ${typography$1["Subtitle/Subtitle 2"]}

  ${({ theme, view }) => `
    color: ${theme.color.basic.primary};
    background: ${view ? theme.color.background.tertiary : "transparent"};

    &:hover {
      color: ${theme.color.basic.hover};
      background: ${theme.color.background.secondary};
    }
  `}
`;
const Year = styled(PanelItem)`
  width: ${YEAR_WIDTH};
`;
const Month = styled(PanelItem)``;
const PanelDate = styled.div`
  display: flex;
  justify-content: center;
  width: 100%;
`;
function isRefObject(ref) {
  return typeof ref !== "function";
}
function isRefCallback(ref) {
  return typeof ref === "function";
}
function handleRef(node, propRef, targetRef) {
  targetRef.current = node;
  if (!propRef) {
    return;
  }
  if (isRefObject(propRef)) {
    propRef.current = node;
  } else if (isRefCallback(propRef)) {
    propRef(node);
  }
}
const getScrollableParents = (parent) => {
  const parents = [];
  if (parent) {
    let currentParent = parent;
    while (currentParent) {
      const computedStyle = window.getComputedStyle(currentParent);
      if (computedStyle.getPropertyValue("overflow") === "auto" || computedStyle.getPropertyValue("overflow") === "scroll" || computedStyle.getPropertyValue("overflow-x") === "auto" || computedStyle.getPropertyValue("overflow-x") === "scroll" || computedStyle.getPropertyValue("overflow-y") === "auto" || computedStyle.getPropertyValue("overflow-y") === "scroll") {
        parents.push(currentParent);
      }
      currentParent = currentParent.parentElement;
    }
  }
  return parents;
};
const props = ["bottom", "height", "left", "right", "top", "width"];
const rectChanged = (a = {}, b = {}) => props.some((prop) => a[prop] !== b[prop]);
const observedNodes = /* @__PURE__ */ new Map();
let rafId;
const run = () => {
  const changedStates = [];
  observedNodes.forEach((state, node) => {
    const { bottom, height: height2, left, right, top, width: width2, x, y } = node.getBoundingClientRect();
    const newRect = { bottom, height: height2, left, right, top, width: width2, x: x || left, y: y || top };
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach((state) => {
    state.callbacks.forEach((cb) => cb(state.rect));
  });
  rafId = window.requestAnimationFrame(run);
};
function observeRect(node, cb) {
  return {
    observe() {
      var _a;
      const wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        (_a = observedNodes.get(node)) == null ? void 0 : _a.callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty)
        run();
    },
    unobserve() {
      const state = observedNodes.get(node);
      if (state) {
        const index = state.callbacks.indexOf(cb);
        if (index >= 0)
          state.callbacks.splice(index, 1);
        if (!state.callbacks.length)
          observedNodes.delete(node);
        if (!observedNodes.size)
          cancelAnimationFrame(rafId);
      }
    }
  };
}
const PositionedPortalContainer = styled.div`
  pointer-events: none;
  position: fixed;
  overflow: visible;
  z-index: ${({ theme }) => theme.zIndex.dropdown};
`;
const PositionInPortal = ({
  targetRef,
  container,
  fullContainerWidth,
  ...props2
}) => {
  const positionedPortalContainerRef = React.useRef(null);
  React.useEffect(() => {
    const node = positionedPortalContainerRef.current;
    if (node && targetRef.current) {
      const observer = observeRect(targetRef.current, (rect) => {
        if (rect) {
          const { x, y, height: height2, width: width2 } = rect;
          const { style } = node;
          style.top = `${y}px`;
          style.left = fullContainerWidth ? "0px" : `${x}px`;
          style.height = `${height2}px`;
          style.width = fullContainerWidth ? "100%" : `${width2}px`;
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [targetRef.current, positionedPortalContainerRef.current, fullContainerWidth]);
  return createPortal(/* @__PURE__ */ React.createElement(PositionedPortalContainer, {
    ref: positionedPortalContainerRef,
    ...props2
  }), container || document.body);
};
const TOOLTIP_PADDING = "4px 8px";
const TOOLTIP_BORDER_RADIUS = "4px";
const TooltipWrapper = styled.div`
  box-sizing: border-box;
  opacity: 0;
  transition-delay: 200ms;
  transition-property: opacity;
  align-self: center;
  width: max-content;
  min-width: max-content;
  pointer-events: initial;
`;
const TooltipContainer = styled.div`
  box-sizing: border-box;
  background-color: ${({ theme }) => theme.color.background.primary};
  ${typography$1["Body/Body 2 Short"]}
  border-radius: ${TOOLTIP_BORDER_RADIUS};
  ${(props2) => props2.theme.shadow.ClickableDefault}
  padding: ${TOOLTIP_PADDING};
  max-width: min(488px, calc(100vw - 16px));
`;
const FakeTarget$2 = styled.div`
  pointer-events: none;
  height: 100%;
  width: 100%;
  flex: 0 0 auto;
`;
const Portal$2 = styled(PositionInPortal)`
  display: flex;
  flex-wrap: nowrap;
  ${({ flexDirection }) => flexDirection ? `flex-direction: ${flexDirection};` : ""}
`;
const AnchorWrapper$1 = styled.div`
  display: inline-block;
  position: relative;
  cursor: pointer;
`;
const getScrollbarSize$2 = () => {
  let scrollBarWidth = 0;
  const scrollbox = document.createElement("div");
  scrollbox.innerHTML = `Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem 
  nonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. 
  Ut wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit 
  lobortis nisl ut aliquip ex ea commodo consequat.`;
  scrollbox.style.overflow = "scroll";
  scrollbox.style.fontSize = "14px";
  scrollbox.style.height = "50px";
  scrollbox.style.maxHeight = "50px";
  scrollbox.style.width = "100px";
  scrollbox.style.position = "absolute";
  scrollbox.style.top = "-100000px";
  scrollbox.style.left = "-100000px";
  document.body.appendChild(scrollbox);
  scrollBarWidth = scrollbox.offsetWidth - scrollbox.clientWidth;
  document.body.removeChild(scrollbox);
  return scrollBarWidth;
};
const SCROLLBAR_GAP = getScrollbarSize$2() || 16;
const GAP = 8;
const POSITION_MAPPER$1 = {
  bottom: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom - SCROLLBAR_GAP > GAP + tooltipRect.height;
      const isEnoughOnLeft = anchorElementRect.left + anchorElementRect.width / 2 > tooltipRect.width / 2;
      const isEnoughOnRight = window.innerWidth - anchorElementRect.right - SCROLLBAR_GAP + anchorElementRect.width / 2 > tooltipRect.width / 2;
      return isEnoughOnBottom && isEnoughOnLeft && isEnoughOnRight;
    }
  },
  top: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnTop = anchorElementRect.top > GAP + tooltipRect.height;
      const isEnoughOnLeft = anchorElementRect.left + anchorElementRect.width / 2 > tooltipRect.width / 2;
      const isEnoughOnRight = window.innerWidth - anchorElementRect.right - SCROLLBAR_GAP + anchorElementRect.width / 2 > tooltipRect.width / 2;
      return isEnoughOnTop && isEnoughOnLeft && isEnoughOnRight;
    }
  },
  left: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnLeft = anchorElementRect.left > GAP + tooltipRect.width;
      const isEnoughOnTop = anchorElementRect.top > (tooltipRect.height - anchorElementRect.height) / 2;
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom - SCROLLBAR_GAP > (tooltipRect.height - anchorElementRect.height) / 2;
      return isEnoughOnLeft && isEnoughOnBottom && isEnoughOnTop;
    }
  },
  right: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnRight = window.innerWidth - anchorElementRect.right - SCROLLBAR_GAP > GAP + tooltipRect.width;
      const isEnoughOnTop = anchorElementRect.top > (tooltipRect.height - anchorElementRect.height) / 2;
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom - SCROLLBAR_GAP > (tooltipRect.height - anchorElementRect.height) / 2;
      return isEnoughOnRight && isEnoughOnBottom && isEnoughOnTop;
    }
  },
  bottomPageCenter: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom - SCROLLBAR_GAP > GAP + tooltipRect.height;
      const isEnoughOnCenter = window.innerWidth - SCROLLBAR_GAP >= tooltipRect.width;
      return isEnoughOnBottom && isEnoughOnCenter;
    }
  },
  topPageCenter: {
    check: (anchorElementRect, tooltipRect) => {
      const isEnoughOnTop = anchorElementRect.top > GAP + tooltipRect.height;
      const isEnoughOnCenter = window.innerWidth - SCROLLBAR_GAP >= tooltipRect.width;
      return isEnoughOnTop && isEnoughOnCenter;
    }
  }
};
function getTooltipDirection(anchorElement, tooltipElement, tooltipPosition) {
  const anchorElementRect = anchorElement.getBoundingClientRect();
  const tooltipRect = tooltipElement.getBoundingClientRect();
  const positions = Object.entries(POSITION_MAPPER$1);
  const compatiblePositions = tooltipPosition ? positions.filter((kv) => {
    return kv[0] === tooltipPosition;
  }) : positions.filter((kv) => {
    return kv[1].check(anchorElementRect, tooltipRect);
  });
  return compatiblePositions.length ? compatiblePositions[0][0] : "bottom";
}
const TOOLTIP_DELAY = 1500;
const Tooltip = ({
  renderContent,
  container: userContainer,
  withDelay,
  tooltipRef,
  tooltipPosition,
  children,
  anchorClassName,
  anchorId,
  ...props2
}) => {
  const anchorElementRef = React.useRef(null);
  const tooltipElementRef = React.useRef(null);
  const container = userContainer || document.body;
  let scrollableParents = void 0;
  let showTooltipTimer;
  const [visible, setVisible] = React.useState(false);
  const [portalFlexDirection, setPortalFlexDirection] = React.useState();
  const [portalFullWidth, setPortalFullWidth] = React.useState(false);
  const hideTooltip = () => setVisible(false);
  const manageTooltip = () => {
    if (anchorElementRef.current && tooltipElementRef.current) {
      const direction = getTooltipDirection(anchorElementRef.current, tooltipElementRef.current, tooltipPosition);
      const tooltip = tooltipElementRef.current;
      switch (direction) {
        case "topPageCenter":
          setPortalFlexDirection("column-reverse");
          setPortalFullWidth(true);
          tooltip.style.margin = "0 0 8px 0";
          break;
        case "bottomPageCenter":
          setPortalFlexDirection("column");
          setPortalFullWidth(true);
          tooltip.style.margin = "8px 0 0 0";
          break;
        case "left":
          setPortalFlexDirection("row-reverse");
          setPortalFullWidth(false);
          tooltip.style.margin = "0 8px 0 0";
          break;
        case "right":
          setPortalFlexDirection("row");
          setPortalFullWidth(false);
          tooltip.style.margin = "0 0 0 8px";
          break;
        case "top":
          setPortalFlexDirection("column-reverse");
          setPortalFullWidth(false);
          tooltip.style.margin = "0 0 8px 0";
          break;
        case "bottom":
        default:
          setPortalFlexDirection("column");
          setPortalFullWidth(false);
          tooltip.style.margin = "8px 0 0 0";
      }
    }
  };
  const attachRef = (node) => handleRef(node, tooltipRef, tooltipElementRef);
  React.useEffect(() => {
    window.addEventListener("resize", hideTooltip);
    window.addEventListener("scroll", hideTooltip);
    if (!scrollableParents && anchorElementRef.current) {
      scrollableParents = getScrollableParents(anchorElementRef.current);
      scrollableParents == null ? void 0 : scrollableParents.forEach((el) => el.addEventListener("scroll", hideTooltip));
    }
    return () => {
      clearTimeout(showTooltipTimer);
      window.removeEventListener("resize", hideTooltip);
      window.removeEventListener("scroll", hideTooltip);
      scrollableParents == null ? void 0 : scrollableParents.forEach((el) => el.removeEventListener("scroll", hideTooltip));
    };
  });
  React.useEffect(() => {
    manageTooltip();
  }, [renderContent(), anchorElementRef, tooltipPosition, container]);
  React.useEffect(() => {
    if (tooltipElementRef.current) {
      tooltipElementRef.current.style.opacity = "1";
    }
  }, [tooltipElementRef.current, visible]);
  React.useEffect(() => {
    var _a, _b;
    (_a = anchorElementRef.current) == null ? void 0 : _a.addEventListener("mouseenter", handleMouseEnter);
    (_b = anchorElementRef.current) == null ? void 0 : _b.addEventListener("mouseleave", handleMouseLeave);
    return () => {
      var _a2, _b2;
      (_a2 = anchorElementRef.current) == null ? void 0 : _a2.removeEventListener("mouseenter", handleMouseEnter);
      (_b2 = anchorElementRef.current) == null ? void 0 : _b2.removeEventListener("mouseleave", handleMouseLeave);
    };
  }, [anchorElementRef.current]);
  const handleMouseEnter = () => {
    showTooltipTimer = window.setTimeout(() => {
      setVisible(true);
      manageTooltip();
    }, withDelay ? TOOLTIP_DELAY : 0);
  };
  const handleMouseLeave = () => {
    clearTimeout(showTooltipTimer);
    hideTooltip();
  };
  return /* @__PURE__ */ React.createElement(AnchorWrapper$1, {
    onFocus: handleMouseEnter,
    onBlur: handleMouseLeave,
    ref: anchorElementRef,
    className: anchorClassName,
    id: anchorId
  }, children, visible && /* @__PURE__ */ React.createElement(Portal$2, {
    targetRef: anchorElementRef,
    container,
    flexDirection: portalFlexDirection,
    fullContainerWidth: portalFullWidth
  }, /* @__PURE__ */ React.createElement(FakeTarget$2, null), /* @__PURE__ */ React.createElement(TooltipWrapper, {
    ref: attachRef
  }, /* @__PURE__ */ React.createElement(TooltipContainer, {
    role: "tooltip",
    ...props2
  }, renderContent()))));
};
Tooltip.displayName = "Tooltip";
const Panel$2 = ({
  viewDate,
  minDate,
  maxDate,
  yearsView,
  monthsView,
  localeName,
  onYearsViewShow,
  onYearsViewHide,
  onMonthsViewShow,
  onMonthsViewHide,
  onNext,
  onPrevious
}) => {
  const previousMonthDisabled = !!minDate && differenceMonths(minDate, subMonths(viewDate, 1)) > 0;
  const nextMonthDisabled = !!maxDate && differenceMonths(addMonths(viewDate, 1), maxDate) > 0;
  const previousYearDisabled = !!minDate && differenceYears(minDate, subYears(viewDate, 1)) > 0;
  const nextYearDisabled = !!maxDate && differenceYears(addYears(viewDate, 1), maxDate) > 0;
  const previousDisabled = yearsView ? previousYearDisabled : previousMonthDisabled;
  const nextDisabled = yearsView ? nextYearDisabled : nextMonthDisabled;
  const monthMouseDownHandle = (event) => {
    event.preventDefault();
    monthsView ? onMonthsViewHide(event) : onMonthsViewShow(event);
  };
  const yearMouseDownHandle = (event) => {
    event.preventDefault();
    yearsView ? onYearsViewHide(event) : onYearsViewShow(event);
  };
  return /* @__PURE__ */ React__default.createElement(PanelComponent, {
    yearsView,
    monthsView,
    className: "ui-kit-calendar-panel-component"
  }, !monthsView && /* @__PURE__ */ React__default.createElement(Tooltip, {
    renderContent: () => yearsView ? BACK : PREVIOUS_MONTH
  }, /* @__PURE__ */ React__default.createElement(Button$8, {
    onMouseDown: onPrevious,
    disabled: previousDisabled,
    type: "left"
  })), /* @__PURE__ */ React__default.createElement(PanelDate, null, /* @__PURE__ */ React__default.createElement(Tooltip, {
    renderContent: () => monthsView ? RETURN : SELECT_MONTH
  }, /* @__PURE__ */ React__default.createElement(Month, {
    view: monthsView,
    onMouseDown: monthMouseDownHandle
  }, capitalizeFirstLetter(getFormattedValue(viewDate, { month: "long" }, localeName)))), /* @__PURE__ */ React__default.createElement(Tooltip, {
    renderContent: () => yearsView ? RETURN : SELECT_YEAR
  }, /* @__PURE__ */ React__default.createElement(Year, {
    view: yearsView,
    onMouseDown: yearMouseDownHandle
  }, viewDate.getFullYear()))), !monthsView && /* @__PURE__ */ React__default.createElement(Tooltip, {
    renderContent: () => yearsView ? FORWARD : NEXT_MONTH
  }, /* @__PURE__ */ React__default.createElement(Button$8, {
    onMouseDown: onNext,
    disabled: nextDisabled,
    type: "right"
  })));
};
const CALENDAR_WIDTH = 284;
const YEARS_VIEW_PADDING = "20px 12px 16px";
const MONTHS_VIEW_PADDING = "20px 16px 4px";
const DAYS_VIEW_PADDING = "20px 12px 12px";
const CalendarComponent = styled.div`
  position: relative;
  box-sizing: border-box;
  text-align: center;
  border: 0 none;
  z-index: 0; /* to fix range rounded corners fill */

  padding: ${({ yearsView, monthsView }) => {
  if (yearsView)
    return YEARS_VIEW_PADDING;
  if (monthsView)
    return MONTHS_VIEW_PADDING;
  return DAYS_VIEW_PADDING;
}};

  width: ${CALENDAR_WIDTH}px;
  background: ${({ theme }) => theme.color.background.primary};
  ${typography$1["Body/Body 2 Long"]}
`;
const Calendar$1 = React__default.forwardRef(({
  startDate,
  endDate,
  validator,
  minDate,
  maxDate,
  selected,
  range: range2,
  tooltipContainer,
  localeName = DEFAULT_LOCALE_NAME,
  filterDate,
  currentActiveView,
  currentActiveViewImportant,
  onChange,
  onDateIncreaseDecrease,
  onMonthSelect,
  onYearSelect,
  onViewEnter,
  onViewLeave,
  onViewMonthSelect,
  onViewYearSelect,
  ...props2
}, ref) => {
  const getInitialViewDate = () => {
    const current = new Date();
    if (selected) {
      return selected;
    } else {
      if (minDate && before(current, minDate)) {
        return minDate;
      } else if (maxDate && after(current, maxDate)) {
        return maxDate;
      }
    }
    return current;
  };
  const [viewDate, setViewDate] = useState(getInitialViewDate());
  const [activeDate, setActiveDate] = useState(null);
  const [yearsView, setYearsView] = useState(false);
  const [monthsView, setMonthsView] = useState(false);
  useEffect(() => {
    if (currentActiveView === "MONTH") {
      setYearsView(false);
      setMonthsView(true);
    }
    if (currentActiveView === "YEAR") {
      setMonthsView(false);
      setYearsView(true);
    }
    if (currentActiveView === "DAY") {
      setYearsView(false);
      setMonthsView(false);
    }
  }, [currentActiveView]);
  useEffect(() => {
    setViewDate(getInitialViewDate());
  }, [selected]);
  useEffect(() => {
    if (range2 && startDate) {
      changeYear(startDate.getFullYear());
      changeMonth(startDate.getMonth());
    }
  }, []);
  useEffect(() => {
    yearsView ? onViewEnter && onViewEnter("YEAR") : onViewLeave && onViewLeave("YEAR");
  }, [yearsView]);
  useEffect(() => {
    monthsView ? onViewEnter && onViewEnter("MONTH") : onViewLeave && onViewLeave("MONTH");
  }, [monthsView]);
  const getValidator = () => {
    return validator || getDefaultDateValidator(minDate, maxDate);
  };
  const handleYearsViewShow = () => {
    if (!currentActiveViewImportant) {
      setYearsView(true);
      setMonthsView(false);
    }
    onViewYearSelect && onViewYearSelect();
  };
  const handleYearsViewHide = () => {
    if (!currentActiveViewImportant) {
      setYearsView(false);
    }
    onViewYearSelect && onViewYearSelect();
  };
  const handleMonthsViewShow = () => {
    if (!currentActiveViewImportant) {
      setYearsView(false);
      setMonthsView(true);
    }
    onViewMonthSelect && onViewMonthSelect();
  };
  const handleMonthsViewHide = () => {
    if (!currentActiveViewImportant) {
      setMonthsView(false);
    }
    onViewMonthSelect && onViewMonthSelect();
  };
  const changeYear = (year) => setViewDate((date) => setYear(date, year));
  const changeMonth = (month) => setViewDate((date) => setMonth(date, month));
  const increaseYear = () => setViewDate((date) => {
    const increase = addYears(date, yearsView ? DEFAULT_YEAR_COUNT : 1);
    onDateIncreaseDecrease && onDateIncreaseDecrease(increase);
    return increase;
  });
  const decreaseYear = () => setViewDate((date) => {
    const decrease = subYears(date, yearsView ? DEFAULT_YEAR_COUNT : 1);
    onDateIncreaseDecrease && onDateIncreaseDecrease(decrease);
    return decrease;
  });
  const increaseMonth = () => setViewDate((date) => {
    const increase = addMonths(date, 1);
    onDateIncreaseDecrease && onDateIncreaseDecrease(increase);
    return increase;
  });
  const decreaseMonth = () => setViewDate((date) => {
    const decrease = subMonths(date, 1);
    onDateIncreaseDecrease && onDateIncreaseDecrease(decrease);
    return decrease;
  });
  const handleDayMouseEnter = (day, _) => setActiveDate(day);
  const handleMonthMouseLeave = () => setActiveDate(null);
  const handleDayClick = (day, event) => {
    let date = day;
    if (range2 || !equal(selected, date)) {
      date = changeTime(date, selected);
      if (range2) {
        if (!startDate && !endDate) {
          onChange([date, null], event);
        } else if (startDate && !endDate) {
          if (before(date, startDate)) {
            onChange([date, null], event);
          } else {
            onChange([startDate, date], event);
          }
        } else if (!startDate && endDate) {
          if (before(date, endDate)) {
            onChange([date, endDate], event);
          } else {
            onChange([date, null], event);
          }
        }
        if (startDate && endDate) {
          onChange([date, null], event);
        }
      } else {
        onChange(date, event);
      }
    }
  };
  const handleYearClick = (date) => {
    changeYear(date.getFullYear());
    !currentActiveViewImportant && setYearsView(false);
    onYearSelect && onYearSelect(date);
  };
  const handleMonthClick = (date) => {
    changeMonth(date.getMonth());
    !currentActiveViewImportant && setMonthsView(false);
    onMonthSelect && onMonthSelect(date);
  };
  const renderPanel = () => /* @__PURE__ */ React__default.createElement(Panel$2, {
    viewDate,
    minDate,
    maxDate,
    yearsView,
    monthsView,
    localeName,
    onYearsViewShow: handleYearsViewShow,
    onYearsViewHide: handleYearsViewHide,
    onMonthsViewShow: handleMonthsViewShow,
    onMonthsViewHide: handleMonthsViewHide,
    onNext: yearsView ? increaseYear : increaseMonth,
    onPrevious: yearsView ? decreaseYear : decreaseMonth,
    tooltipContainer
  });
  const renderMonth = () => /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(DayNames, {
    date: viewDate,
    localeName
  }), /* @__PURE__ */ React__default.createElement(Month$1, {
    day: viewDate,
    startDate,
    endDate,
    selected,
    activeDate,
    range: range2,
    localeName,
    validator: getValidator(),
    filterDate,
    onMouseEnter: handleDayMouseEnter,
    onMouseLeave: handleMonthMouseLeave,
    onClick: handleDayClick
  }));
  const renderMonths = () => /* @__PURE__ */ React__default.createElement(Months, {
    viewDate,
    startDate,
    endDate,
    selected,
    localeName,
    range: range2,
    validator: getValidator(),
    onClick: handleMonthClick
  });
  const renderYears = () => /* @__PURE__ */ React__default.createElement(Years, {
    viewDate,
    startDate,
    endDate,
    selected,
    localeName,
    range: range2,
    validator: getValidator(),
    onClick: handleYearClick
  });
  return /* @__PURE__ */ React__default.createElement(CalendarComponent, {
    yearsView,
    monthsView,
    ...props2,
    ref
  }, renderPanel(), yearsView && renderYears(), monthsView && renderMonths(), !yearsView && !monthsView && renderMonth());
});
Calendar$1.defaultProps = {
  localeName: DEFAULT_LOCALE_NAME
};
Calendar$1.displayName = "Calendar";
const DIMENSION_M = "20px";
const DIMENSION_S = "18px";
const BORDER_WIDTH_DEFAULT = "1px";
const BORDER_WIDTH_CHECKED = "6px";
const TEXT_PADDING_M = "10px";
const TEXT_PADDING_S = "9px";
const Span = styled.span`
  display: inline-block;
  position: absolute;
  margin: 0;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  content: '';
  box-sizing: border-box;
  ${({ theme, dimension }) => `
    background-color: ${theme.color.background.primary};
    width: ${dimension === "s" ? DIMENSION_S : DIMENSION_M};
    height: ${dimension === "s" ? DIMENSION_S : DIMENSION_M};
  `}
  fieldset[data-dimension='s'] & {
    width: ${DIMENSION_S};
    height: ${DIMENSION_S};
  }
  border: ${BORDER_WIDTH_DEFAULT} solid
    ${({ theme, disabled }) => disabled ? theme.color.basic.disable : theme.color.text.secondary};
  fieldset:disabled & {
    border: ${BORDER_WIDTH_DEFAULT} solid ${({ theme }) => theme.color.basic.disable};
  }
  border-radius: 50%;
  transition: all 0.25s ease-in-out;
`;
const InputContainer = styled.div`
  position: relative;
  display: inline-block;
  ${({ dimension }) => `
    min-width: ${dimension === "s" ? DIMENSION_S : DIMENSION_M};
    height: ${dimension === "s" ? DIMENSION_S : DIMENSION_M};
  `}
  fieldset[data-dimension='s'] & {
    min-width: ${DIMENSION_S};
    height: ${DIMENSION_S};
  }
`;
const Input$7 = styled.input`
  opacity: 0;
  width: 0;
  height: 0;

  &:checked:disabled + ${Span} {
    border: ${BORDER_WIDTH_CHECKED} solid ${({ theme }) => theme.color.basic.disable};
  }

  &:checked:not(disabled) + ${Span} {
    border: ${BORDER_WIDTH_CHECKED} solid ${({ theme }) => theme.color.basic.primary};
  }

  &:checked:not(:disabled) {
    &:focus + ${Span}, &:hover + ${Span} {
      ${({ theme }) => `
          background-color: ${theme.color.background.primary};
          border: ${BORDER_WIDTH_CHECKED} solid ${theme.color.basic.hover};
        `}
    }
  }

  &:not(checked):not(:disabled) {
    &:focus + ${Span}, &:hover + ${Span} {
      ${({ theme }) => `
          background-color: ${theme.color.background.secondary};
          border: ${BORDER_WIDTH_DEFAULT} solid ${theme.color.basic.primary};
        `}
    }
  }
`;
const Label$4 = styled.span`
  display: inline-flex;
  flex-direction: column;
  box-sizing: content-box;
  ${({ dimension }) => dimension === "s" ? typography$1["Body/Body 2 Short"] : typography$1["Body/Body 1 Short"]}
  padding-left: ${({ dimension }) => dimension === "s" ? TEXT_PADDING_S : TEXT_PADDING_M};
  color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.basic.secondary};

  fieldset[data-dimension='s'] && {
    ${typography$1["Body/Body 2 Short"]}
    padding-left: ${TEXT_PADDING_S};
    color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.basic.secondary};
  }
  fieldset:disabled && {
    color: ${({ theme }) => theme.color.text.tertiary};
  }
  margin: auto 0;
  user-select: none;
`;
const Hint$2 = styled.span`
  margin-top: 6px;
  ${({ dimension }) => dimension === "s" ? typography$1["Caption/Caption 1"] : typography$1["Body/Body 2 Short"]}
  color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.text.secondary};

  fieldset[data-dimension='s'] && {
    ${typography$1["Caption/Caption 1"]}
    color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.text.secondary};
  }
`;
const RadioButtonComponent = styled.label`
  margin: 0;
  padding: 0;
  display: inline-flex;
  align-items: flex-start;
  box-sizing: content-box;
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};
  fieldset:disabled & {
    cursor: default;
  }
`;
const RadioButton = React.forwardRef(({ children, disabled, dimension = "m", extraText, className, ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(RadioButtonComponent, {
    disabled,
    className
  }, /* @__PURE__ */ React.createElement(InputContainer, {
    dimension
  }, /* @__PURE__ */ React.createElement(Input$7, {
    ref,
    type: "radio",
    disabled,
    ...props2
  }), /* @__PURE__ */ React.createElement(Span, {
    disabled,
    dimension
  })), /* @__PURE__ */ React.createElement(Label$4, {
    disabled,
    dimension
  }, children, extraText && /* @__PURE__ */ React.createElement(Hint$2, {
    disabled,
    dimension
  }, extraText)));
});
RadioButton.displayName = "RadioButton";
const styleDisabledMixin = css`
  color: ${({ theme }) => theme.color.text.tertiary};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.tertiary};
  }
  user-select: none;
`;
const styleColorMixin = css`
  color: ${({ theme, appearance }) => appearance === "secondary" ? theme.color.text.primary : theme.color.basic.primary};
  & *[fill^='#'] {
    fill: ${({ theme, appearance }) => appearance === "secondary" ? theme.color.text.secondary : theme.color.basic.primary};
  }
`;
const styleMixin = css`
  &:hover {
    color: ${({ theme }) => theme.color.basic.hover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }
  &:focus {
    color: ${({ theme }) => theme.color.basic.hover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
    outline-color: ${({ theme }) => theme.color.basic.hover};
  }
  &:active {
    color: ${({ theme }) => theme.color.basic.press};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }
`;
const styleTextMixin$2 = css`
  font-size: ${({ dimension }) => dimension === "m" ? 16 : 14}px;
  font-weight: normal;
  line-height: ${({ dimension }) => dimension === "m" ? 24 : 20}px;
  font-family: ${TYPOGRAPHY.fontFamily};
`;
const LinkCssMixin = css`
  cursor: ${(props2) => props2.disabled ? "default" : "pointer"};
  display: flex;
  pointer-events: ${(props2) => props2.disabled ? "none" : "auto"};
  align-items: center;
  width: fit-content;
  text-decoration: none;
  position: relative;
  ${styleMixin};
  ${styleColorMixin};
  ${styleTextMixin$2};
  ${(props2) => props2.disabled ? styleDisabledMixin : ""}
`;
const LinkComponent = styled.a`
  ${LinkCssMixin}
`;
const Link = React.forwardRef(({ disabled = false, appearance = "primary", dimension = "m", ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(LinkComponent, {
    dimension,
    ref,
    tabIndex: disabled ? -1 : props2.tabIndex,
    disabled,
    appearance,
    ...props2
  });
});
Link.displayName = "Link";
const primaryAppearanceMixin = css`
  background-color: ${({ theme }) => theme.color.basic.primary};
  color: ${({ theme }) => theme.color.text.staticWhite};
  border: 2px solid ${({ theme }) => theme.color.basic.primary};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }

  :focus,
  :hover {
    background-color: ${({ theme }) => theme.color.basic.hover};
    border-color: ${({ theme }) => theme.color.basic.hover};
  }

  :active {
    background-color: ${({ theme }) => theme.color.basic.press};
    border-color: ${({ theme }) => theme.color.basic.press};
  }

  &[data-appearance~='disabled'],
  :disabled {
    background-color: ${({ theme }) => theme.color.basic.disable};
    color: ${({ theme }) => theme.color.text.inversion};
    border-color: ${({ theme }) => theme.color.basic.disable};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.inversion};
    }
  }
`;
const secondaryAppearanceMixin = css`
  background-color: transparent;
  color: ${({ theme }) => theme.color.basic.primary};
  border: 2px solid ${({ theme }) => theme.color.basic.primary};

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.primary};
  }

  &:focus,
  &:hover {
    background-color: ${({ theme }) => theme.color.background.secondary};
    color: ${({ theme }) => theme.color.basic.hover};
    border-color: ${({ theme }) => theme.color.basic.hover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:active {
    background-color: ${({ theme }) => theme.color.background.secondary};
    color: ${({ theme }) => theme.color.basic.press};
    border-color: ${({ theme }) => theme.color.basic.press};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }

  &[data-appearance~='disabled'],
  &:disabled {
    background-color: ${({ theme }) => theme.color.background.primary};
    color: ${({ theme }) => theme.color.text.tertiary};
    border-color: ${({ theme }) => theme.color.text.tertiary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const ghostAppearanceMixin = css`
  background-color: transparent;
  color: ${({ theme }) => theme.color.basic.primary};
  border: 2px solid transparent;

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.primary};
  }

  &:focus,
  &:hover {
    background-color: ${({ theme }) => theme.color.background.secondary};
    color: ${({ theme }) => theme.color.basic.hover};
    border-color: ${({ theme }) => theme.color.background.secondary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:active {
    background-color: ${({ theme }) => theme.color.background.secondary};
    color: ${({ theme }) => theme.color.basic.press};
    border-color: ${({ theme }) => theme.color.background.secondary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }

  &[data-appearance~='disabled'],
  &:disabled {
    background-color: transparent;
    color: ${({ theme }) => theme.color.text.tertiary};
    border-color: transparent;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const whiteAppearanceMixin = css`
  background-color: transparent;
  color: ${({ theme }) => theme.color.text.staticWhite};
  border: 2px solid ${({ theme }) => theme.color.text.staticWhite};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }

  &[data-appearance~='disabled'],
  &:disabled {
    border-color: ${({ theme }) => theme.color.basic.tertiary};
    color: ${({ theme }) => theme.color.basic.tertiary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.tertiary};
    }
  }
`;
const dangerAppearanceMixin = css`
  background-color: ${({ theme }) => theme.color.status.danger};
  color: ${({ theme }) => theme.color.text.staticWhite};
  border: 2px solid ${({ theme }) => theme.color.status.danger};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }

  &:focus,
  &:hover {
    background-color: ${({ theme }) => theme.color.status.hoverDanger};
    border-color: ${({ theme }) => theme.color.status.hoverDanger};
  }

  &:active {
    background-color: ${({ theme }) => theme.color.status.pressDanger};
    border-color: ${({ theme }) => theme.color.status.pressDanger};
  }

  &[data-appearance~='disabled'],
  &:disabled {
    background-color: ${({ theme }) => theme.color.basic.disable};
    color: ${({ theme }) => theme.color.text.inversion};
    border-color: ${({ theme }) => theme.color.basic.disable};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.inversion};
    }
  }
`;
const successAppearanceMixin = css`
  background-color: ${({ theme }) => theme.color.status.success};
  color: ${({ theme }) => theme.color.text.staticWhite};
  border: 2px solid ${({ theme }) => theme.color.status.success};

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }

  &:focus,
  &:hover {
    background-color: ${({ theme }) => theme.color.status.hoverSuccess};
    border-color: ${({ theme }) => theme.color.status.hoverSuccess};
  }

  &:active {
    background-color: ${({ theme }) => theme.color.status.pressSuccess};
    border-color: ${({ theme }) => theme.color.status.pressSuccess};
  }

  &[data-appearance~='disabled'],
  :disabled {
    background-color: ${({ theme }) => theme.color.basic.disable};
    color: ${({ theme }) => theme.color.text.inversion};
    border-color: ${({ theme }) => theme.color.basic.disable};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.inversion};
    }
  }
`;
const appearanceMixin = css`
  &[data-appearance~='primary'] {
    ${primaryAppearanceMixin}
  }
  &[data-appearance~='secondary'] {
    ${secondaryAppearanceMixin}
  }
  &[data-appearance~='ghost'] {
    ${ghostAppearanceMixin}
  }
  &[data-appearance~='white'] {
    ${whiteAppearanceMixin}
  }
  &[data-appearance~='danger'] {
    ${dangerAppearanceMixin}
  }
  &[data-appearance~='success'] {
    ${successAppearanceMixin}
  }
`;
const defaultDimensionMixin = css`
  padding: 0;
  height: 56px;
  ${(props2) => props2.displayAsSquare ? "width: 56px;" : "padding: 0 30px;"}

  ${typography$1["Button/Button 1"]}
`;
const dimensionMixin = css`
  ${defaultDimensionMixin}

  &[data-dimension='xl'] {
    ${defaultDimensionMixin}
  }

  &[data-dimension='l'] {
    height: 48px;
    ${(props2) => props2.displayAsSquare ? "width: 48px;" : "padding: 0 22px;"}
  }

  &[data-dimension='m'] {
    height: 40px;
    ${(props2) => props2.displayAsSquare ? "width: 40px;" : "padding: 0 18px;"}
  }

  &[data-dimension='s'] {
    height: 32px;
    ${(props2) => props2.displayAsSquare ? "width: 32px;" : "padding: 0 14px;"}
    ${typography$1["Button/Button 2"]}
  }
`;
const DEFAULT_THEME = LIGHT_THEME;
var _path$7;
function _extends$8() {
  _extends$8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$8.apply(this, arguments);
}
function SvgSubtractXl(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$8({
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$7 || (_path$7 = /* @__PURE__ */ React.createElement("path", {
    clipRule: "evenodd",
    d: "M58.607 49.778a32 32 0 005.252-14.782C64.016 33.346 62.657 32 61 32s-2.982 1.349-3.17 2.995C56.343 47.944 45.346 58 32 58 17.64 58 6 46.36 6 32 6 18.654 16.056 7.656 29.005 6.17 30.651 5.983 32 4.658 32 3S30.654-.015 29.004.14a32 32 0 1029.603 49.638z"
  })));
}
var _path$6;
function _extends$7() {
  _extends$7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$7.apply(this, arguments);
}
function SvgSubtractL(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$7({
    viewBox: "0 0 48 48",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$6 || (_path$6 = /* @__PURE__ */ React.createElement("path", {
    clipRule: "evenodd",
    d: "M43.955 37.334a24.001 24.001 0 003.915-10.838C48.014 25.122 46.88 24 45.5 24c-1.38 0-2.483 1.125-2.662 2.494C41.616 35.81 33.648 43 24 43 13.507 43 5 34.493 5 24c0-9.648 7.191-17.616 16.506-18.838C22.875 4.982 24 3.881 24 2.5c0-1.38-1.122-2.513-2.496-2.37a24 24 0 1022.451 37.204z"
  })));
}
var _path$5;
function _extends$6() {
  _extends$6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$6.apply(this, arguments);
}
function SvgSubtractM(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$6({
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$5 || (_path$5 = /* @__PURE__ */ React.createElement("path", {
    clipRule: "evenodd",
    d: "M21.978 18.667a12 12 0 001.928-5.17C24.01 12.673 23.328 12 22.5 12s-1.487.677-1.623 1.494C20.165 17.754 16.462 21 12 21a9 9 0 01-1.494-17.877C11.323 2.987 12 2.328 12 1.5S11.326-.01 10.504.094a12 12 0 1011.474 18.573z"
  })));
}
var _path$4;
function _extends$5() {
  _extends$5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$5.apply(this, arguments);
}
function SvgSubtractS(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$5({
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$4 || (_path$4 = /* @__PURE__ */ React.createElement("path", {
    clipRule: "evenodd",
    d: "M14.652 12.445a8 8 0 001.286-3.448C16.006 8.45 15.552 8 15 8c-.552 0-.991.451-1.082.996A6.002 6.002 0 012 8a6.002 6.002 0 015.004-5.918C7.55 1.992 8 1.552 8 1S7.55-.006 7.003.062a8 8 0 107.649 12.383z"
  })));
}
const getIcon$3 = (dimension) => {
  switch (dimension) {
    case "s":
      return SvgSubtractS;
    case "m":
      return SvgSubtractM;
    case "xl":
      return SvgSubtractXl;
    case "l":
    default:
      return SvgSubtractL;
  }
};
const sizes$3 = css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "s":
      return "16px";
    case "m":
      return "24px";
    case "xl":
      return "64px";
    case "l":
    default:
      return "48px";
  }
}};
  height: ${({ dimension }) => {
  switch (dimension) {
    case "s":
      return "16px";
    case "m":
      return "24px";
    case "xl":
      return "64px";
    case "l":
    default:
      return "48px";
  }
}};
`;
const spin = keyframes`
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
`;
const SpinnerWrapper = styled.div`
  position: relative;

  ${sizes$3};

  & svg {
    animation: ${spin} 1s linear infinite;
    path {
      fill: ${({ inverse, theme }) => inverse ? theme.color.background.primary : theme.color.basic.primary};
    }
  }
`;
SpinnerWrapper.defaultProps = {
  theme: DEFAULT_THEME
};
const Spinner = ({ dimension = "m", inverse = false, ...props2 }) => {
  const SpinnerIcon = getIcon$3(dimension);
  return /* @__PURE__ */ React__default.createElement(SpinnerWrapper, {
    inverse,
    dimension,
    role: "alert",
    "aria-live": "assertive",
    ...props2
  }, /* @__PURE__ */ React__default.createElement(SpinnerIcon, null));
};
Spinner.displayName = "Spinner";
const ButtonContent$3 = styled.span`
  vertical-align: top;

  display: inline-flex;
  flex-direction: row;
  overflow: hidden;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
  height: 24px;

  > * {
    display: inline-block;
    flex: 0 1 auto;
    white-space: nowrap;
  }

  > *:not(:first-child) {
    margin-left: 8px;
  }

  & > svg {
    width: 24px;
    height: 24px;
  }

  [data-dimension='s'] & {
    height: 20px;

    & > svg {
      width: 20px;
      height: 20px;
    }
  }
`;
const StyledButton$2 = styled.button.attrs((props2) => ({
  "data-dimension": props2.dimension,
  "data-appearance": [props2.appearance, props2.displayAsDisabled || props2.$loading ? "disabled" : void 0].filter((val) => val !== void 0).join(" ")
}))`
  position: relative;
  box-sizing: border-box;
  display: inline-block;
  border: none;
  border-radius: 4px;
  appearance: none;
  vertical-align: center;

  ${dimensionMixin}

  ${appearanceMixin};

  ${ButtonContent$3} {
    visibility: ${(p) => p.$loading ? "hidden" : "visible"};
  }

  &:hover {
    cursor: pointer;
  }

  pointer-events: ${(p) => p.$loading || p.disabled ? "none" : "all"};
`;
const StyledSpinner$2 = styled(Spinner)`
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
`;
const Button$7 = React.forwardRef(({ appearance = "primary", dimension = "xl", type = "button", loading = false, children, ...props2 }, ref) => {
  const spinnerDimension = dimension === "s" ? "s" : "m";
  return /* @__PURE__ */ React.createElement(StyledButton$2, {
    ref,
    appearance,
    dimension,
    type,
    $loading: loading,
    ...props2
  }, loading && /* @__PURE__ */ React.createElement(StyledSpinner$2, {
    dimension: spinnerDimension
  }), /* @__PURE__ */ React.createElement(ButtonContent$3, null, React.Children.toArray(children).map((child) => typeof child === "string" ? /* @__PURE__ */ React.createElement("span", {
    key: uid()
  }, child) : child)));
});
Button$7.displayName = "Button";
const colorMixin = css`
  color: ${({ active, disabled, theme }) => {
  if (active)
    return theme.color.text.primary;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.text.secondary;
}};
  [data-appearance~='primary'] && {
    color: ${({ active, disabled, theme }) => {
  if (active)
    return theme.color.text.staticWhite;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.basic.primary;
}};
  }
`;
const BORDER_RADIUS$2 = 22;
const ButtonGroupItem = styled.button`
  border: none;
  border-radius: ${BORDER_RADIUS$2}px;
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};
  display: flex;
  align-items: center;
  position: relative;
  outline: 0;
  background-color: ${({ theme, disabled, active }) => active && !disabled ? theme.color.background.primary : "transparent"};

  ${typography$1["Button/Button 1"]};
  white-space: nowrap;

  ${colorMixin};

  &:hover:not(:disabled) {
    background: ${({ active, disabled, theme }) => !active && !disabled ? theme.color.background.tertiaryHover : ""};
    color: ${(p) => p.theme.color.text.secondary};
  }

  & *[fill^='#'] {
    fill: ${({ disabled, theme }) => {
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.text.secondary;
}};
  }

  [data-appearance~='primary'] && *[fill^='#'] {
    fill: ${({ active, disabled, theme }) => {
  if (active)
    return theme.color.text.staticWhite;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.basic.primary;
}};
  }

  & ${BadgeComponent} {
    background-color: ${(p) => p.active ? p.theme.color.text.secondary : p.theme.color.background.primary};
    color: ${(p) => p.active ? p.theme.color.text.staticWhite : p.theme.color.text.secondary};
  }

  [data-appearance~='primary'] && ${BadgeComponent} {
    background-color: ${({ active, disabled, theme }) => {
  if (active)
    return theme.color.text.staticWhite;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.basic.primary;
}};
    color: ${({ theme, disabled, active }) => active && !disabled ? theme.color.basic.primary : theme.color.text.staticWhite};
  }

  [data-appearance~='primary'] && {
    background-color: ${({ theme, disabled, active }) => active && !disabled ? theme.color.basic.primary : "transparent"};
    &:hover:not(:disabled) {
      background: ${({ active, disabled, theme }) => !active && !disabled ? theme.color.background.secondary : ""};
      color: ${(p) => !p.active ? p.theme.color.basic.hover : p.theme.color.text.staticWhite};
    }
  }
`;
ButtonGroupItem.defaultProps = {
  type: "button"
};
const SIZE = {
  l: 40,
  m: 32,
  s: 24
};
const BORDER_RADIUS$1 = {
  l: 24,
  m: 20,
  s: 16
};
const padding = {
  l: 20,
  m: 16,
  s: 12
};
const ButtonGroupComponent = styled.div`
  background: ${({ theme }) => theme.color.background.tertiary};
  border: 2px solid ${(p) => p.theme.color.background.tertiary};
  border-radius: ${({ dimension }) => BORDER_RADIUS$1[dimension]}px;
  display: inline-flex;
  height: ${({ dimension }) => SIZE[dimension]}px;
  padding: 2px;

  &[data-appearance~='primary'] {
    border: 2px solid ${(p) => p.theme.color.basic.primary};
    background-color: transparent;
  }

  ${ButtonGroupItem} {
    height: 100%;
    padding: ${({ dimension }) => `0 ${padding[dimension]}px`};
    font-size: ${({ dimension }) => dimension === "l" ? 16 : 14}px;
    line-height: ${({ dimension }) => dimension === "l" ? 24 : 20}px;
  }

  > *:not(:first-child) {
    margin-left: 8px;
  }
`;
const moveFocus$1 = (parent, currentFocus, calcNextFocus) => {
  let wrappedOnce = false;
  let nextFocus = calcNextFocus(parent, currentFocus);
  while (nextFocus) {
    if (nextFocus === (parent == null ? void 0 : parent.firstChild)) {
      if (wrappedOnce) {
        return;
      }
      wrappedOnce = true;
    }
    if (nextFocus.hasAttribute("disabled")) {
      nextFocus = calcNextFocus(parent, nextFocus);
    } else {
      nextFocus.focus();
      return;
    }
  }
};
const nextItem$1 = (parent, child) => {
  if (child == null ? void 0 : child.nextElementSibling) {
    return child.nextElementSibling;
  }
  return parent == null ? void 0 : parent.firstChild;
};
const previousItem$1 = (parent, child) => {
  if (child == null ? void 0 : child.previousElementSibling) {
    return child.previousElementSibling;
  }
  return parent == null ? void 0 : parent.lastChild;
};
const ButtonGroup = ({
  dimension = "l",
  tabIndex = -1,
  appearance = "secondary",
  ...props2
}) => {
  const localRef = useRef(null);
  const getFocusedOption = () => {
    return (localRef.current && localRef.current.ownerDocument || document).activeElement;
  };
  const handleKeyDown = (e) => {
    var _a;
    const focusedOption = getFocusedOption();
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.ArrowRight) {
      moveFocus$1(localRef.current, focusedOption, nextItem$1);
    } else if (code === keyboardKey.ArrowLeft) {
      moveFocus$1(localRef.current, focusedOption, previousItem$1);
    }
    (_a = props2 == null ? void 0 : props2.onKeyDown) == null ? void 0 : _a.call(props2, e);
  };
  return /* @__PURE__ */ React__default.createElement(ButtonGroupComponent, {
    ref: localRef,
    onKeyDown: handleKeyDown,
    dimension,
    tabIndex,
    "data-appearance": appearance,
    ...props2
  });
};
ButtonGroup.displayName = "ButtonGroup";
var _path$3;
function _extends$4() {
  _extends$4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
function SvgSuccess(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$4({
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$3 || (_path$3 = /* @__PURE__ */ React.createElement("path", {
    d: "M13.471 5.805a.667.667 0 10-.942-.943L7 10.39 4.138 7.53a.667.667 0 00-.943.942l3.334 3.334c.26.26.682.26.942 0l6-6z",
    fill: "#fff"
  })));
}
var _rect;
function _extends$3() {
  _extends$3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
function SvgMinus(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$3({
    viewBox: "-5 -9 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _rect || (_rect = /* @__PURE__ */ React.createElement("rect", {
    width: 10,
    height: 2,
    rx: 1,
    fill: "#fff"
  })));
}
const width$2 = css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};

  fieldset[data-dimension='s'] & {
    width: 16px;
  }
`;
const height$1 = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};
  fieldset[data-dimension='s'] & {
    height: 16px;
  }
`;
const Check = styled(SvgSuccess)`
  pointer-events: none;
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }
`;
const Indeterminate = styled(SvgMinus)`
  pointer-events: none;
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.staticWhite};
  }
`;
const Container$9 = styled.div`
  position: relative;
  box-sizing: border-box;

  overflow: visible;
  ${width$2};
  ${height$1};
`;
const Background = styled.div`
  pointer-events: none;
  display: inline-block;
  position: absolute;
  margin: 0;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 4px;
  outline: 0;
  transition: background 0.1s ease-in;

  /* disable inheritance from parent elements */
  line-height: initial;
  background-color: ${({ theme }) => theme.color.background.primary};
  border: 1px solid ${({ error, theme }) => error ? theme.color.status.danger : theme.color.text.secondary};
`;
const Input$6 = styled.input`
  appearance: none;
  ::-ms-check {
    display: none;
  }
  width: calc(100% + 2px);
  height: calc(100% + 2px);

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  box-sizing: border-box;
  cursor: pointer;
  border-radius: 5px;
  margin: 0;
  padding: 0;

  :disabled {
    pointer-events: none;
  }

  &:checked + ${Background} {
    background-color: ${({ theme }) => theme.color.basic.primary};
    border: none;
  }

  &:not(:checked) + ${Background} {
    background-color: ${({ theme, indeterminate }) => indeterminate && theme.color.basic.primary};
    border: ${({ indeterminate }) => indeterminate && "none"};
    > * {
      display: ${(p) => p.indeterminate ? "block" : "none"};
    }
  }

  &:not(:checked):focus + ${Background}, &:not(:disabled):not(:checked):hover + ${Background} {
    background-color: ${({ theme, indeterminate }) => indeterminate ? theme.color.basic.hover : theme.color.background.secondary};
    border: ${(p) => p.indeterminate ? "none" : `1px solid ${p.theme.color.basic.hover}`};
  }

  &:checked:focus + ${Background}, &:not(:disabled):checked:hover + ${Background} {
    background-color: ${({ theme }) => theme.color.basic.hover};
    border: none;
  }

  &:not(:checked):disabled + ${Background} {
    background-color: ${({ theme }) => theme.color.background.primary};
    border: 1px solid ${({ theme }) => theme.color.basic.disable};
  }

  &:disabled + ${Background} {
    background-color: ${({ theme }) => theme.color.basic.disable};
    border: none;
  }

  &:focus-visible {
    outline-offset: 2px;
    outline: ${(p) => p.theme.color.basic.hover} solid 2px;
  }
`;
const Checkbox = React.forwardRef(({ className, dimension = "m", ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(Container$9, {
    dimension,
    className
  }, /* @__PURE__ */ React.createElement(Input$6, {
    ref,
    ...props2,
    type: "checkbox",
    indeterminate: props2.indeterminate
  }), /* @__PURE__ */ React.createElement(Background, {
    error: props2.error
  }, props2.indeterminate ? /* @__PURE__ */ React.createElement(Indeterminate, {
    "aria-hidden": "true",
    focusable: "false"
  }) : /* @__PURE__ */ React.createElement(Check, {
    "aria-hidden": "true",
    focusable: "false"
  })));
});
Checkbox.displayName = "Checkbox";
function refSetter(...refs) {
  return (ref) => {
    refs.forEach((someRef) => {
      if (!someRef)
        return;
      if (typeof someRef === "function") {
        someRef(ref);
      } else {
        someRef.current = ref;
      }
    });
  };
}
const Container$8 = styled.div`
  white-space: nowrap;
  ${typography$1["Body/Body 2 Long"]}
  color: ${(p) => p.error ? p.theme.color.status.danger : p.theme.color.text.secondary};
  transition: all 0.5s, color 0.5s;
  opacity: ${(p) => p.transparent && !p.error ? 0 : 1};
  max-width: ${(p) => p.transparent && !p.error ? 0 : "none"};
  overflow: hidden;
`;
const CharacterCounter = ({
  maxLength,
  inputRef,
  ...props2
}) => {
  const [currentCount, setCurrentCount] = React.useState(0);
  React.useEffect(() => {
    function oninput() {
      const { value } = this;
      setCurrentCount(value.length);
    }
    const node = inputRef.current;
    if (node) {
      node.addEventListener("input", oninput);
      oninput.call(node);
      return () => {
        node.removeEventListener("input", oninput);
      };
    }
  }, [inputRef.current]);
  return currentCount > maxLength * 0.8 ? /* @__PURE__ */ React.createElement(Container$8, {
    ...props2,
    error: currentCount >= maxLength,
    transparent: currentCount < maxLength * 0.8
  }, currentCount, "/", maxLength) : null;
};
const Label$3 = styled.label`
  text-align: left;
  font-family: ${() => TYPOGRAPHY.fontFamily};
  font-style: normal;
  font-weight: normal;
  font-size: 14px;
  line-height: 16px;
  color: ${(props2) => props2.theme.color.text.secondary};

  [data-disabled] & {
    color: ${(props2) => props2.theme.color.text.tertiary};
  }

  [data-focus-within] & {
    color: ${(props2) => props2.disabled ? "" : props2.theme.color.basic.press};
  }
  [data-required-within] &:before {
    content: '* ';
    color: ${(props2) => props2.theme.color.status.danger};
  }
  margin-bottom: 8px;
`;
Label$3.displayName = "Label";
const inlineMixin = css`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;

  > * {
    flex: 1 1 auto;
  }

  ${Label$3} {
    margin: 0 8px 0 0;
  }
`;
const Container$7 = styled.div`
  display: flex;
  ${(props2) => props2.displayInline ? inlineMixin : "flex-direction: column;"}
`;
const ExtrasContainer$1 = styled.div`
  display: flex;
  justify-content: space-between;
`;
const ExtraTextContainer = styled.div`
  flex: 1 1 auto;

  padding-top: 8px;

  text-align: left;

  ${typography$1["Body/Body 2 Long"]}

  color: ${(props2) => props2.theme.color.text.secondary};

  [data-disabled] & {
    color: ${(props2) => props2.theme.color.text.tertiary};
  }

  [data-status='error'] & {
    color: ${(props2) => props2.theme.color.status.danger};
  }

  [data-status='success'] & {
    color: ${(props2) => props2.theme.color.status.success};
  }
`;
const PositionedCharacterCounter = styled(CharacterCounter)`
  flex: 0 0 auto;
  padding: 8px 0 0 8px;
`;
const Field = React.forwardRef(({ children, maxLength, inputRef, displayCharacterCounter = true, ...props2 }, ref) => {
  const containerRef = React.useRef(null);
  const [hasFocus, setFocus] = React.useState(false);
  const {
    className,
    style,
    displayInline,
    status,
    extraText,
    label,
    required,
    disabled,
    id = uid(),
    ...restFieldProps
  } = props2;
  const fieldContainerProps = { className, style, displayInline, ...restFieldProps };
  const labelProps = { htmlFor: id, children: label, required, disabled };
  React.useEffect(() => {
    const onFocusIn = (ev) => {
      setFocus(true);
    };
    const onFocusOut = (ev) => {
      setFocus(false);
    };
    const containerNode = containerRef.current;
    if (containerNode) {
      containerNode.addEventListener("focusin", onFocusIn);
      containerNode.addEventListener("focusout", onFocusOut);
    }
    return () => {
      if (containerNode) {
        containerNode.removeEventListener("focusin", onFocusIn);
        containerNode.removeEventListener("focusout", onFocusOut);
      }
    };
  }, [containerRef.current]);
  return /* @__PURE__ */ React.createElement(Container$7, {
    ...fieldContainerProps,
    "data-status": status,
    "data-focus-within": hasFocus ? "" : void 0,
    "data-required-within": required ? "" : void 0,
    "data-disabled": disabled ? "" : void 0,
    ref: refSetter(containerRef, ref)
  }, labelProps.children && /* @__PURE__ */ React.createElement(Label$3, {
    ...labelProps
  }), /* @__PURE__ */ React.createElement("div", null, children, /* @__PURE__ */ React.createElement(ExtrasContainer$1, null, extraText && /* @__PURE__ */ React.createElement(ExtraTextContainer, null, extraText), displayCharacterCounter && inputRef && maxLength !== void 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", null), /* @__PURE__ */ React.createElement(PositionedCharacterCounter, {
    maxLength,
    inputRef
  })))));
});
Field.displayName = "Field";
function isInputDataDifferent(data1, data2) {
  return data1.value !== data2.value || data1.selectionStart !== data2.selectionStart || data1.selectionEnd !== data2.selectionEnd;
}
function changeInputData(input, toChangeData) {
  var _a;
  const { value = input.value, selectionStart, selectionEnd } = toChangeData;
  if (isInputDataDifferent(input, { value, selectionStart, selectionEnd })) {
    const nativeInputValueSetter = (_a = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(input), "value")) == null ? void 0 : _a.set;
    nativeInputValueSetter == null ? void 0 : nativeInputValueSetter.call(input, value);
    if (typeof selectionStart === "number" && typeof selectionEnd === "number") {
      input.setSelectionRange(selectionStart, selectionEnd);
    }
    let event;
    if (typeof Event === "function") {
      event = new Event("input", { bubbles: true });
    } else {
      event = document.createEvent("Event");
      event.initEvent("input", true, true);
    }
    input.dispatchEvent(event);
  }
}
const containerHeights = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "xl":
      return "56px";
    case "s":
      return "32px";
    default:
      return "40px";
  }
}};
`;
const Container$6 = styled.div`
  position: relative;
  display: flex;
  align-items: stretch;
  border: none;

  ${containerHeights}
`;
const ErrorIcon = styled(ReactComponent$3)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.status.danger};
  }
`;
const SuccessIcon = styled(ReactComponent$4)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.status.success};
  }
`;
function StatusIcon({ status, ...props2 }) {
  switch (status) {
    case "success":
      return /* @__PURE__ */ React.createElement(SuccessIcon, {
        ...props2
      });
    case "error":
      return /* @__PURE__ */ React.createElement(ErrorIcon, {
        ...props2
      });
    default:
      return null;
  }
}
const EyeCloseIcon = styled(ReactComponent$5)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const EyeIcon = styled(ReactComponent$6)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const ClearIcon$3 = styled(ReactComponent$7)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const iconSizeValue$1 = (props2) => {
  switch (props2.dimension) {
    case "xl":
      return 24;
    case "s":
      return 20;
    default:
      return 24;
  }
};
const horizontalPaddingValue$1 = (props2) => {
  switch (props2.dimension) {
    case "xl":
      return 16;
    case "s":
      return 12;
    default:
      return 16;
  }
};
const extraPadding$1 = css`
  padding-right: ${(props2) => {
  var _a;
  return horizontalPaddingValue$1(props2) + (iconSizeValue$1(props2) + 8) * ((_a = props2.iconCount) != null ? _a : 0) - 8 * (props2.iconCount ? 1 : 0);
}}px;
`;
const disabledColors$1 = css`
  background-color: ${(props2) => props2.theme.color.background.tertiary};
  border-color: ${(props2) => props2.theme.color.background.tertiary};
`;
const colorsBorderAndBackground$2 = css`
  background-color: ${(props2) => props2.theme.color.background.primary};
  border: 1px solid ${(props2) => props2.theme.color.basic.tertiary};
  border-radius: 4px;

  &:focus {
    border: 1px solid ${(props2) => props2.theme.color.basic.press};
  }

  &:hover {
    border-color: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const ieFixes$2 = css`
  ::-ms-clear,
  ::-ms-reveal {
    display: none;
  }
`;
const Input$5 = styled.input`
  outline: none;
  appearance: none;

  box-sizing: border-box;
  flex: 1 1 auto;
  min-width: 10px;
  border: none;
  background: transparent;
  text-overflow: ellipsis;
  padding: 0 ${horizontalPaddingValue$1}px;

  ${(props2) => props2.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  color: ${(props2) => props2.theme.color.text.primary};

  &::placeholder {
    color: ${(props2) => props2.theme.color.text.secondary};
  }

  ${colorsBorderAndBackground$2}

  &:disabled,
  &:disabled::placeholder {
    color: ${(props2) => props2.theme.color.text.tertiary};
    ${disabledColors$1}
  }

  [data-read-only] & {
    user-select: none;
    pointer-events: none;
    ${disabledColors$1}
  }

  ${extraPadding$1}
  ${ieFixes$2}
  [data-status='error'] &,
  &:invalid {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }

  [data-status='success'] & {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
`;
const IconPanel$4 = styled.div`
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;

  display: flex;
  align-items: center;

  padding-right: ${horizontalPaddingValue$1}px;

  & > * {
    display: block;
    width: ${iconSizeValue$1}px;
  }

  & > *:not(:first-child) {
    margin-left: 8px;
  }
`;
function defaultHandleInput$1(newInputData) {
  return newInputData || {};
}
const stopEvent$1 = (e) => e.preventDefault();
const TextInput = React.forwardRef(({
  type,
  displayStatusIcon,
  displayClearIcon,
  status,
  handleInput = defaultHandleInput$1,
  containerRef,
  icons,
  children,
  className,
  style,
  placeholder,
  ...props2
}, ref) => {
  const inputRef = React.useRef(null);
  const iconArray = React.Children.toArray(icons);
  const [isPasswordVisible, setPasswordVisible] = React.useState(false);
  if (type === "password") {
    const Icon2 = isPasswordVisible ? EyeIcon : EyeCloseIcon;
    iconArray.push(/* @__PURE__ */ React.createElement(Icon2, {
      key: "eye-icon",
      "aria-hidden": true,
      onClick: () => {
        setPasswordVisible(!isPasswordVisible);
      }
    }));
  }
  if (displayStatusIcon) {
    iconArray.push(/* @__PURE__ */ React.createElement(StatusIcon, {
      key: "status-icon",
      status,
      "aria-hidden": true
    }));
  }
  if (displayClearIcon) {
    iconArray.unshift(/* @__PURE__ */ React.createElement(ClearIcon$3, {
      key: "clear-icon",
      onClick: () => {
        if (inputRef.current) {
          changeInputData(inputRef.current, { value: "" });
        }
      },
      "aria-hidden": true
    }));
  }
  const iconCount = iconArray.length;
  React.useLayoutEffect(() => {
    const nullHandledValue = handleInput(null);
    function oninput() {
      const { value, selectionStart, selectionEnd } = this;
      const currentInputData = { value, selectionStart, selectionEnd };
      const inputData = handleInput(currentInputData);
      if (placeholder && !isInputDataDifferent(nullHandledValue, inputData)) {
        changeInputData(this, { ...inputData, value: "" });
      } else {
        changeInputData(this, inputData);
      }
    }
    if (type !== "date" && inputRef.current) {
      const node = inputRef.current;
      node.addEventListener("input", oninput);
      const { value, selectionStart, selectionEnd } = node;
      const currentInputData = { value, selectionStart, selectionEnd };
      const inputData = handleInput(currentInputData);
      if (placeholder && !isInputDataDifferent(nullHandledValue, inputData)) {
        changeInputData(node, { ...inputData, value: "" });
      } else {
        changeInputData(node, inputData);
      }
      return () => {
        node.removeEventListener("input", oninput);
      };
    }
  }, [inputRef.current, handleInput, placeholder]);
  return /* @__PURE__ */ React.createElement(Container$6, {
    className,
    style,
    disabled: props2.disabled,
    dimension: props2.dimension,
    ref: containerRef,
    "data-read-only": props2.readOnly ? true : void 0,
    "data-status": status,
    ...props2.disableCopying && {
      onMouseDown: stopEvent$1
    }
  }, /* @__PURE__ */ React.createElement(Input$5, {
    ref: refSetter(ref, inputRef),
    ...props2,
    placeholder,
    iconCount,
    type: type === "password" && isPasswordVisible ? "text" : type
  }), iconCount > 0 && /* @__PURE__ */ React.createElement(IconPanel$4, {
    disabled: props2.disabled,
    dimension: props2.dimension
  }, iconArray), children);
});
TextInput.defaultProps = {
  dimension: "m"
};
TextInput.displayName = "TextInput";
function splice$1(oldString, start, delCount, newSubStr) {
  return oldString.slice(0, start) + newSubStr + oldString.slice(start + Math.abs(delCount));
}
const MASK_VALUE$2 = "__.__.____";
function defaultDateInputHandle(inputData) {
  if (inputData === null) {
    return { value: MASK_VALUE$2, selectionStart: 0, selectionEnd: 0 };
  }
  const selectionStart = inputData.selectionStart || 0;
  let inputValue = inputData.value || "";
  const lengthDifference = inputValue.length - MASK_VALUE$2.length;
  if (inputValue.replace(/\d/g, "_") === MASK_VALUE$2)
    return inputData;
  if (lengthDifference < 0) {
    inputValue = splice$1(inputValue, selectionStart, 0, MASK_VALUE$2.substr(selectionStart, -lengthDifference));
    return { ...inputData, value: inputValue };
  }
  let addCount = 0;
  let moveCursor = 0;
  if (inputValue.charAt(selectionStart - 1) === ".") {
    addCount = -1;
    moveCursor = 0;
  }
  if (inputValue.charAt(selectionStart) === ".") {
    moveCursor = 1;
    if (/\d/.test(inputValue.charAt(selectionStart - 1))) {
      addCount = 1;
    } else {
      addCount = -1;
      moveCursor = 0;
    }
  }
  const spliced = splice$1(inputValue, selectionStart + addCount, lengthDifference, "").replace(/\./g, "");
  inputValue = `${spliced.substr(0, 2).replace(/\D/g, "_")}.${spliced.substr(2, 2).replace(/\D/g, "_")}.${spliced.substr(4, 4).replace(/\D/g, "_")}`;
  const result = {
    ...inputData,
    value: inputValue,
    selectionStart: selectionStart + moveCursor,
    selectionEnd: selectionStart + moveCursor
  };
  return result;
}
const useClickOutside = (elements, handler) => {
  const listener = React.useCallback((e) => {
    if (elements.every((element) => {
      return element.current && !element.current.contains(e.target);
    })) {
      handler(e);
    }
  }, [handler, elements]);
  React.useEffect(() => {
    document.addEventListener("mousedown", listener, true);
    document.addEventListener("touchstart", listener);
    return () => {
      document.removeEventListener("mousedown", listener, true);
      document.removeEventListener("touchstart", listener);
    };
  }, [listener]);
};
function useInterval(callback, delay) {
  const intervalRef = useRef(null);
  const callbackRef = useRef(callback);
  useEffect(() => {
    callbackRef.current = callback;
  }, [callback]);
  useEffect(() => {
    if (typeof delay === "number") {
      intervalRef.current = window.setInterval(() => callbackRef.current(), delay);
      return () => window.clearInterval(intervalRef.current || 0);
    }
  }, [delay]);
  return intervalRef;
}
const moveFocus = (parent, currentFocus, calcNextFocus, stop, menuFocus, onMenuReachTop, onMenuReachBottom) => {
  let wrappedOnce = false;
  let nextFocus = menuFocus ? calcNextFocus(parent, currentFocus, stop, onMenuReachTop, onMenuReachBottom) : calcNextFocus(parent, currentFocus, stop);
  while (nextFocus) {
    if (nextFocus === (parent == null ? void 0 : parent.firstChild)) {
      if (wrappedOnce) {
        return;
      }
      wrappedOnce = true;
    }
    if (!nextFocus.hasAttribute("tabindex") || nextFocus.hasAttribute("disabled")) {
      nextFocus = menuFocus ? calcNextFocus(parent, nextFocus, stop, onMenuReachTop, onMenuReachBottom) : calcNextFocus(parent, nextFocus, stop);
    } else {
      nextFocus.focus();
      return;
    }
  }
};
const nextItem = (parent, child, stop, onMenuReachTop, onMenuReachBottom) => {
  if (child == null ? void 0 : child.nextElementSibling) {
    return child.nextElementSibling;
  }
  onMenuReachBottom == null ? void 0 : onMenuReachBottom();
  return stop ? null : parent == null ? void 0 : parent.firstChild;
};
const previousItem = (parent, child, stop, onMenuReachTop, onMenuReachBottom) => {
  if (child == null ? void 0 : child.previousElementSibling) {
    return child.previousElementSibling;
  }
  onMenuReachTop == null ? void 0 : onMenuReachTop();
  return stop ? null : parent == null ? void 0 : parent.lastChild;
};
const Container$5 = styled.div`
  pointer-events: initial;
  margin: 8px 0;
  background-color: ${(p) => p.theme.color.background.primary};
  border-radius: 4px;
  ${(p) => p.theme.shadow.NonClickable}
  flex: 0 0 auto;
  ${(p) => p.alignSelf ? `align-self: ${p.alignSelf};` : ""};
  max-width: calc(100vw - 32px);
  opacity: 0;
  transition-delay: 200ms;
  transition-property: opacity;
`;
const FakeTarget$1 = styled.div`
  pointer-events: none;
  height: 100%;
  flex: 0 0 auto;
`;
const Portal$1 = styled(PositionInPortal)`
  display: flex;
  flex-direction: ${(p) => p.reverse ? "column-reverse" : "column"};
  flex-wrap: nowrap;
`;
const Dropdown$3 = React.forwardRef(({
  targetRef,
  onClickOutside = () => null,
  onKeyDown,
  className = "",
  onMenuReachBottom,
  onMenuReachTop,
  setMenuFocus,
  menuFocus,
  ...props2
}, ref) => {
  const containerRef = React.useRef(null);
  const [displayUpward, setDisplayUpward] = React.useState(false);
  useClickOutside([containerRef], onClickOutside);
  const handleKeyDown = React.useCallback((e) => {
    const focusedOption = (containerRef.current && containerRef.current.ownerDocument || document).activeElement;
    const code = keyboardKey.getCode(e);
    if (menuFocus) {
      if (code === keyboardKey.ArrowRight) {
        moveFocus(containerRef.current, focusedOption, nextItem, true, true, onMenuReachTop, onMenuReachBottom);
        e.preventDefault();
      } else if (code === keyboardKey.ArrowLeft) {
        moveFocus(containerRef.current, focusedOption, previousItem, true, true, onMenuReachTop, onMenuReachBottom);
        e.preventDefault();
      }
    } else {
      if (code === keyboardKey.ArrowDown) {
        moveFocus(containerRef.current, focusedOption, nextItem);
        e.preventDefault();
      } else if (code === keyboardKey.ArrowUp) {
        moveFocus(containerRef.current, focusedOption, previousItem);
        e.preventDefault();
      }
    }
    if (e.keyCode === 32) {
      e.preventDefault();
    } else if (code === keyboardKey.Home) {
      e.preventDefault();
      moveFocus(containerRef.current, null, nextItem);
    } else if (code === keyboardKey.End) {
      e.preventDefault();
      moveFocus(containerRef.current, null, previousItem);
    }
    onKeyDown == null ? void 0 : onKeyDown(e);
  }, [containerRef.current, menuFocus, previousItem, nextItem]);
  const getMenuFirstOption = () => {
    var _a;
    let option = (_a = containerRef.current) == null ? void 0 : _a.firstElementChild;
    while (option == null ? void 0 : option.hasAttribute("disabled")) {
      option = option.nextElementSibling;
    }
    return option;
  };
  const getMenuLastOption = () => {
    var _a;
    let option = (_a = containerRef.current) == null ? void 0 : _a.lastElementChild;
    while (option == null ? void 0 : option.hasAttribute("disabled")) {
      option = option.previousElementSibling;
    }
    return option;
  };
  React.useLayoutEffect(() => {
    var _a, _b;
    if (containerRef.current !== document.activeElement) {
      (_a = containerRef == null ? void 0 : containerRef.current) == null ? void 0 : _a.focus();
    }
    if (menuFocus) {
      const activeOption = (_b = containerRef.current) == null ? void 0 : _b.querySelector('[aria-selected="true"]');
      const selectedItem = menuFocus === "firstOption" ? getMenuFirstOption() : menuFocus === "lastOption" ? getMenuLastOption() : activeOption || getMenuFirstOption();
      selectedItem == null ? void 0 : selectedItem.focus();
    } else {
      const focusedOption = (containerRef.current && containerRef.current.ownerDocument || document).activeElement;
      moveFocus(containerRef.current, focusedOption, nextItem);
    }
  }, [containerRef, menuFocus, nextItem, moveFocus]);
  React.useEffect(() => {
    var _a;
    (_a = containerRef.current) == null ? void 0 : _a.addEventListener("keydown", handleKeyDown);
    return () => {
      var _a2;
      (_a2 = containerRef.current) == null ? void 0 : _a2.removeEventListener("keydown", handleKeyDown);
    };
  }, [containerRef.current]);
  const checkDropdownPosition = () => {
    const node = containerRef.current;
    const targetNode = targetRef.current;
    if (node && targetNode) {
      const rect = node.getBoundingClientRect();
      const targetRect = targetNode.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      const viewportWidth = window.innerWidth;
      if (viewportHeight - rect.bottom < 0 && targetRect.top > viewportHeight - targetRect.bottom) {
        setDisplayUpward(true);
      } else if (targetRect.bottom + (targetRect.top - rect.top) < viewportHeight - 8 || targetRect.top < viewportHeight - targetRect.bottom) {
        setDisplayUpward(false);
      }
      const rectWidth = rect.right - rect.left;
      if (targetRect.right < rectWidth && viewportWidth - targetRect.left < rectWidth) {
        node.style.alignSelf = "center";
      } else if (targetRect.right - 16 >= rectWidth && viewportWidth - targetRect.left >= rectWidth) {
        node.style.alignSelf = "";
      } else if (targetRect.right - 16 < rectWidth) {
        node.style.alignSelf = "flex-start";
      } else if (viewportWidth - targetRect.left < rectWidth) {
        node.style.alignSelf = "flex-end";
      }
    }
  };
  useInterval(checkDropdownPosition, 100);
  React.useEffect(() => {
    if (containerRef.current) {
      containerRef.current.style.opacity = "1";
    }
  }, [containerRef.current]);
  return /* @__PURE__ */ React.createElement(Portal$1, {
    targetRef,
    reverse: displayUpward
  }, /* @__PURE__ */ React.createElement(FakeTarget$1, null), /* @__PURE__ */ React.createElement(Container$5, {
    ref: refSetter(ref, containerRef),
    ...props2,
    className: className + " dropdown-container"
  }));
});
Dropdown$3.displayName = "Dropdown";
function isValidDate(d) {
  return d instanceof Date && !isNaN(d.getTime());
}
function parseStringToDate(str = "") {
  const [ddStr, mmStr, yyyyStr] = str.split(".");
  const date = new Date(`${yyyyStr}-${mmStr}-${ddStr}`);
  return isValidDate(date) ? date : null;
}
function defaultParser(stringValue = "", isDateRangeValue, dateRangeSeparatorSymbols = " - ") {
  const result = stringValue.split(dateRangeSeparatorSymbols).map(parseStringToDate);
  return isDateRangeValue ? result : result[0];
}
const DATE_SEPARATOR = " - ";
const MASK_VALUE$1 = MASK_VALUE$2 + DATE_SEPARATOR + MASK_VALUE$2;
function defaultDateRangeInputHandle(inputData) {
  if (!inputData || !inputData.value) {
    const ret2 = { value: MASK_VALUE$1, selectionStart: 0, selectionEnd: 0 };
    return ret2;
  }
  const inputValue = inputData.value || MASK_VALUE$1;
  if (inputValue.replace(/\d/g, "_") === MASK_VALUE$1)
    return inputData;
  const selectionStart = inputData.selectionStart || 0;
  const symbolsChanged = inputValue.length - MASK_VALUE$1.length;
  if (MASK_VALUE$2.length < selectionStart + 1 && MASK_VALUE$2.length + DATE_SEPARATOR.length > selectionStart) {
    const selectionPos = inputValue.length < MASK_VALUE$1.length ? MASK_VALUE$2.length : MASK_VALUE$2.length + DATE_SEPARATOR.length;
    const handledData2 = defaultDateInputHandle({
      ...inputData,
      value: inputValue.substring(0, MASK_VALUE$2.length)
    });
    const ret2 = {
      value: handledData2.value + DATE_SEPARATOR + inputValue.slice(-10),
      selectionStart: selectionPos,
      selectionEnd: selectionPos
    };
    return ret2;
  }
  if (selectionStart <= MASK_VALUE$2.length) {
    const handledData2 = defaultDateInputHandle({
      ...inputData,
      value: inputValue.length > MASK_VALUE$2.length ? inputValue.substring(0, MASK_VALUE$2.length + Math.max(symbolsChanged, -MASK_VALUE$2.length)) : inputValue
    });
    const rightHandleData = defaultDateInputHandle({
      value: inputValue.length > MASK_VALUE$2.length ? inputValue.substring(inputValue.length - MASK_VALUE$2.length, inputValue.length) : ""
    });
    const ret2 = {
      value: handledData2.value + DATE_SEPARATOR + rightHandleData.value,
      selectionStart: handledData2.selectionStart,
      selectionEnd: handledData2.selectionEnd
    };
    return ret2;
  }
  const handledData = defaultDateInputHandle({
    value: inputValue.slice(-10 - symbolsChanged),
    selectionStart: selectionStart - (MASK_VALUE$2.length + DATE_SEPARATOR.length),
    selectionEnd: selectionStart - (MASK_VALUE$2.length + DATE_SEPARATOR.length)
  });
  const ret = {
    value: inputValue.substring(0, MASK_VALUE$2.length) + DATE_SEPARATOR + handledData.value,
    selectionStart: (handledData.selectionStart || 0) + MASK_VALUE$2.length + DATE_SEPARATOR.length,
    selectionEnd: (handledData.selectionEnd || 0) + MASK_VALUE$2.length + DATE_SEPARATOR.length
  };
  return ret;
}
const Dropdown$2 = styled(Dropdown$3)`
  align-self: ${(p) => p.alignSelf ? p.alignSelf : "end"};
`;
const Calendar = styled(Calendar$1)`
  border-radius: 4px;
`;
const Input$4 = styled(TextInput)`
  input {
    letter-spacing: 1px;
  }
`;
const Icon$6 = styled(ReactComponent$8)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  [disabled] & {
    pointer-events: none;
    & *[fill^='#'] {
      fill: ${(props2) => props2.theme.color.text.tertiary};
    }
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
function defaultFormatter(isoValues, joinString = " - ") {
  return isoValues.map((iso) => new Date(iso)).map((date) => isValidDate(date) ? date.toLocaleDateString("ru").replace(/[^ -~]/g, "") : "__.__.____").join(joinString);
}
const DateInput = React.forwardRef(({
  type = "date",
  defaultIsCalendarOpen = false,
  formatter = defaultFormatter,
  parser = defaultParser,
  minDate,
  maxDate,
  validator,
  filterDate,
  localeName,
  alignDropdown = "end",
  currentActiveView,
  currentActiveViewImportant,
  onMonthSelect,
  onYearSelect,
  onViewEnter,
  onViewLeave,
  onViewMonthSelect,
  onViewYearSelect,
  selected,
  calendarRef,
  ...props2
}, ref) => {
  const calendarProps = {
    minDate,
    maxDate,
    validator,
    filterDate,
    localeName,
    currentActiveView,
    currentActiveViewImportant,
    onMonthSelect,
    onYearSelect,
    onViewEnter,
    onViewLeave,
    onViewMonthSelect,
    onViewYearSelect,
    selected
  };
  const isDateRange = type === "date-range";
  const handleInput = props2.handleInput || (isDateRange ? defaultDateRangeInputHandle : defaultDateInputHandle);
  const [calendarValue, setCalendarValue] = useState(null);
  const inputRef = useRef(null);
  const inputContainerRef = useRef(null);
  const [isCalendarOpen, setCalendarOpen] = useState(defaultIsCalendarOpen);
  const [startDate, endDate, selectedCalendarValue] = Array.isArray(calendarValue) ? calendarValue : [void 0, void 0, calendarValue];
  const handleCalendarChange = (maybeDate) => {
    setCalendarValue(maybeDate);
    if (inputRef.current) {
      if (!maybeDate) {
        changeInputData(inputRef.current, { value: "" });
        return;
      }
      const values = Array.isArray(maybeDate) ? maybeDate : [maybeDate];
      const toFormatValues = values.map((date) => date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : date).map((date) => date ? date.toISOString().substring(0, 10) : "");
      const value = formatter(toFormatValues);
      changeInputData(inputRef.current, { value });
      if (isDateRange) {
        if (!values.includes(null)) {
          setCalendarOpen(false);
        }
      } else {
        setCalendarOpen(false);
      }
    }
  };
  const handleBlurCalendarContainer = () => {
    setCalendarOpen(false);
  };
  const handleButtonClick = () => {
    var _a;
    const calValue = parser((_a = inputRef.current) == null ? void 0 : _a.value, isDateRange);
    setCalendarValue(calValue);
    setCalendarOpen(!isCalendarOpen);
  };
  return /* @__PURE__ */ React.createElement(Input$4, {
    ...props2,
    ref: refSetter(ref, inputRef),
    handleInput,
    icons: props2.readOnly ? void 0 : /* @__PURE__ */ React.createElement(Icon$6, {
      onClick: handleButtonClick,
      tabIndex: 0
    }),
    containerRef: inputContainerRef
  }, isCalendarOpen && /* @__PURE__ */ React.createElement(Dropdown$2, {
    targetRef: inputRef,
    onClickOutside: handleBlurCalendarContainer
  }, /* @__PURE__ */ React.createElement(Calendar, {
    ...calendarProps,
    ref: calendarRef,
    selected: selectedCalendarValue,
    startDate,
    endDate,
    onChange: handleCalendarChange,
    range: isDateRange
  })));
});
DateInput.defaultProps = { dimension: "m" };
DateInput.displayName = "DateInput";
const MessagePanel = styled.div`
  height: 40px;
  ${typography$1["Body/Body 1 Long"]}
  line-height: 40px;
  padding: 0 16px;
  color: ${(p) => p.theme.color.text.primary};

  [data-dimension='xl'] & {
    height: 48px;
    line-height: 48px;
  }

  [data-dimension='s'] & {
    height: 32px;
    ${typography$1["Body/Body 2 Long"]}
    line-height: 32px;
    padding: 0 12px;
  }
`;
const Highlight$1 = styled.span`
  color: ${(p) => p.theme.color.basic.primary};
`;
function getHighlightedText(text = "", highlight = "") {
  const chunks = highlight.split(/[ ]+/).filter((chunk) => Boolean(chunk)).map((chunk) => chunk.toLowerCase());
  const pattern = chunks.map((chunk) => {
    const newChunk = chunk.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    return `(${newChunk})?`;
  }).join("");
  const parts = text.split(new RegExp(pattern, "gi")).filter((chunk) => Boolean(chunk));
  return parts.map((part, i) => chunks.indexOf(part.toLowerCase()) >= 0 ? /* @__PURE__ */ React.createElement(Highlight$1, {
    key: i
  }, part) : part);
}
const activePanel = css`
  background-color: ${(p) => p.theme.color.background.secondary};
  cursor: pointer;
`;
const Panel$1 = styled.div`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  height: 40px;
  ${typography$1["Body/Body 1 Long"]}
  line-height: 40px;
  padding: 0 16px;

  [data-dimension='xl'] & {
    height: 48px;
    line-height: 48px;
  }
  [data-dimension='s'] & {
    height: 32px;
    ${typography$1["Body/Body 2 Long"]}
    line-height: 32px;
    padding: 0 12px;
  }

  color: ${(p) => p.theme.color.text.primary};

  ${(p) => p.active ? activePanel : ""}
`;
const SuggestPanel = ({ searchText = "", text = "", ...props2 }) => {
  return /* @__PURE__ */ React.createElement(Panel$1, {
    ...props2,
    title: text
  }, getHighlightedText(text, searchText));
};
const Dropdown$1 = styled(Dropdown$3)`
  padding: 8px 0;
`;
const SearchIcon = styled(ReactComponent$9)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const SearchingPanelContainer = styled.div`
  display: flex;
  align-items: center;
  height: 40px;
  ${typography$1["Body/Body 1 Long"]};

  [data-dimension='xl'] & {
    height: 48px;
    line-height: 48px;
  }

  [data-dimension='s'] & {
    height: 32px;
    ${typography$1["Body/Body 2 Long"]}
    line-height: 32px;
  }

  color: ${(p) => p.theme.color.text.secondary};
`;
const SearchTextContainer = styled.div`
  margin-left: 8px;
`;
const StyledDropDown$4 = styled(Dropdown$1)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  ${(p) => p.alignDropdown ? `align-self: ${p.alignDropdown}` : ""};
  max-height: ${(p) => p.dropMaxHeight};
  min-width: 100%;
`;
const SearchingPanel = ({ children, ...props2 }) => {
  return /* @__PURE__ */ React.createElement(SearchingPanelContainer, {
    ...props2
  }, /* @__PURE__ */ React.createElement(Spinner, {
    dimension: "m"
  }), /* @__PURE__ */ React.createElement(SearchTextContainer, null, children));
};
const SuggestInput = React.forwardRef(({ isLoading, onOptionSelect, alignDropdown, dropMaxHeight = "300px", ...props2 }, ref) => {
  var _a;
  const isControlledComponentValue = props2.value !== void 0;
  const { options, portalTargetRef } = props2;
  const inputRef = React.useRef(null);
  const [activeIndex, setActiveIndex] = React.useState(0);
  const [isSuggestPanelOpen, setIsSuggestPanelOpen] = React.useState(false);
  const [isFocused, setIsFocused] = React.useState(false);
  const [, forceUpdate] = React.useReducer((x) => x + 1, 0);
  const handleOptionSelect = () => {
    const value = (options == null ? void 0 : options[activeIndex]) || "";
    onOptionSelect == null ? void 0 : onOptionSelect(value);
    if (!isControlledComponentValue && inputRef.current) {
      const cursorPosition = value.length;
      changeInputData(inputRef.current, { value, selectionStart: cursorPosition, selectionEnd: cursorPosition });
    }
    setIsSuggestPanelOpen(false);
  };
  const handleOptionClick = (e) => {
    e.preventDefault();
    handleOptionSelect();
  };
  React.useEffect(() => {
    if (options) {
      setIsSuggestPanelOpen(isFocused);
    }
  }, [isFocused, options]);
  const handleKeyUp = (e) => {
    if (!options)
      return;
    switch (e.key) {
      case "Enter":
        handleOptionSelect();
        break;
      case "ArrowUp":
        if (activeIndex <= 0) {
          setActiveIndex(options.length - 1);
        } else {
          setActiveIndex(activeIndex - 1);
        }
        break;
      case "ArrowDown":
        if (activeIndex >= options.length - 1) {
          setActiveIndex(0);
        } else {
          setActiveIndex(activeIndex + 1);
        }
        break;
    }
  };
  const handleKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.Enter && isSuggestPanelOpen) {
      e.preventDefault();
    }
  };
  const loadingMessage = isLoading ? /* @__PURE__ */ React.createElement(SearchingPanel, null, "\u041F\u043E\u0438\u0441\u043A \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u0439") : "\u041D\u0435\u0442 \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u0439";
  const delayBlurEffect = React.useCallback(() => window.setTimeout(() => setIsFocused(false), 200), [setIsFocused]);
  React.useEffect(() => {
    function onInputChange() {
      if (!props2.onInput)
        forceUpdate();
    }
    if (inputRef.current) {
      const node = inputRef.current;
      node.addEventListener("input", onInputChange);
      return () => {
        node.removeEventListener("input", onInputChange);
      };
    }
  }, [props2.onInput]);
  return /* @__PURE__ */ React.createElement(TextInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    icons: /* @__PURE__ */ React.createElement(SearchIcon, null),
    onKeyUp: (...p) => {
      var _a2;
      (_a2 = props2.onKeyUp) == null ? void 0 : _a2.call(props2, ...p);
      handleKeyUp(...p);
    },
    onKeyDown: (...p) => {
      var _a2;
      (_a2 = props2.onKeyDown) == null ? void 0 : _a2.call(props2, ...p);
      handleKeyDown(...p);
    },
    onFocus: (...p) => {
      var _a2;
      (_a2 = props2.onFocus) == null ? void 0 : _a2.call(props2, ...p);
      setIsFocused(true);
    },
    onBlur: (...p) => {
      var _a2;
      (_a2 = props2.onBlur) == null ? void 0 : _a2.call(props2, ...p);
      delayBlurEffect();
    }
  }, options && isSuggestPanelOpen && /* @__PURE__ */ React.createElement(StyledDropDown$4, {
    targetRef: portalTargetRef || inputRef,
    alignDropdown,
    dropMaxHeight,
    "data-dimension": props2.dimension || ((_a = TextInput.defaultProps) == null ? void 0 : _a.dimension)
  }, options.length === 0 ? /* @__PURE__ */ React.createElement(MessagePanel, null, loadingMessage) : options.map((text, index) => {
    var _a2;
    return /* @__PURE__ */ React.createElement(SuggestPanel, {
      key: index,
      text,
      active: index === activeIndex,
      searchText: props2.value || ((_a2 = inputRef.current) == null ? void 0 : _a2.value) || "",
      onMouseEnter: () => setActiveIndex(index),
      onClick: handleOptionClick,
      onKeyUp: handleKeyUp
    });
  })));
});
SuggestInput.displayName = "SuggestInput";
const OpenStatusButton = styled(ReactComponent)`
  transition: transform 0.3s ease-in-out;
  transform: rotate(${(p) => p.$isOpen ? 180 : 0}deg);
  & *[fill^='#'] {
    fill: ${(props2) => props2.$isOpen ? props2.theme.color.basic.press : props2.theme.color.text.secondary};
  }

  &&[data-disabled] {
    pointer-events: none;
    fill: ${(props2) => props2.theme.color.text.tertiary};
  }

  &:not([data-disabled]):hover {
    cursor: pointer;
  }

  &:not([data-disabled]):hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const ConstantSearchSelectContext = React.createContext(null);
const useConstantSearchSelectContext = () => React.useContext(ConstantSearchSelectContext);
const ConstantSearchSelectProvider = ({
  children,
  ...restProps
}) => /* @__PURE__ */ React.createElement(ConstantSearchSelectContext.Provider, {
  value: restProps
}, children);
const DropDownSearchSelectContext = React.createContext(null);
const useDropDownSearchSelectContext = () => React.useContext(DropDownSearchSelectContext);
const DropDownSearchSelectProvider = ({
  children,
  ...restProps
}) => /* @__PURE__ */ React.createElement(DropDownSearchSelectContext.Provider, {
  value: restProps
}, children);
const OptionContext = React.createContext(null);
const useOptionContext = () => React.useContext(OptionContext);
const OptionProvider = ({ children, ...restProps }) => /* @__PURE__ */ React.createElement(OptionContext.Provider, {
  value: restProps
}, children);
const OptionGroupContext = React.createContext(null);
const useOptionGroupContext = () => React.useContext(OptionGroupContext);
const OptionGroupProvider = ({ children, ...restProps }) => /* @__PURE__ */ React.createElement(OptionGroupContext.Provider, {
  value: restProps
}, children);
const heights$2 = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "32px";
    case "s":
      return "24px";
    default:
      return "24px";
  }
}};
`;
const heightIcons = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "16px";
  }
}};
`;
const heightText = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "16px";
  }
}};
`;
const widthIcons = css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "16px";
  }
}};
`;
const paddings$1 = css`
  padding: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "6px 12px";
    case "s":
      return "4px 8px";
    default:
      return "4px 8px";
  }
}};
`;
const typography = css`
  font-family: ${TYPOGRAPHY.fontFamily};
  font-style: normal;
  font-weight: normal;
  font-size: ${({ dimension }) => dimension === "s" ? "12px" : "14px"};
  line-height: ${({ dimension }) => dimension === "s" ? "16px" : "20px"};
  font-feature-settings: 'tnum' on, 'lnum' on;
  color: ${({ theme, appearance, disabled, selected }) => {
  if (disabled && !selected)
    return theme.color.text.tertiary;
  if (selected || selected && disabled)
    return theme.color.text.staticWhite;
  return appearance === "filled" ? theme.color.text.primary : theme.color.basic.primary;
}};
`;
const colorsBorderAndBackground$1 = css`
  background-color: ${({ theme, appearance, selected, disabled }) => {
  if (selected && !disabled) {
    return theme.color.basic.primary;
  }
  if (selected && disabled)
    return theme.color.basic.disable;
  return appearance === "filled" ? theme.color.background.tertiary : theme.color.background.primary;
}};

  border: 1px solid
    ${({ theme, appearance, disabled }) => {
  if (disabled)
    return theme.color.background.tertiary;
  if (appearance === "filled")
    return "transparent";
  else
    return theme.color.basic.primary;
}};

  border-radius: 16px;

  &:hover,
  &:active {
    color: ${({ theme, appearance, selected }) => {
  if (selected)
    return theme.color.text.staticWhite;
  if (appearance === "filled")
    return theme.color.text.primary;
  else
    return theme.color.basic.hover;
}};
    background-color: ${({ theme, appearance, selected }) => {
  if (selected)
    return theme.color.basic.hover;
  if (appearance === "filled")
    return theme.color.background.tertiaryHover;
  else
    return theme.color.background.secondary;
}};
    border-color: ${({ theme, appearance, disabled }) => {
  if (appearance === "outlined" && !disabled) {
    return theme.color.basic.hover;
  }
}};
  }

  &:focus-visible {
    outline: 0;

    &:before {
      border: 2px solid ${({ theme }) => theme.color.basic.hover};
      border-radius: 20px;
      content: '';
      display: block;
      position: absolute;
      top: -5px;
      left: -5px;
      right: -5px;
      bottom: -5px;
      pointer-events: none;
    }
  }
`;
const ChipComponentStyled = styled.div`
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
  position: relative;
  max-width: 190px;
  user-select: none;
  pointer-events: ${({ disabled }) => disabled ? "none" : "auto"};
  & *[fill^='#'] {
    fill: ${({ theme, appearance, disabled }) => disabled ? theme.color.text.tertiary : appearance === "filled" ? theme.color.text.secondary : theme.color.basic.primary};
  }
  cursor: ${({ defaultChip, disabled }) => defaultChip && !disabled ? "pointer" : "default"};
  ${colorsBorderAndBackground$1}
  ${heights$2}
  ${paddings$1}
  ${typography}

  &:hover {
    & *[fill^='#'] {
      fill: ${({ theme, appearance, disabled, selected }) => {
  if (selected)
    return theme.color.text.staticWhite;
  if (appearance === "outlined" && !disabled) {
    return theme.color.basic.hover;
  }
}};
    }
  }

  &:active {
    & *[fill^='#'] {
      fill: ${({ theme, appearance, disabled }) => {
  if (appearance === "outlined" && !disabled) {
    return theme.color.basic.press;
  }
}};
    }
  }
`;
const CloseIconWrapperStyled = styled(ReactComponent$7)`
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};

  &:hover {
    & *[fill^='#'] {
      fill: ${({ theme, disabled, selected }) => {
  if (selected)
    return theme.color.text.staticWhite;
  if (!disabled) {
    return theme.color.basic.hover;
  }
}};
    }
  }

  &:active {
    & *[fill^='#'] {
      fill: ${({ theme, disabled, selected }) => {
  if (selected)
    return theme.color.text.staticWhite;
  if (!disabled) {
    return theme.color.basic.press;
  }
}};
    }
  }
`;
const ChipContentWrapperStyled = styled.div`
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  display: inline-flex;

  ${heightText}
  & svg {
    ${heightIcons}
    ${widthIcons}
    & *[fill^='#'] {
      fill: ${({ theme, appearance, disabled, selected }) => {
  if (selected) {
    return theme.color.background.primary;
  }
  return disabled ? theme.color.text.tertiary : appearance === "filled" ? theme.color.text.secondary : theme.color.basic.primary;
}};
    }
  }
`;
const ChipChildrenWrapperStyled = styled.div`
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: inline-block;
`;
const IconBeforeWrapperStyled = styled.div`
  display: inline-block;
  margin-right: 8px;
`;
const IconAfterWrapperStyled = styled.div`
  display: inline-block;
  margin-left: 8px;
`;
const IconWrapperStyled = styled.div`
  ${heightIcons}
  ${widthIcons}
  & > svg {
    ${heightIcons}
    ${widthIcons}
  }
`;
const MIN_MEASURABLE_DIFFERENCE = 2;
const defaultRenderContent = () => "";
const Chips = ({
  dimension = "m",
  disabled,
  appearance = "outlined",
  selected,
  onClose,
  children,
  renderContentTooltip = defaultRenderContent,
  iconBefore,
  iconAfter,
  ...props2
}) => {
  var _a;
  const defaultChip = selected !== void 0;
  const [withTooltip, setTooltip] = React.useState(false);
  const refItems = React.useRef(null);
  React.useEffect(() => {
    var _a2, _b;
    if ((refItems == null ? void 0 : refItems.current) && ((_a2 = refItems.current) == null ? void 0 : _a2.offsetWidth) <= ((_b = refItems.current) == null ? void 0 : _b.scrollWidth)) {
      const difference = refItems.current.scrollWidth - refItems.current.offsetWidth;
      setTooltip(difference >= MIN_MEASURABLE_DIFFERENCE);
    }
  }, [setTooltip, refItems == null ? void 0 : refItems.current]);
  const handleClickCloseIcon = React.useCallback((e) => {
    e.stopPropagation();
    if (!disabled) {
      onClose == null ? void 0 : onClose();
    }
  }, [onClose]);
  const Chip2 = /* @__PURE__ */ React.createElement(ChipComponentStyled, {
    dimension,
    disabled,
    appearance,
    selected,
    defaultChip,
    ...props2,
    tabIndex: (_a = props2.tabIndex) != null ? _a : 0
  }, /* @__PURE__ */ React.createElement(ChipContentWrapperStyled, {
    dimension,
    disabled,
    appearance,
    selected
  }, iconBefore && /* @__PURE__ */ React.createElement(IconBeforeWrapperStyled, null, /* @__PURE__ */ React.createElement(IconWrapperStyled, {
    dimension
  }, iconBefore)), /* @__PURE__ */ React.createElement(ChipChildrenWrapperStyled, {
    ref: refItems
  }, children), !onClose && iconAfter && /* @__PURE__ */ React.createElement(IconAfterWrapperStyled, null, /* @__PURE__ */ React.createElement(IconWrapperStyled, {
    dimension
  }, iconAfter)), onClose && /* @__PURE__ */ React.createElement(IconAfterWrapperStyled, null, /* @__PURE__ */ React.createElement(IconWrapperStyled, {
    dimension
  }, /* @__PURE__ */ React.createElement(CloseIconWrapperStyled, {
    disabled,
    onClick: disabled ? void 0 : handleClickCloseIcon,
    selected
  })))));
  return withTooltip ? /* @__PURE__ */ React.createElement(Tooltip, {
    renderContent: renderContentTooltip
  }, Chip2) : Chip2;
};
Chips.displayName = "Chips";
const AnchorWrapper = styled.div`
  display: inline-block;
  position: relative;
  cursor: pointer;
  ${(p) => p.anchorCssMixin ? p.anchorCssMixin : ""}
`;
const CLOSE_BUTTON_SIZE = 20;
const CLOSE_BUTTON_MARGIN_LEFT = 16;
const CloseButton$1 = styled.button`
  position: absolute;
  top: 24px;
  right: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  cursor: pointer;
  outline: none;
  border: 0;
  padding: 0;
  width: ${CLOSE_BUTTON_SIZE}px;
  height: ${CLOSE_BUTTON_SIZE}px;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  ${({ theme }) => `
    & *[fill^='#'] {
      fill: ${theme.color.text.secondary};
    }

    &:hover,
    &:focus {
      & *[fill^='#'] {
        fill: ${theme.color.basic.hover};
      }
    }

    &:active {
      & *[fill^='#'] {
        fill: ${theme.color.basic.press};
      }
    }
  `}
`;
const HINT_PADDING = 16;
const HINT_BORDER_RADIUS = "4px";
const HINT_WIDTH_S = "280px";
const HINT_WIDTH_M = "384px";
const HINT_WIDTH_L = "488px";
const HINT_WIDTH_MOBILE = "calc(100vw - 32px)";
const sizes$2 = css`
  width: ${({ dimension, isMobile }) => {
  if (isMobile)
    return HINT_WIDTH_MOBILE;
  if (dimension === "s")
    return HINT_WIDTH_S;
  if (dimension === "m")
    return HINT_WIDTH_M;
  return HINT_WIDTH_L;
}};
`;
const HintWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 8px;
  box-sizing: border-box;
  margin: 0 0 0 -8px;
  width: max-content;
  min-width: max-content;
  opacity: 0;
  transition-delay: 200ms;
  transition-property: opacity;
  pointer-events: initial;
  position: relative;
`;
const HintDialog = styled.div`
  display: flex;
  padding: ${HINT_PADDING}px 0 ${HINT_PADDING}px ${HINT_PADDING}px;
  ${sizes$2};
  background-color: ${({ theme }) => theme.color.background.primary};
  ${typography$1["Body/Body 2 Long"]}
  ${({ theme }) => theme.shadow.ClickableDefault}
  border-radius: ${HINT_BORDER_RADIUS};
  box-sizing: border-box;
`;
const HintContent = styled.div`
  display: flex;
  flex: 1 1 auto;
  max-height: 320px;
  overflow: auto;
  padding-right: ${HINT_PADDING}px;
  [data-trigger='click'] & {
    padding-right: ${CLOSE_BUTTON_SIZE + HINT_PADDING + CLOSE_BUTTON_MARGIN_LEFT}px;
  }
`;
const Portal = styled(PositionInPortal)`
  display: flex;
  flex-wrap: nowrap;
  flex-direction: ${({ flexDirection }) => flexDirection ? flexDirection : "column"};
`;
const FakeTarget = styled.div`
  pointer-events: none;
  height: 100%;
  width: 100%;
  flex: 0 0 auto;
`;
const POSITION_MAPPER = {
  "bottom-right": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom > hintRect.height;
      const isEnoughOnRight = window.innerWidth - anchorElementRect.right >= hintRect.width - anchorElementRect.width;
      return isEnoughOnBottom && isEnoughOnRight;
    }
  },
  "bottom-left": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom > hintRect.height;
      const isEnoughOnLeft = anchorElementRect.left > hintRect.width - anchorElementRect.width;
      return isEnoughOnBottom && isEnoughOnLeft;
    }
  },
  "bottom-pageCenter": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnBottom = window.innerHeight - anchorElementRect.bottom > hintRect.height;
      const isEnoughOnCenter = hintRect.width < window.innerWidth;
      return isEnoughOnBottom && isEnoughOnCenter;
    }
  },
  "top-right": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnTop = anchorElementRect.top > hintRect.height;
      const isEnoughOnRight = window.innerWidth - anchorElementRect.right >= hintRect.width - anchorElementRect.width;
      return isEnoughOnRight && isEnoughOnTop;
    }
  },
  "top-left": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnTop = anchorElementRect.top > hintRect.height;
      const isEnoughOnLeft = anchorElementRect.left > hintRect.width - anchorElementRect.width;
      return isEnoughOnLeft && isEnoughOnTop;
    }
  },
  "top-pageCenter": {
    check: (anchorElementRect, hintRect) => {
      const isEnoughOnTop = anchorElementRect.top > hintRect.height;
      const isEnoughOnCenter = hintRect.width < window.innerWidth;
      return isEnoughOnCenter && isEnoughOnTop;
    }
  }
};
function getHintDirection(anchorElement, hintElement) {
  const anchorElementRect = anchorElement.getBoundingClientRect();
  const hintRect = hintElement.getBoundingClientRect();
  const positions = Object.entries(POSITION_MAPPER);
  const compatiblePositions = positions.filter((kv) => {
    return kv[1].check(anchorElementRect, hintRect);
  });
  return compatiblePositions.length ? compatiblePositions[0][0] : "bottom-right";
}
function getKeyboardFocusableElements(element = document) {
  return [
    ...element.querySelectorAll('a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])')
  ].filter((el) => !el.hasAttribute("disabled"));
}
const throttle = (fn, delay) => {
  let wait = false;
  let timeout;
  let cancelled = false;
  return [
    (...args) => {
      if (cancelled)
        return void 0;
      if (wait)
        return void 0;
      const val = fn(...args);
      wait = true;
      timeout = window.setTimeout(() => {
        wait = false;
      }, delay);
      return val;
    },
    () => {
      cancelled = true;
      clearTimeout(timeout);
    }
  ];
};
const HintContainer = React.forwardRef(({
  dimension,
  isMobile,
  content,
  visibilityTrigger,
  scrollableParents,
  anchorElementRef,
  anchorId,
  dispatch,
  trapFocus,
  ...props2
}, ref) => {
  const hideHint = () => dispatch({ type: "setInvisible" });
  const hideOnScrollResize = visibilityTrigger === "hover";
  const hintRef = React.useRef(null);
  const previousFocusedElement = React.useRef(null);
  const [firstFocusableChild, setFirstFocusableChild] = React.useState();
  const [lastFocusableChild, setLastFocusableChild] = React.useState();
  if (visibilityTrigger === "click") {
    useClickOutside([hintRef, anchorElementRef], hideHint);
  }
  React.useEffect(() => {
    previousFocusedElement.current = document.activeElement;
  }, []);
  React.useLayoutEffect(() => {
    var _a;
    if (hintRef.current && visibilityTrigger === "click" && trapFocus) {
      const focusableEls = getKeyboardFocusableElements(hintRef.current);
      setFirstFocusableChild(focusableEls[0]);
      setLastFocusableChild(focusableEls[focusableEls.length - 1]);
      (_a = focusableEls[0]) == null ? void 0 : _a.focus();
    }
  }, [hintRef.current, visibilityTrigger, content, trapFocus]);
  React.useImperativeHandle(ref, () => hintRef.current);
  React.useLayoutEffect(() => {
    const [listener, freeResources] = hideOnScrollResize ? [hideHint, () => void 0] : throttle(() => {
      dispatch({ type: "triggerRecalculation" });
    }, 150);
    window.addEventListener("resize", listener);
    window.addEventListener("scroll", listener);
    scrollableParents.forEach((el) => el.addEventListener("scroll", listener));
    return () => {
      window.removeEventListener("resize", listener);
      window.removeEventListener("scroll", listener);
      scrollableParents.forEach((el) => el.removeEventListener("scroll", listener));
      freeResources();
    };
  });
  const handleKeyDown = (event) => {
    event.stopPropagation();
    const code = keyboardKey.getCode(event);
    if (code === keyboardKey.Escape) {
      event.preventDefault();
      previousFocusedElement.current.focus();
      hideHint();
    } else if (code === keyboardKey.Tab && visibilityTrigger === "click") {
      if (code === keyboardKey.Shift) {
        if (document.activeElement === firstFocusableChild) {
          lastFocusableChild.focus();
          event.preventDefault();
        }
      } else {
        if (document.activeElement === lastFocusableChild) {
          firstFocusableChild.focus();
          event.preventDefault();
        }
      }
    }
  };
  return /* @__PURE__ */ React.createElement(HintWrapper, {
    ...props2,
    role: "tooltip",
    ref: hintRef,
    onKeyDown: handleKeyDown
  }, /* @__PURE__ */ React.createElement(HintDialog, {
    role: "dialog",
    "aria-labelledby": anchorId,
    dimension,
    isMobile,
    "data-trigger": visibilityTrigger
  }, /* @__PURE__ */ React.createElement(HintContent, null, content), visibilityTrigger === "click" && /* @__PURE__ */ React.createElement(CloseButton$1, {
    "aria-label": "\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0443",
    onClick: (event) => {
      event == null ? void 0 : event.stopPropagation();
      previousFocusedElement.current.focus();
      hideHint();
    }
  }, /* @__PURE__ */ React.createElement(ReactComponent$7, {
    width: 20,
    height: 20,
    "aria-hidden": true
  }))));
});
const initialState = {
  recalculation: null,
  visible: false
};
const reducer = (state, action) => {
  switch (action.type) {
    case "setVisible":
      return { ...state, visible: true };
    case "setInvisible":
      return { ...state, visible: false };
    case "triggerRecalculation":
      return { ...state, recalculation: {} };
    default:
      throw new Error();
  }
};
const Hint$1 = ({
  renderContent,
  container: userContainer,
  target,
  visibilityTrigger = "hover",
  dimension = "l",
  hintRef,
  children,
  anchorClassName,
  anchorId: anchorIdProp,
  anchorCssMixin,
  ...props2
}) => {
  const anchorElementRef = React.useRef(null);
  const hintElementRef = React.useRef(null);
  const container = userContainer || document.body;
  const content = renderContent();
  const anchorId = anchorIdProp || uid();
  const targetRef = target || anchorElementRef;
  const targetElement = (target == null ? void 0 : target.current) || anchorElementRef.current;
  const [state, dispatch] = React.useReducer(reducer, initialState);
  const [portalFlexDirection, setPortalFlexDirection] = React.useState();
  const [portalFullWidth, setPortalFullWidth] = React.useState(false);
  const [isMobile, setMobile] = React.useState(window.innerWidth < 640);
  const [trapFocus, setTrapFocus] = React.useState(false);
  const hideHint = () => dispatch({ type: "setInvisible" });
  React.useLayoutEffect(() => {
    const listener = () => {
      if (window.innerWidth < 640) {
        setMobile(true);
      } else {
        setMobile(false);
      }
    };
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  });
  React.useLayoutEffect(() => {
    const hint = hintElementRef.current;
    if (state.visible && targetElement && hint) {
      const anchorElementRect = targetElement.getBoundingClientRect();
      const hintElementRect = hint.getBoundingClientRect();
      if (isMobile) {
        if (window.innerHeight - anchorElementRect.bottom > hintElementRect.height) {
          setPortalFlexDirection("column");
        } else {
          setPortalFlexDirection("column-reverse");
        }
        setPortalFullWidth(true);
        hint.style.alignSelf = "center";
        hint.style.margin = "0";
      } else {
        const direction = getHintDirection(targetElement, hint);
        switch (direction) {
          case "top-pageCenter":
            setPortalFlexDirection("column-reverse");
            setPortalFullWidth(true);
            hint.style.alignSelf = "center";
            hint.style.margin = "0";
            break;
          case "bottom-pageCenter":
            setPortalFlexDirection("column");
            setPortalFullWidth(true);
            hint.style.alignSelf = "center";
            hint.style.margin = "0";
            break;
          case "top-right":
            setPortalFlexDirection("column-reverse");
            setPortalFullWidth(false);
            hint.style.alignSelf = "flex-start";
            hint.style.margin = "0 0 0 -8px";
            break;
          case "bottom-right":
            setPortalFlexDirection("column");
            setPortalFullWidth(false);
            hint.style.alignSelf = "flex-start";
            hint.style.margin = "0 0 0 -8px";
            break;
          case "top-left":
            setPortalFlexDirection("column-reverse");
            setPortalFullWidth(false);
            hint.style.alignSelf = "flex-end";
            hint.style.margin = "0 -8px 0 0";
            break;
          case "bottom-left":
          default:
            setPortalFlexDirection("column");
            setPortalFullWidth(false);
            hint.style.alignSelf = "flex-end";
            hint.style.margin = "0 -8px 0 0";
        }
      }
    }
  }, [
    target == null ? void 0 : target.current,
    anchorElementRef.current,
    hintElementRef.current,
    state.visible,
    state.recalculation,
    dimension,
    content,
    isMobile
  ]);
  const attachRef = (node) => handleRef(node, hintRef, hintElementRef);
  const scrollableParents = React.useMemo(() => {
    var _a;
    return (_a = getScrollableParents(anchorElementRef.current)) != null ? _a : [];
  }, [anchorElementRef.current]);
  const handleMouseEnter = () => {
    dispatch({ type: "setVisible" });
  };
  const handleKeyDown = (event) => {
    const code = keyboardKey.getCode(event);
    if (code === keyboardKey.Enter || code === keyboardKey[" "]) {
      event.preventDefault();
      dispatch({ type: "setVisible" });
    }
  };
  React.useEffect(() => {
    if (hintElementRef.current) {
      hintElementRef.current.style.opacity = "1";
      setTrapFocus(true);
    }
  }, [hintElementRef.current, state.visible]);
  return /* @__PURE__ */ React.createElement(AnchorWrapper, {
    onMouseEnter: visibilityTrigger === "click" ? void 0 : handleMouseEnter,
    onMouseLeave: visibilityTrigger === "click" ? void 0 : hideHint,
    onFocus: visibilityTrigger === "click" ? void 0 : handleMouseEnter,
    onBlur: visibilityTrigger === "click" ? void 0 : hideHint,
    onClick: visibilityTrigger === "click" ? handleMouseEnter : void 0,
    onKeyDown: visibilityTrigger === "click" ? handleKeyDown : void 0,
    ref: anchorElementRef,
    className: anchorClassName,
    id: anchorId,
    anchorCssMixin
  }, children, state.visible && /* @__PURE__ */ React.createElement(Portal, {
    targetRef,
    container,
    flexDirection: portalFlexDirection,
    fullContainerWidth: portalFullWidth
  }, /* @__PURE__ */ React.createElement(FakeTarget, null), /* @__PURE__ */ React.createElement(HintContainer, {
    ref: attachRef,
    dimension,
    isMobile,
    content,
    visibilityTrigger,
    scrollableParents,
    dispatch,
    anchorElementRef,
    anchorId,
    trapFocus,
    ...props2
  })));
};
Hint$1.displayName = "Hint";
const COUNTER_WIDTH = 35;
const CHIP_OFFSET = 4;
const scrollToNotVisibleELem = (elem, scrollElem) => {
  const offsetFromScrollWrap = elem.offsetTop - scrollElem.offsetTop;
  const overTop = offsetFromScrollWrap < scrollElem.scrollTop;
  const overBottom = offsetFromScrollWrap + elem.clientHeight > scrollElem.scrollTop + scrollElem.clientHeight;
  if (overTop) {
    scrollElem.scrollTop = offsetFromScrollWrap;
  }
  if (overBottom) {
    scrollElem.scrollTop = offsetFromScrollWrap + elem.clientHeight - scrollElem.clientHeight;
  }
};
const getTextHighlightMeta = (text = "", highlight = "", highlightFormat = "word") => {
  const splitedHighlight = highlightFormat === "word" ? highlight.split(" ") : [highlight];
  const chunks = splitedHighlight.filter(Boolean).map((chunk) => chunk.toLowerCase());
  const specialCaracters = ["[", "]", "\\", "^", "$", ".", "|", "?", "*", "+", "(", ")"];
  const pattern = chunks.map((chunk) => {
    const chunkForRegExp = chunk.split("").map((letter) => specialCaracters.includes(letter) ? `\\${letter}` : letter).join("");
    return `(${chunkForRegExp})?`;
  }).join("");
  const parts = text.split(new RegExp(pattern, "gi")).filter(Boolean);
  const shouldHiglight = !highlight ? true : parts.some((part) => chunks.includes(part.toLowerCase()));
  return { shouldHiglight, parts, chunks };
};
const preventDefault = (e) => e.preventDefault();
const ChipBox = styled.div`
  display: flex;
`;
const CounterChipWrap = styled.div`
  display: flex;
  width: ${COUNTER_WIDTH}px;
  > * {
    width: ${COUNTER_WIDTH}px;
    border-radius: 16px;
    // Убирает действие inline-block
    display: flex;
  }
`;
const ShadowCounterChip = styled.div`
  width: ${COUNTER_WIDTH}px;
  height: 24px;
`;
const ChipsHintWrap = styled.div`
  display: flex;
  gap: 4px;
  flex-direction: column;
  align-items: flex-start;
`;
const disabledChipStyle = css`
  pointer-events: auto;
  :hover {
    color: ${({ theme }) => theme.color.text.tertiary};
    background-color: ${({ theme }) => theme.color.background.tertiary};
    border: 1px solid ${({ theme }) => theme.color.background.tertiary};
  }
  svg {
    pointer-events: none;
  }
`;
const StyledChip = styled(Chips)`
  margin-right: 4px;
  // Убирает пробел от inline-flex
  display: flex;
  ${({ disabled }) => disabled ? disabledChipStyle : ""};

  @media (max-width: 768px) {
    max-width: 140px;
  }
`;
const StyledCounterChip = styled(Chips)`
  flex-shrink: 0;
  flex-grow: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 35px;
  padding: 4px 0;
`;
const ContentTooltop = styled.div`
  max-width: 488px;

  @media (max-width: 768px) {
    max-width: 250px;
  }
`;
const CounterChip$1 = ({ children, count, disabled, onClick }) => {
  const ref = React.useRef(null);
  const renderContent = React.useCallback(() => /* @__PURE__ */ React.createElement(ChipsHintWrap, null, children), [children]);
  if (!count)
    return /* @__PURE__ */ React.createElement(ShadowCounterChip, null);
  return /* @__PURE__ */ React.createElement(CounterChipWrap, {
    onClick,
    ref
  }, /* @__PURE__ */ React.createElement(Hint$1, {
    renderContent,
    target: ref,
    dimension: "s"
  }, /* @__PURE__ */ React.createElement(StyledCounterChip, {
    tabIndex: -1,
    dimension: "s",
    appearance: "filled",
    disabled
  }, "+", count)));
};
const Chip = ({ className, option, disabled, onClick, onChipRemove }) => {
  const renderContentTooltip = React.useCallback((children) => () => /* @__PURE__ */ React.createElement(ContentTooltop, null, children), []);
  return /* @__PURE__ */ React.createElement(StyledChip, {
    className,
    tabIndex: -1,
    dimension: "s",
    appearance: "filled",
    onClick,
    onClose: getChipMeta(option, onChipRemove).onClose,
    disabled: getChipMeta(option, onChipRemove).disabled || disabled,
    renderContentTooltip: renderContentTooltip(getChipMeta(option, onChipRemove).children)
  }, getChipMeta(option, onChipRemove).children);
};
const chipIsChipMeta = (chip) => typeof chip === "object" && chip !== null && !React.isValidElement(chip);
const getChipMeta = ({ value, disabled, renderChip }, onChipRemove) => {
  const chip = renderChip();
  return chipIsChipMeta(chip) ? { ...chip, onClose: () => {
    var _a;
    return (_a = chip.onClose) == null ? void 0 : _a.call(chip, { value, disabled });
  } } : { disabled, onClose: () => onChipRemove(value), children: chip };
};
const MultipleSelectChips = ({
  options,
  shouldShowCount,
  disabled,
  onChipClick,
  onChipRemove
}) => /* @__PURE__ */ React.createElement(React.Fragment, null, options.map((option, optionInd) => /* @__PURE__ */ React.createElement(ChipBox, {
  key: option.value,
  onMouseDown: preventDefault
}, /* @__PURE__ */ React.createElement(Chip, {
  className: "chip",
  option,
  disabled,
  onClick: onChipClick,
  onChipRemove
}), shouldShowCount && /* @__PURE__ */ React.createElement(CounterChip$1, {
  onClick: onChipClick,
  count: options.length - optionInd - 1,
  disabled
}, options.slice(optionInd + 1).map((innerOption) => /* @__PURE__ */ React.createElement(Chip, {
  key: innerOption.value,
  option: innerOption,
  disabled,
  onClick: onChipClick,
  onChipRemove
}))), !shouldShowCount && /* @__PURE__ */ React.createElement(ShadowCounterChip, null))));
const getSelectValueHeight = (dimension, multiple) => dimension === "s" && !multiple ? 20 : 24;
const ClearIcon$2 = styled(ReactComponent$7)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const Dropdown = styled(Dropdown$3)`
  padding: 8px 0;

  max-height: 256px;
  overflow: auto;

  option {
    display: none;
  }
`;
const NativeSelect = styled.select`
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  border: none;
  pointer-events: none;
`;
const fixHeightStyle = css`
  height: ${({ multiple, dimension }) => getSelectValueHeight(dimension, multiple)}px;
`;
const chipsShiftStyle = css`
  > * {
    margin-left: ${`-${COUNTER_WIDTH + CHIP_OFFSET}px`};
  }
  padding-left: ${`${COUNTER_WIDTH + CHIP_OFFSET}px`};
`;
const ValueWrapper = styled.div`
  flex: 1 1 auto;
  display: flex;
  overflow: hidden;

  ${({ multiple, isEmpty }) => multiple && !isEmpty && chipsShiftStyle}

  gap: 4px;
  flex-wrap: ${({ multiple }) => multiple ? "wrap" : "unset"};
  align-items: center;

  ${(props2) => props2.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  ${({ fixHeight }) => fixHeight && fixHeightStyle}

  [data-disabled='true'] & {
    color: ${(props2) => props2.theme.color.text.tertiary};
  }
`;
const StringValueWrapper = styled.div`
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;
const ieFixes$1 = css`
  ::-ms-clear,
  ::-ms-reveal {
    display: none;
  }
`;
const Input$3 = styled.input`
  outline: none;
  appearance: none;

  box-sizing: border-box;
  flex: 1 1 auto;
  width: 100px;
  border: none;
  background: transparent;
  text-overflow: ellipsis;
  padding: 0;

  color: ${(props2) => props2.theme.color.text.primary};

  ${({ dimension }) => dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}

  &::placeholder {
    color: ${(props2) => props2.theme.color.text.secondary};
  }

  &:disabled,
  &:disabled::placeholder {
    cursor: inherit;
    color: ${(props2) => props2.theme.color.text.tertiary};
  }

  [data-read-only] & {
    user-select: none;
    pointer-events: none;
  }

  height: ${({ dimension, isMultiple }) => `${getSelectValueHeight(dimension, isMultiple)}px`};

  ${ieFixes$1};

  [data-status='error'] &,
  &:invalid {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }

  [data-status='success'] & {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
`;
const disabledStyle = css`
  pointer-events: none;
  cursor: default;
`;
const SelectWrapper$3 = styled.div`
  box-sizing: border-box;

  display: flex;
  align-items: flex-start;

  cursor: pointer;

  ${({ disabled, readonly }) => readonly || disabled ? disabledStyle : ""};

  background: ${({ theme, disabled }) => disabled ? theme.color.background.tertiary : theme.color.background.primary};
  position: relative;

  padding: ${({ dimension, multiple }) => {
  switch (dimension) {
    case "xl":
      return "15px 16px";
    case "s":
      return multiple ? "3px 12px" : "5px 12px";
    default:
      return "7px 16px";
  }
}};

  border-radius: 4px;
  border-color: ${({ theme, disabled, focused }) => {
  if (focused)
    return theme.color.basic.press;
  if (disabled)
    return "transparent";
  return theme.color.basic.tertiary;
}};

  border-width: 1px;
  border-style: solid;

  &:hover {
    border-color: ${({ theme, disabled }) => disabled ? "transparent" : theme.color.basic.hover};
  }

  &[data-status='error'] {
    border-color: ${(p) => p.theme.color.status.danger};
  }

  &[data-status='success'] {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
`;
const IconPanel$3 = styled.div`
  flex: 0 0 auto;

  display: flex;
  align-items: center;

  padding: ${({ dimension, multiple }) => dimension === "s" && multiple ? "2px 0" : "0"};

  & > * {
    margin-left: 8px;
    display: block;
    width: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
    height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  }

  [data-disabled='true'] & {
    & *[fill^='#'] {
      fill: ${(props2) => props2.theme.color.text.tertiary};
    }
  }
`;
const Hidden = styled.div`
  position: absolute;
  width: 0;
  height: 0;
  opacity: 0;
  overflow: hidden;
  pointer-events: none;
`;
const OptionWrapper = styled.div`
  flex: 0 0 auto;

  word-break: break-word;
  display: flex;
  align-items: center;
  padding: ${({ dimension }) => {
  switch (dimension) {
    case "xl":
      return "12px 16px";
    case "s":
      return "6px 12px";
    default:
      return "8px 16px";
  }
}};

  background-color: transparent;

  ${({ dimension }) => {
  switch (dimension) {
    case "xl":
      return typography$1["Body/Body 1 Long"];
    case "s":
      return typography$1["Body/Body 2 Long"];
    default:
      return typography$1["Body/Body 1 Short"];
  }
}}
`;
const DropDownText = styled(OptionWrapper)`
  color: ${({ theme }) => theme.color.text.tertiary};
`;
const HighlightText = styled.span`
  color: ${(p) => p.theme.color.basic.primary};
`;
const Panel = styled.div`
  color: inherit;
`;
const Highlight = ({ children = "", ...props2 }) => {
  const selectContext = useDropDownSearchSelectContext();
  const optionContext = useOptionContext();
  const searchValue = (selectContext == null ? void 0 : selectContext.searchValue) || "";
  const { chunks, parts } = React.useMemo(() => getTextHighlightMeta(children, searchValue, selectContext == null ? void 0 : selectContext.highlightFormat), [children, searchValue]);
  React.useEffect(() => {
    optionContext == null ? void 0 : optionContext.onAddTextToHighlight(children);
  }, [optionContext == null ? void 0 : optionContext.onAddTextToHighlight, children]);
  return /* @__PURE__ */ React.createElement(Panel, {
    ...props2,
    title: children
  }, parts.map((part, i) => chunks.includes(part.toLowerCase()) ? /* @__PURE__ */ React.createElement(HighlightText, {
    key: i
  }, part) : part));
};
const CustomOption = styled(OptionWrapper)`
  background-color: ${({ active, selected, theme }) => {
  if (selected)
    return theme.color.background.tertiary;
  if (active)
    return theme.color.background.secondary;
  return "transparent";
}};

  color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.text.primary};
  cursor: ${({ disabled }) => disabled ? "text" : "pointer"};
  pointer-events: ${({ disabled }) => disabled ? "none" : "all"};
`;
const StyledCheckbox$1 = styled(Checkbox)`
  margin-right: 8px;
  flex-shrink: 0;
`;
const DropDownOption = ({
  disabled = false,
  value,
  children,
  renderOption,
  renderChip: _renderChip,
  ...htmlProps
}) => {
  const selectContext = useDropDownSearchSelectContext();
  const optionGroupContext = useOptionGroupContext();
  const optionIsDiabled = (optionGroupContext == null ? void 0 : optionGroupContext.disabled) || disabled;
  const childrenOrHiglightedChildren = React.useMemo(() => typeof children === "string" && (selectContext == null ? void 0 : selectContext.defaultHighlighted) ? /* @__PURE__ */ React.createElement(Highlight, null, children) : children, [selectContext == null ? void 0 : selectContext.defaultHighlighted, children]);
  const defaultMultipleOption = React.useMemo(() => {
    var _a;
    return /* @__PURE__ */ React.createElement(React.Fragment, null, (selectContext == null ? void 0 : selectContext.showCheckbox) && /* @__PURE__ */ React.createElement(StyledCheckbox$1, {
      checked: (_a = selectContext == null ? void 0 : selectContext.selectValue) == null ? void 0 : _a.includes(value),
      dimension: (selectContext == null ? void 0 : selectContext.dimension) === "s" ? "s" : "m",
      disabled,
      readOnly: true
    }), childrenOrHiglightedChildren);
  }, [
    selectContext == null ? void 0 : selectContext.selectValue,
    selectContext == null ? void 0 : selectContext.dimension,
    selectContext == null ? void 0 : selectContext.showCheckbox,
    childrenOrHiglightedChildren,
    value
  ]);
  const ref = React.useRef(null);
  const renderDefaultOption = React.useCallback(() => (selectContext == null ? void 0 : selectContext.multiple) ? defaultMultipleOption : childrenOrHiglightedChildren, [selectContext == null ? void 0 : selectContext.multiple, defaultMultipleOption, childrenOrHiglightedChildren]);
  const onClick = React.useCallback(() => {
    var _a;
    return (_a = selectContext == null ? void 0 : selectContext.onOptionClick) == null ? void 0 : _a.call(selectContext, value);
  }, [selectContext == null ? void 0 : selectContext.onOptionClick, value]);
  const onHover = React.useCallback(() => {
    var _a;
    return (_a = selectContext == null ? void 0 : selectContext.onMouseEnter) == null ? void 0 : _a.call(selectContext, value);
  }, [selectContext == null ? void 0 : selectContext.onMouseEnter, value]);
  const option = React.useMemo(() => ({
    value,
    disabled: optionIsDiabled,
    ref
  }), [value, optionIsDiabled]);
  const resultChildren = React.useMemo(() => renderOption ? renderOption({
    disabled,
    searchValue: selectContext == null ? void 0 : selectContext.searchValue,
    isHovered: (selectContext == null ? void 0 : selectContext.hoverValue) === value
  }) : renderDefaultOption(), [renderOption, renderDefaultOption, disabled, value, selectContext == null ? void 0 : selectContext.searchValue, selectContext == null ? void 0 : selectContext.hoverValue]);
  React.useEffect(() => {
    var _a;
    (_a = selectContext == null ? void 0 : selectContext.onDropDownOptionMount) == null ? void 0 : _a.call(selectContext, option);
    return () => {
      var _a2;
      return (_a2 = selectContext == null ? void 0 : selectContext.onDropDownOptionUnMount) == null ? void 0 : _a2.call(selectContext, option);
    };
  }, [selectContext == null ? void 0 : selectContext.onDropDownOptionMount, selectContext == null ? void 0 : selectContext.onDropDownOptionUnMount, option]);
  return /* @__PURE__ */ React.createElement(CustomOption, {
    ref,
    disabled: optionIsDiabled,
    selected: (selectContext == null ? void 0 : selectContext.selectValue) === value,
    active: (selectContext == null ? void 0 : selectContext.hoverValue) === value,
    dimension: selectContext == null ? void 0 : selectContext.dimension,
    onMouseDown: onClick,
    onMouseEnter: onHover,
    ...htmlProps
  }, resultChildren);
};
const ConstantOption = ({ disabled = false, value, children, renderOption, renderChip }) => {
  const selectContext = useConstantSearchSelectContext();
  const optionGroupContext = useOptionGroupContext();
  const optionIsDiabled = (optionGroupContext == null ? void 0 : optionGroupContext.disabled) || disabled;
  const defaultRenderChip = React.useCallback(() => children, [children]);
  const resultRenderChip = renderChip || defaultRenderChip;
  const resultChildren = React.useMemo(() => renderOption ? renderOption({
    disabled,
    searchValue: selectContext == null ? void 0 : selectContext.searchValue
  }) : children, [renderOption, disabled, value, children, selectContext == null ? void 0 : selectContext.searchValue]);
  const option = React.useMemo(() => ({
    value,
    disabled: optionIsDiabled,
    children: resultChildren,
    renderChip: resultRenderChip
  }), [value, optionIsDiabled, resultChildren, resultRenderChip]);
  React.useEffect(() => {
    var _a;
    (_a = selectContext == null ? void 0 : selectContext.onConstantOptionMount) == null ? void 0 : _a.call(selectContext, option);
    return () => {
      var _a2;
      return (_a2 = selectContext == null ? void 0 : selectContext.onConstantOptionUnMount) == null ? void 0 : _a2.call(selectContext, option);
    };
  }, [selectContext == null ? void 0 : selectContext.onConstantOptionMount, selectContext == null ? void 0 : selectContext.onConstantOptionUnMount, option]);
  return null;
};
const ConstantOptionWrapper = (props2) => {
  const constantSelectContext = useConstantSearchSelectContext();
  if (!constantSelectContext)
    return null;
  return /* @__PURE__ */ React.createElement(ConstantOption, {
    ...props2
  });
};
const DropDownOptionWrapper = (props2) => {
  const [textsToHighlight, setTextsToHighlight] = React.useState(null);
  const dropDownSelectContext = useDropDownSearchSelectContext();
  const highlighted = textsToHighlight == null ? void 0 : textsToHighlight.some((text) => getTextHighlightMeta(text, dropDownSelectContext == null ? void 0 : dropDownSelectContext.searchValue, dropDownSelectContext == null ? void 0 : dropDownSelectContext.highlightFormat).shouldHiglight);
  const onAddTextToHighlight = React.useCallback((text) => setTextsToHighlight((prev) => Array.from(/* @__PURE__ */ new Set([...prev || [], text]))), []);
  const shouldRender = textsToHighlight === null || highlighted;
  return /* @__PURE__ */ React.createElement(OptionProvider, {
    onAddTextToHighlight
  }, dropDownSelectContext && shouldRender && /* @__PURE__ */ React.createElement(DropDownOption, {
    ...props2
  }));
};
const Option$1 = (props2) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ConstantOptionWrapper, {
  ...props2
}), /* @__PURE__ */ React.createElement(DropDownOptionWrapper, {
  ...props2
}));
const Category = styled(OptionWrapper)`
  font-weight: 500;
`;
const OptionGroup = ({ label, disabled = false, children }) => {
  const selectContext = useDropDownSearchSelectContext();
  return /* @__PURE__ */ React.createElement(OptionGroupProvider, {
    label,
    disabled
  }, /* @__PURE__ */ React.createElement(Category, {
    dimension: selectContext == null ? void 0 : selectContext.dimension
  }, label), children);
};
const DEFAULT_LOADING_TEXT = "\u041F\u043E\u0438\u0441\u043A \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u0439";
const findAbledOptionValue = (options) => {
  var _a;
  return (_a = options.find(({ disabled }) => !disabled)) == null ? void 0 : _a.value;
};
const stopPropagation = (evt) => evt.stopPropagation();
const SearchSelect = React.forwardRef(({
  value,
  isLoading,
  className,
  style,
  status,
  icons,
  portalTargetRef,
  disabled,
  placeholder,
  defaultValue,
  dimension = "m",
  idleHeight = "fixed",
  mode = "searchSelect",
  highlightFormat = "word",
  multiple = false,
  defaultHighlighted = true,
  showCheckbox = true,
  displayStatusIcon = false,
  displayClearIcon = false,
  onClearIconClick,
  loadingMessage = DEFAULT_LOADING_TEXT,
  onInputChange,
  inputValue,
  defaultInputValue,
  renderSelectValue,
  onFocus: onFocusFromProps,
  onBlur: onBlurFromProps,
  children,
  ...props2
}, ref) => {
  var _a;
  const [localValue, setLocalValue] = React.useState(value != null ? value : defaultValue);
  const [internalSearchValue, setSearchValue] = React.useState("");
  const searchValue = inputValue === void 0 ? internalSearchValue : inputValue;
  const [hoverValue, setHoverValue] = React.useState("");
  const [shouldRenderSelectValue, setShouldRenderSelectValue] = React.useState(false);
  const [constantOptions, setConstantOptions] = React.useState([]);
  const [dropDownOptions, setDropDownOptions] = React.useState([]);
  const [isSearchPanelOpen, setIsSearchPanelOpen] = React.useState(false);
  const [isFocused, setIsFocused] = React.useState(false);
  const selectIsUncontrolled = value === void 0;
  const modeIsSelect = mode === "select";
  const selectedOption = React.useMemo(() => multiple ? null : constantOptions.find((option) => option.value === localValue), [multiple, constantOptions, localValue]);
  const selectedOptions = React.useMemo(() => multiple ? constantOptions.filter((option) => localValue == null ? void 0 : localValue.includes(option.value)) : [], [constantOptions, localValue, multiple]);
  const hoverOptionIndex = React.useMemo(() => dropDownOptions.findIndex((option) => option.value === hoverValue), [dropDownOptions, hoverValue]);
  const dropDownChildren = React.useMemo(() => {
    if (isLoading)
      return /* @__PURE__ */ React.createElement(DropDownText, null, loadingMessage);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, !dropDownOptions.length && /* @__PURE__ */ React.createElement(DropDownText, null, "\u041D\u0435\u0442 \u0441\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u0439"), children);
  }, [isLoading, loadingMessage, children, dropDownOptions]);
  const inputRef = React.useRef(null);
  const selectRef = React.useRef(null);
  const containerRef = React.useRef(null);
  const dropDownRef = React.useRef(null);
  const mutableState = React.useRef({
    shouldExtendInputValue: false
  });
  const onConstantOptionMount = React.useCallback((option) => setConstantOptions((prev) => [...prev, option]), []);
  const onConstantOptionUnMount = React.useCallback((option) => setConstantOptions((prev) => prev.filter((prevOption) => prevOption.value !== option.value)), []);
  const onDropDownOptionMount = React.useCallback((option) => setDropDownOptions((prev) => [...prev, option]), []);
  const onDropDownOptionUnMount = React.useCallback((option) => setDropDownOptions((prev) => prev.filter((prevOption) => prevOption.value !== option.value)), []);
  const onCloseSelect = React.useCallback(() => {
    setIsSearchPanelOpen(false);
    setHoverValue(Array.isArray(localValue) ? localValue[0] : localValue || "");
    if (inputRef.current)
      changeInputData(inputRef.current, { value: "" });
    setShouldRenderSelectValue(true);
  }, [localValue]);
  const handleOptionSelect = React.useCallback((optionValue) => {
    const selectElem = selectRef.current;
    if (!selectElem)
      return;
    const optionElems = Array.from(selectElem.options);
    const targetOptionElem = optionElems.find((option) => option.value === optionValue);
    if (!targetOptionElem)
      return;
    if (!multiple)
      optionElems.forEach((option) => option.selected = false);
    targetOptionElem.selected = multiple ? !targetOptionElem.selected : true;
    selectElem.dispatchEvent(new Event("change", { bubbles: true }));
    if (!multiple)
      onCloseSelect();
  }, [onCloseSelect, multiple]);
  const resetOptions = React.useCallback(() => {
    const selectElem = selectRef.current;
    if (!selectElem)
      return;
    selectElem.selectedIndex = -1;
    selectElem.dispatchEvent(new Event("change", { bubbles: true }));
  }, []);
  const handleOnClear = onClearIconClick || resetOptions;
  const shouldFixMultiSelectHeight = idleHeight === "fixed" && !isSearchPanelOpen;
  const renderMultipleSelectValue = React.useCallback(() => /* @__PURE__ */ React.createElement(MultipleSelectChips, {
    options: selectedOptions,
    shouldShowCount: shouldFixMultiSelectHeight,
    disabled,
    onChipRemove: handleOptionSelect,
    onChipClick: stopPropagation
  }), [selectedOptions, shouldFixMultiSelectHeight, disabled, handleOptionSelect, stopPropagation]);
  const isEmptyValue = multiple ? !(localValue == null ? void 0 : localValue.length) : !localValue;
  const isEmpty = isEmptyValue && !!placeholder && !searchValue;
  const renderedSelectValue = renderSelectValue == null ? void 0 : renderSelectValue(localValue, searchValue);
  const renderedSelectedOption = selectedOption == null ? void 0 : selectedOption.children;
  const renderedDefaultSelectValue = multiple ? renderMultipleSelectValue() : renderedSelectedOption;
  const visibleValue = renderedSelectValue || renderedDefaultSelectValue || localValue || null;
  const visibleValueIsString = typeof visibleValue === "string";
  const shouldFixSingleSelectHeight = idleHeight === "fixed" && visibleValueIsString;
  const shouldFixHeight = multiple ? shouldFixMultiSelectHeight : shouldFixSingleSelectHeight;
  const wrappedVisibleValue = visibleValueIsString ? /* @__PURE__ */ React.createElement(StringValueWrapper, null, visibleValue) : visibleValue;
  const handleSearchPanelToggle = () => {
    setIsSearchPanelOpen((prev) => !prev);
  };
  const mutateAndExtendTargetInputValue = (evt) => {
    if (!mutableState.current.shouldExtendInputValue || !visibleValueIsString)
      return;
    evt.target.value = `${visibleValue}${evt.target.value}`;
    mutableState.current.shouldExtendInputValue = false;
  };
  const onSingleLocalInputChange = () => setShouldRenderSelectValue(false);
  const onLocalInputChange = (evt) => {
    if (!multiple)
      onSingleLocalInputChange();
    mutateAndExtendTargetInputValue(evt);
    if (inputValue === void 0)
      setSearchValue(evt.target.value);
    onInputChange == null ? void 0 : onInputChange(evt);
  };
  const onMultipleSelectBackSpace = () => {
    const lastAbledSelectedOptionValue = findAbledOptionValue(selectedOptions.reverse());
    if (!lastAbledSelectedOptionValue)
      return;
    handleOptionSelect(lastAbledSelectedOptionValue);
  };
  const deleteOrHideSelectValueOnBackspace = () => {
    if (searchValue || !localValue)
      return;
    if (!multiple)
      return setShouldRenderSelectValue(false);
    onMultipleSelectBackSpace();
  };
  const chooseOptionOnEnter = () => {
    const targetOption = dropDownOptions[hoverOptionIndex];
    if (!targetOption)
      return;
    handleOptionSelect(targetOption.value);
    if (multiple)
      return;
    onCloseSelect();
  };
  const onClosedSelectEnter = () => setIsSearchPanelOpen(true);
  const onOpenedSelectEnter = () => chooseOptionOnEnter();
  const onEnter = () => {
    if (isSearchPanelOpen)
      return onOpenedSelectEnter();
    onClosedSelectEnter();
  };
  const scrollToOption = (optionValue) => {
    var _a2, _b;
    const scrollElem = dropDownRef.current;
    const optionElem = (_b = (_a2 = dropDownOptions.find((option) => option.value === optionValue)) == null ? void 0 : _a2.ref) == null ? void 0 : _b.current;
    if (!scrollElem || !optionElem)
      return;
    scrollToNotVisibleELem(optionElem, scrollElem);
  };
  const findNextHoverOptionValue = React.useCallback(() => {
    const nextAbledOptionValue = findAbledOptionValue(dropDownOptions.slice(hoverOptionIndex + 1));
    if (nextAbledOptionValue)
      return nextAbledOptionValue;
    return findAbledOptionValue(dropDownOptions);
  }, [hoverOptionIndex, dropDownOptions]);
  const findPrevHoverOptionValue = React.useCallback(() => {
    const sliceInd = hoverOptionIndex === -1 ? void 0 : hoverOptionIndex;
    const prevAbledOptionValue = findAbledOptionValue(dropDownOptions.slice(0, sliceInd).reverse());
    if (prevAbledOptionValue)
      return prevAbledOptionValue;
    return findAbledOptionValue(dropDownOptions.slice().reverse());
  }, [hoverOptionIndex, dropDownOptions]);
  const handleKeyUp = (e) => {
    const code = keyboardKey.getCode(e);
    switch (code) {
      case keyboardKey.Enter: {
        onEnter();
        break;
      }
      case keyboardKey.Escape: {
        onCloseSelect();
        break;
      }
      case keyboardKey.ArrowUp: {
        const prevValue = findPrevHoverOptionValue();
        if (!prevValue)
          break;
        scrollToOption(prevValue);
        setHoverValue(prevValue);
        break;
      }
      case keyboardKey.ArrowDown: {
        const nextValue = findNextHoverOptionValue();
        if (!nextValue)
          break;
        scrollToOption(nextValue);
        setHoverValue(nextValue);
        break;
      }
    }
  };
  const onSelectKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (!code)
      return;
    const preventKeys = [keyboardKey.Enter, keyboardKey[" "], keyboardKey.ArrowDown, keyboardKey.ArrowUp];
    if (preventKeys.includes(code)) {
      e.preventDefault();
    }
  };
  const extendSelectValueToInputValue = () => {
    if (!visibleValueIsString || searchValue || !shouldRenderSelectValue)
      return;
    mutableState.current.shouldExtendInputValue = true;
  };
  const narrowSelectValueToInputValue = (evt) => {
    if (!visibleValueIsString || !inputRef.current || searchValue || !shouldRenderSelectValue || !localValue)
      return;
    evt.preventDefault();
    const newInputValue = visibleValue.slice(0, -1);
    changeInputData(inputRef.current, {
      value: newInputValue,
      selectionEnd: newInputValue.length,
      selectionStart: newInputValue.length
    });
  };
  const onWrapperKeyDown = (evt) => {
    const code = keyboardKey.getCode(evt);
    if (code === keyboardKey.ArrowUp || code === keyboardKey.ArrowDown)
      evt.preventDefault();
    if (evt.key.length === 1)
      extendSelectValueToInputValue();
    if (code === keyboardKey.Backspace && !evt.repeat)
      deleteOrHideSelectValueOnBackspace();
    if (code === keyboardKey.Backspace)
      narrowSelectValueToInputValue(evt);
    if (code === keyboardKey.Enter && isSearchPanelOpen)
      evt.preventDefault();
  };
  const onFocus = (evt) => {
    setIsFocused(true);
    onFocusFromProps == null ? void 0 : onFocusFromProps(evt);
  };
  const onBlur = (evt) => {
    if (!evt.currentTarget.contains(evt.relatedTarget)) {
      setIsFocused(false);
      onBlurFromProps == null ? void 0 : onBlurFromProps(evt);
      onCloseSelect();
    }
  };
  const onChange = (evt) => {
    var _a2;
    if (selectIsUncontrolled) {
      setLocalValue(multiple ? Array.from(evt.target.selectedOptions).map((option) => option.value) : evt.target.value);
    }
    (_a2 = props2.onChange) == null ? void 0 : _a2.call(props2, evt);
  };
  React.useEffect(() => {
    if (!Array.isArray(localValue))
      setHoverValue(localValue || "");
  }, [localValue]);
  React.useEffect(() => {
    if (!isFocused && !multiple || multiple)
      setShouldRenderSelectValue(true);
  }, [multiple, isFocused]);
  React.useEffect(() => {
    var _a2, _b;
    if (isSearchPanelOpen) {
      modeIsSelect ? (_a2 = selectRef.current) == null ? void 0 : _a2.focus() : (_b = inputRef.current) == null ? void 0 : _b.focus();
    }
  }, [isSearchPanelOpen, modeIsSelect]);
  React.useEffect(() => {
    if (!selectIsUncontrolled)
      setLocalValue(value);
  }, [value, selectIsUncontrolled]);
  useClickOutside([containerRef, dropDownRef], onCloseSelect);
  return /* @__PURE__ */ React.createElement(SelectWrapper$3, {
    className,
    style,
    focused: isFocused,
    multiple,
    disabled,
    "data-disabled": disabled,
    readonly: props2.readOnly,
    dimension,
    ref: containerRef,
    "data-status": status,
    onKeyUp: handleKeyUp,
    onKeyDown: onWrapperKeyDown,
    onClick: handleSearchPanelToggle,
    onMouseDown: preventDefault,
    onBlur,
    onFocus
  }, /* @__PURE__ */ React.createElement(Hidden, null, /* @__PURE__ */ React.createElement(ConstantSearchSelectProvider, {
    onConstantOptionMount,
    onConstantOptionUnMount,
    searchValue
  }, children)), /* @__PURE__ */ React.createElement(NativeSelect, {
    ref: refSetter(ref, selectRef),
    value: localValue,
    multiple,
    disabled,
    onKeyDown: onSelectKeyDown,
    ...props2,
    onChange
  }, /* @__PURE__ */ React.createElement("option", {
    value: ""
  }), constantOptions.map((option) => /* @__PURE__ */ React.createElement("option", {
    key: option.value,
    value: option.value
  }, option.value))), /* @__PURE__ */ React.createElement(ValueWrapper, {
    id: "selectValueWrapper",
    dimension,
    multiple,
    fixHeight: shouldFixHeight,
    isEmpty,
    onMouseDown: preventDefault
  }, shouldRenderSelectValue && wrappedVisibleValue, /* @__PURE__ */ React.createElement(Input$3, {
    placeholder: isEmpty ? placeholder : "",
    tabIndex: -1,
    ref: inputRef,
    disabled: modeIsSelect || disabled,
    value: searchValue,
    defaultValue: defaultInputValue,
    isMultiple: multiple,
    dimension,
    onChange: onLocalInputChange
  })), isSearchPanelOpen && /* @__PURE__ */ React.createElement(Dropdown, {
    id: "selectDropdownContainer",
    targetRef: portalTargetRef || containerRef,
    "data-dimension": dimension || ((_a = TextInput.defaultProps) == null ? void 0 : _a.dimension),
    onMouseDown: preventDefault,
    onClick: stopPropagation,
    ref: dropDownRef
  }, /* @__PURE__ */ React.createElement(DropDownSearchSelectProvider, {
    onOptionClick: handleOptionSelect,
    onMouseEnter: setHoverValue,
    onDropDownOptionMount,
    onDropDownOptionUnMount,
    highlightFormat,
    selectValue: localValue,
    searchValue,
    hoverValue,
    dimension,
    multiple,
    defaultHighlighted,
    showCheckbox
  }, dropDownChildren)), /* @__PURE__ */ React.createElement(IconPanel$3, {
    multiple,
    dimension,
    onClick: stopPropagation,
    onMouseDown: preventDefault
  }, displayClearIcon && /* @__PURE__ */ React.createElement(ClearIcon$2, {
    id: "searchSelectClearIcon",
    onClick: handleOnClear,
    "aria-hidden": true
  }), icons, displayStatusIcon && /* @__PURE__ */ React.createElement(StatusIcon, {
    status,
    "aria-hidden": true
  }), /* @__PURE__ */ React.createElement(OpenStatusButton, {
    $isOpen: isSearchPanelOpen,
    "data-disabled": disabled ? true : void 0,
    onClick: handleSearchPanelToggle,
    "aria-hidden": true
  })));
});
SearchSelect.displayName = "SearchSelect";
const INPUT_DIMENSIONS_VALUES = ["xl", "m", "s"];
const INPUT_STATUS_VALUES = ["error", "success"];
const ClearIcon$1 = styled(ReactComponent$7)`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const iconSizeValue = (props2) => {
  switch (props2.dimension) {
    case "xl":
      return 24;
    case "s":
      return 20;
    default:
      return 24;
  }
};
const horizontalPaddingValue = (props2) => {
  switch (props2.dimension) {
    case "xl":
      return 16;
    case "s":
      return 12;
    default:
      return 16;
  }
};
const extraPadding = css`
  padding-right: ${(props2) => props2.iconCount ? iconSizeValue(props2) + 8 : horizontalPaddingValue(props2)}px;
`;
const disabledColors = css`
  background-color: ${(props2) => props2.theme.color.background.tertiary};
  border-color: ${(props2) => props2.theme.color.background.tertiary};
`;
const colorsBorderAndBackground = css`
  background-color: ${(props2) => props2.theme.color.background.primary};
  border: 1px solid ${(props2) => props2.theme.color.basic.tertiary};
  border-radius: 4px;

  ${({ disabled }) => disabled ? disabledColors : ""}

  &:focus {
    border-color: ${(props2) => props2.theme.color.basic.press};
  }

  &:hover {
    border-color: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const ieFixes = css`
  ::-ms-clear,
  ::-ms-reveal {
    display: none;
  }
`;
const Text$4 = styled.textarea`
  outline: none;
  appearance: none;
  resize: none;

  box-sizing: border-box;
  flex: 1 1 auto;
  min-width: 10px;
  border: none;
  background: transparent;
  overflow: auto;
  padding: ${(props2) => props2.dimension === "xl" ? "" : "8px "}${horizontalPaddingValue}px;
  color: ${(props2) => props2.theme.color.text.primary};

  ${(props2) => props2.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  &::placeholder {
    color: ${(props2) => props2.theme.color.text.secondary};
  }

  &:disabled::placeholder {
    color: ${(props2) => props2.theme.color.text.tertiary};
  }

  [data-read-only] & {
    ${disabledColors}
  }

  ${colorsBorderAndBackground}
  ${extraPadding}
  ${ieFixes}
  [data-status='error'] &,
  &:invalid {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }

  [data-status='success'] & {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
`;
const Container$4 = styled.div`
  position: relative;
  display: flex;
  align-items: stretch;
  border: none;
`;
const IconPanel$2 = styled.div`
  position: absolute;
  top: 8px;
  bottom: 0;
  right: 0;

  display: flex;
  flex-direction: column;
  align-items: center;

  padding-right: 8px;

  & > * {
    display: block;
    width: ${iconSizeValue}px;
  }
`;
function defaultHandleInput(newInputData) {
  return newInputData;
}
const stopEvent = (e) => e.preventDefault();
const TextArea = React.forwardRef(({
  rows = 3,
  value,
  displayStatusIcon,
  displayClearIcon,
  status,
  handleInput = defaultHandleInput,
  containerRef,
  icons,
  children,
  className,
  autoHeight,
  ...props2
}, ref) => {
  const inputRef = React.useRef(null);
  const [textRows, setTextRows] = React.useState(rows);
  const iconArray = React.Children.toArray(icons);
  if (displayStatusIcon) {
    iconArray.push(/* @__PURE__ */ React.createElement(StatusIcon, {
      key: "status-icon",
      status,
      "aria-hidden": true
    }));
  }
  if (displayClearIcon) {
    iconArray.unshift(/* @__PURE__ */ React.createElement(ClearIcon$1, {
      key: "clear-icon",
      onClick: () => {
        if (inputRef.current) {
          changeInputData(inputRef.current, { value: "" });
        }
      },
      "aria-hidden": true
    }));
  }
  const iconCount = iconArray.length;
  const inputData = value !== void 0 && value !== null ? handleInput({ value: String(value) }) : {};
  React.useLayoutEffect(() => {
    function oninput() {
      const { value: value2, selectionStart, selectionEnd } = this;
      const currentInputData = { value: value2, selectionStart, selectionEnd };
      const inputData2 = handleInput(currentInputData);
      changeInputData(this, inputData2);
    }
    if (inputRef.current) {
      const node = inputRef.current;
      node.addEventListener("input", oninput);
      const { value: value2, selectionStart, selectionEnd } = node;
      const currentInputData = { value: value2, selectionStart, selectionEnd };
      const inputData2 = handleInput(currentInputData);
      changeInputData(node, inputData2);
      return () => {
        node.removeEventListener("input", oninput);
      };
    }
  }, [inputRef.current, handleInput]);
  const onChange = (e) => {
    var _a;
    if (autoHeight) {
      const textareaLineHeight = 24;
      const previousRows = e.target.rows;
      e.target.rows = rows;
      const currentRows = ~~(e.target.scrollHeight / textareaLineHeight);
      if (currentRows === previousRows) {
        e.target.rows = currentRows;
      }
      if (currentRows >= previousRows) {
        e.target.rows = currentRows;
        e.target.scrollTop = e.target.scrollHeight;
      }
      const rowCount = currentRows > rows ? currentRows : rows;
      setTextRows(rowCount);
    }
    (_a = props2.onChange) == null ? void 0 : _a.call(props2, e);
  };
  return /* @__PURE__ */ React.createElement(Container$4, {
    className,
    disabled: props2.disabled,
    dimension: props2.dimension,
    ref: containerRef,
    "data-read-only": props2.readOnly ? true : void 0,
    "data-status": status,
    ...props2.disableCopying && {
      onMouseDown: stopEvent
    }
  }, /* @__PURE__ */ React.createElement(Text$4, {
    ref: refSetter(ref, inputRef),
    ...props2,
    iconCount,
    value: inputData.value,
    rows: textRows,
    onChange
  }), iconCount > 0 && /* @__PURE__ */ React.createElement(IconPanel$2, {
    disabled: props2.disabled,
    dimension: props2.dimension
  }, iconArray), children);
});
TextArea.displayName = "TextArea";
function splice(oldString, start, delCount, newSubStr) {
  return oldString.slice(0, start) + newSubStr + oldString.slice(start + Math.abs(delCount));
}
function isValidTime$1(string) {
  const onlyDigitsString = string.replace(/\D+/g, "");
  if (onlyDigitsString.length === 1) {
    return /^([0-2])?$/.test(onlyDigitsString);
  }
  if (onlyDigitsString.length === 2) {
    return /^([0-1]?[0-9]|2[0-3])?$/.test(onlyDigitsString);
  }
  if (onlyDigitsString.length === 3) {
    return /^([0-1]?[0-9]|2[0-3]):([0-5])?$/.test(string.slice(0, -1));
  }
  if (onlyDigitsString.length === 4) {
    return /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])?$/.test(string);
  }
  return true;
}
const MASK_VALUE = "__:__";
function defaultTimeInputHandle(inputData) {
  if (inputData === null) {
    return { value: MASK_VALUE, selectionStart: 0, selectionEnd: 0 };
  }
  const selectionStart = inputData.selectionStart || 0;
  let inputValue = inputData.value || "";
  let moveCursor = 0;
  if (!inputValue.includes(":")) {
    inputValue = `${inputValue.substring(0, 2)}:${inputValue.substring(2, 4)}`;
    return { ...inputData, value: inputValue };
  }
  const lengthDifference = inputValue.length - MASK_VALUE.length;
  if (inputValue.replace(/\d/g, "_") === MASK_VALUE)
    return inputData;
  if (lengthDifference < 0) {
    inputValue = splice(inputValue, selectionStart, 0, MASK_VALUE.substring(0, -lengthDifference));
    if (inputValue.charAt(selectionStart - 1) === ":") {
      moveCursor = lengthDifference;
    }
    return {
      ...inputData,
      value: inputValue,
      selectionStart: selectionStart + moveCursor,
      selectionEnd: selectionStart + moveCursor
    };
  }
  if (inputValue.charAt(selectionStart) === ":") {
    moveCursor = 1;
  }
  const spliced = inputValue.replace(/:/g, "");
  inputValue = `${spliced.substring(0, 2).replace(/\D/g, "_")}:${spliced.substring(2, 4).replace(/\D/g, "_")}`;
  if (inputValue.replace(/\D+/g, "").length > 0 && !isValidTime$1(inputValue)) {
    if (inputValue.charAt(selectionStart - 1) === ":") {
      inputValue = inputValue.replace(inputValue.charAt(selectionStart), "_");
      moveCursor = 0;
    } else {
      inputValue = inputValue.replace(inputValue.charAt(selectionStart - 1), "_");
      moveCursor = -1;
    }
  }
  return {
    ...inputData,
    value: inputValue,
    selectionStart: selectionStart + moveCursor,
    selectionEnd: selectionStart + moveCursor
  };
}
const activeSlot = css`
  background-color: ${(p) => p.theme.color.background.secondary};
`;
const SlotStyle = styled.li`
  position: relative;
  display: flex;
  justify-content: center;
  color: ${(p) => p.disabled ? p.theme.color.text.tertiary : p.theme.color.text.primary};
  cursor: ${(p) => p.disabled ? "not-allowed" : "pointer"};
  &[data-dimension='xl'] {
    padding: 12px 16px;
  }
  &[data-dimension='m'] {
    padding: 8px 16px;
  }
  &[data-dimension='s'] {
    padding: 6px 12px;
  }

  &:hover {
    background: ${(p) => p.disabled ? "" : p.theme.color.background.secondary};
  }

  ${(p) => p.selected && !p.active && !p.disabled || p.active && !p.disabled ? activeSlot : ""}
`;
const Slot = ({ value, ...props2 }) => {
  return /* @__PURE__ */ React.createElement(SlotStyle, {
    ...props2
  }, value);
};
const isValidTime = (time) => {
  const timeReg = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])?$/;
  return timeReg.test(time);
};
const parseStringToTime = (t = "") => {
  const [hhStr, mmStr] = t.split(":");
  const time = `${!isNaN(+hhStr)}:${!isNaN(+mmStr)}`;
  return isValidTime(time) ? time : null;
};
const getTimeInMinutes = (str) => {
  const strParts = str.split(":");
  return Number(strParts[0]) * 60 + Number(strParts[1]);
};
const slots = [
  { value: "00:00", disabled: false },
  { value: "00:30", disabled: false },
  { value: "01:00", disabled: false },
  { value: "01:30", disabled: false },
  { value: "02:00", disabled: false },
  { value: "02:30", disabled: false },
  { value: "03:00", disabled: false },
  { value: "03:30", disabled: false },
  { value: "04:00", disabled: false },
  { value: "04:30", disabled: false },
  { value: "05:00", disabled: false },
  { value: "05:30", disabled: false },
  { value: "06:00", disabled: false },
  { value: "06:30", disabled: false },
  { value: "07:00", disabled: false },
  { value: "07:30", disabled: false },
  { value: "08:00", disabled: false },
  { value: "08:30", disabled: false },
  { value: "09:00", disabled: false },
  { value: "09:30", disabled: false },
  { value: "10:00", disabled: false },
  { value: "10:30", disabled: false },
  { value: "11:00", disabled: false },
  { value: "11:30", disabled: false },
  { value: "12:00", disabled: false },
  { value: "12:30", disabled: false },
  { value: "13:00", disabled: false },
  { value: "13:30", disabled: false },
  { value: "14:00", disabled: false },
  { value: "14:30", disabled: false },
  { value: "15:00", disabled: false },
  { value: "15:30", disabled: false },
  { value: "16:00", disabled: false },
  { value: "16:30", disabled: false },
  { value: "17:00", disabled: false },
  { value: "17:30", disabled: false },
  { value: "18:00", disabled: false },
  { value: "18:30", disabled: false },
  { value: "19:00", disabled: false },
  { value: "19:30", disabled: false },
  { value: "20:00", disabled: false },
  { value: "20:30", disabled: false },
  { value: "21:00", disabled: false },
  { value: "21:30", disabled: false },
  { value: "22:00", disabled: false },
  { value: "22:30", disabled: false },
  { value: "23:00", disabled: false },
  { value: "23:30", disabled: false }
];
const Icon$5 = styled(ReactComponent$a)`
  & *[fill^='#'] {
    fill: ${(p) => p.theme.color.text.secondary};
  }

  [disabled] & {
    pointer-events: none;
  }

  &:hover {
    cursor: pointer;
  }

  &:hover *[fill^='#'] {
    fill: ${(p) => p.theme.color.basic.hover};
  }
`;
const SlotContainer = styled.ul`
  pointer-events: initial;
  padding: 8px 0;
  margin: 0;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: ${(p) => p.theme.color.background.primary};
  border-radius: 4px;
  ${(p) => p.theme.shadow.NonClickable}
  flex: 0 0 auto;
  ${typography$1["Body/Body 1 Long"]};
  &[data-dimension='xl'] {
    width: 84px;
    height: 288px;
  }
  &[data-dimension='m'] {
    width: 84px;
    height: 240px;
  }
  &[data-dimension='s'] {
    ${typography$1["Body/Body 2 Long"]};
    width: 68px;
    height: 192px;
  }
`;
const TimeInput = React.forwardRef(({
  startTime,
  endTime,
  value = "",
  dimension = "m",
  disabled = false,
  disabledSlots = [],
  parser = parseStringToTime,
  icon,
  icons,
  ...props2
}, ref) => {
  var _a;
  const handleInput = props2.handleInput || defaultTimeInputHandle;
  const [timeValue, setTimeValue] = useState(null);
  const [activeIndex, setActiveIndex] = React.useState(0);
  const inputContainerRef = useRef(null);
  const inputRef = useRef(null);
  const [isOpened, setIsOpened] = useState(false);
  const handleButtonClick = () => {
    var _a2;
    const timeValue2 = parser((_a2 = inputRef.current) == null ? void 0 : _a2.value);
    setTimeValue(timeValue2);
    setIsOpened(!isOpened);
  };
  const iconArray = React.Children.toArray(icons);
  const TimeIcon = icon || Icon$5;
  iconArray.push(/* @__PURE__ */ React.createElement(TimeIcon, {
    onClick: handleButtonClick,
    tabIndex: 0
  }));
  const disableSlots = (defaultArray, disabledArr) => {
    if (disabledArr.length === 1) {
      const disabledTime = defaultArray.find((slot) => slot.value === disabledArr[0]);
      if (disabledTime) {
        disabledTime.disabled = true;
        return [...defaultArray, disabledTime];
      }
    } else {
      return defaultArray.map((slot) => ({ ...slot, disabled: disabledArr.includes(slot.value) }));
    }
  };
  const filterTime = (t, start, end) => {
    if (start && !end) {
      if (getTimeInMinutes(start) <= getTimeInMinutes(t)) {
        return t;
      }
    } else if (!start && end) {
      if (getTimeInMinutes(t) <= getTimeInMinutes(end)) {
        return t;
      }
    } else if (start && end) {
      if (getTimeInMinutes(start) <= getTimeInMinutes(t) && getTimeInMinutes(t) <= getTimeInMinutes(end)) {
        return t;
      }
    }
  };
  const availableSlots = !(disabledSlots == null ? void 0 : disabledSlots.length) && (startTime || endTime || startTime && endTime) ? slots.filter((slot) => filterTime(slot.value, startTime, endTime)) : (disabledSlots == null ? void 0 : disabledSlots.length) > 0 && !(startTime || endTime || startTime && endTime) ? disableSlots(slots, disabledSlots) : (disabledSlots == null ? void 0 : disabledSlots.length) > 0 && (startTime || endTime || startTime && endTime) ? (_a = disableSlots(slots, disabledSlots)) == null ? void 0 : _a.filter((slot) => filterTime(slot.value, startTime, endTime)) : slots;
  const handleClick = () => {
    if (inputRef.current) {
      if (availableSlots && !availableSlots[activeIndex].disabled && isOpened) {
        const slotValue = availableSlots[activeIndex].value;
        setTimeValue(slotValue);
        if (!slotValue) {
          changeInputData(inputRef.current, { value: "" });
          return;
        }
        changeInputData(inputRef.current, { value: slotValue });
        setIsOpened(false);
      } else {
        changeInputData(inputRef.current, { value });
      }
    }
  };
  const handleKeyUp = (e) => {
    if (!availableSlots)
      return;
    const activeOption = document.querySelector('[aria-selected="true"]');
    switch (e.key) {
      case "Enter":
        handleClick();
        break;
      case "ArrowUp":
        if (!isOpened) {
          setIsOpened(true);
        }
        activeOption == null ? void 0 : activeOption.scrollIntoView(false);
        if (activeIndex <= 0) {
          setActiveIndex(availableSlots.length - 1);
        } else {
          setActiveIndex(activeIndex - 1);
        }
        break;
      case "ArrowDown":
        if (!isOpened) {
          setIsOpened(true);
        }
        activeOption == null ? void 0 : activeOption.scrollIntoView(true);
        if (activeIndex >= availableSlots.length - 1) {
          setActiveIndex(0);
        } else {
          setActiveIndex(activeIndex + 1);
        }
        break;
    }
  };
  const handleKeyDown = (e) => {
    if (e.key === "Enter" && isOpened) {
      e.preventDefault();
    }
  };
  const clickOutside = () => {
    setIsOpened(false);
  };
  return /* @__PURE__ */ React.createElement(TextInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    handleInput,
    icons: iconArray,
    containerRef: inputContainerRef,
    value,
    disabled,
    dimension,
    onKeyUp: (...p) => {
      var _a2;
      (_a2 = props2.onKeyUp) == null ? void 0 : _a2.call(props2, ...p);
      handleKeyUp(...p);
    },
    onKeyDown: (...p) => {
      var _a2;
      (_a2 = props2.onKeyDown) == null ? void 0 : _a2.call(props2, ...p);
      handleKeyDown(...p);
    }
  }, availableSlots && isOpened && !disabled && /* @__PURE__ */ React.createElement(Dropdown$3, {
    targetRef: inputRef,
    alignSelf: "flex-end",
    onClickOutside: clickOutside
  }, /* @__PURE__ */ React.createElement(SlotContainer, {
    "data-dimension": dimension
  }, availableSlots.map((slot, index) => /* @__PURE__ */ React.createElement(Slot, {
    key: index,
    active: index === activeIndex,
    value: slot.value,
    "data-dimension": dimension,
    selected: timeValue === slot.value,
    "aria-selected": index === activeIndex,
    disabled: slot.disabled,
    onMouseEnter: () => setActiveIndex(index),
    onClick: handleClick,
    onKeyUp: handleKeyUp
  }, slot.value)))));
});
TimeInput.displayName = "TimeInput";
const correctValueWithRanges = (ranges, value, minValue, maxValue) => {
  const fullRangePoints = [...ranges.map((elem) => elem), minValue, maxValue].sort((a, b) => a - b);
  const closestRight = Math.min(...fullRangePoints.filter((v) => v >= value));
  const closestLeft = Math.max(...fullRangePoints.filter((v) => v <= value));
  const resultValue = closestRight - value <= value - closestLeft ? closestRight : closestLeft;
  return resultValue;
};
const calcValueByPos$1 = (trackWidth, sliderPosition, minValue, maxValue, step) => {
  const onePixelVal = trackWidth ? (maxValue - minValue) / trackWidth : 0;
  let sliderValue = sliderPosition * onePixelVal;
  if (!step || step >= 1) {
    sliderValue = Math.round(sliderValue);
  }
  let calcValue = minValue + sliderValue;
  if (step) {
    calcValue = Math.round(calcValue / step) * step;
  }
  if (minValue + sliderValue === minValue && calcValue !== minValue) {
    return minValue;
  }
  if (minValue + sliderValue === maxValue && calcValue !== maxValue) {
    return maxValue;
  }
  return calcValue;
};
const TRANSITION_ANIMATION$1 = "all  ease-in 0.3s";
const Wrapper$i = styled.div`
  position: relative;
  -webkit-tap-highlight-color: transparent;
`;
const TrackWrapper$1 = styled.div`
  position: relative;
  box-sizing: border-box;
  width: 100%;
  cursor: pointer;
  display: flex;
  align-items: center;
  height: 40px;
  padding-bottom: 20px;
  [data-dimension='m'] & {
    height: 36px;
  }
  [data-disabled='true'] && {
    pointer-events: none;
    cursor: auto;
  }
`;
const Track$1 = styled.div`
  height: 2px;
  background: ${({ theme }) => theme.color.background.tertiary};
  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.background.tertiary};
  }
  width: 100%;
`;
const DefaultTrack$1 = styled.div`
  height: 2px;
  transform: translateY(-50%);
`;
const FilledTrack$1 = styled.div`
  display: block;
  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.basic.disable};
  }
  position: absolute;
  height: 2px;
  width: 100%;
  background-color: ${({ theme }) => theme.color.basic.primary};
  transition: ${({ animation }) => animation ? TRANSITION_ANIMATION$1 : "none"};
`;
const Thumb$1 = styled.div`
  position: absolute;
  width: 20px;
  height: 20px;
  [data-dimension='m'] && {
    height: 16px;
    width: 16px;
  }
  align-items: center;
  justify-content: center;
  transform: translateX(-50%) translateY(-50%);
  border-radius: 50%;
  top: 2px;
  transition: ${({ animation }) => animation ? TRANSITION_ANIMATION$1 : "none"};
`;
const ThumbCircle$1 = styled.div`
  position: relative;
  height: 20px;
  width: 20px;
  background: ${({ theme }) => theme.color.basic.primary};
  border-radius: 50%;
  &:before {
    position: absolute;
    content: '';
    height: 8px;
    width: 8px;
    background: ${({ theme }) => theme.color.background.primary};
    top: 6px;
    bottom: 6px;
    left: 6px;
    right: 6px;
    border-radius: 50%;
  }
  [data-dimension='m'] && {
    height: 16px;
    width: 16px;
    &:before {
      height: 6px;
      width: 6px;
      top: 5px;
      bottom: 5px;
      left: 5px;
      right: 5px;
    }
  }
  &:hover {
    background: ${({ theme }) => theme.color.basic.hover};
  }
  &:active {
    background: ${({ theme }) => theme.color.basic.press};
  }

  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.basic.disable};
    pointer-events: none;
    &:hover,
    &:active {
      background: ${({ theme }) => theme.color.basic.disable};
    }
  }
`;
const repeatStringNumTimes = (str, n) => {
  let repeatedString = "";
  while (n > 0) {
    repeatedString += str;
    n--;
  }
  return repeatedString;
};
const clearValue = (str, precision, decimal = ".") => {
  const validChars = precision > 0 ? [decimal, "-", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"] : ["-", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
  let newStr = str.split("").filter((char) => validChars.indexOf(char) > -1).join("");
  if (newStr.indexOf("-") > -1) {
    newStr = newStr[0] + newStr.slice(1, newStr.length).split("").filter((char) => char !== "-").join("");
  }
  if (newStr[0] === "-" && newStr[1] === decimal) {
    newStr = newStr[0] + "0" + newStr.slice(1, newStr.length);
  }
  if (newStr.indexOf(decimal) > -1) {
    const firstDecimalIndex = newStr.indexOf(decimal);
    newStr = newStr.split("").filter((char, index) => char !== decimal || char === decimal && index === firstDecimalIndex).join("");
  }
  if (newStr[0] === "0" && newStr[1] !== decimal && newStr.length >= 2) {
    newStr = newStr[1];
  }
  if (newStr.slice(0, 2) === "-0" && newStr[2] !== decimal) {
    newStr = "-0";
  }
  return newStr;
};
const reverseString = (str) => {
  return str.split("").reverse().join("");
};
function fitToCurrency(value, precision, decimal, thousand, prefix, suffix, fillEmptyDecimals) {
  var _a;
  if (value === "") {
    return value;
  }
  let strDecimal = clearValue(String(value), precision, decimal);
  if (strDecimal === "") {
    return "";
  }
  const decimalIndex = strDecimal.indexOf(decimal);
  const isDecimal = decimalIndex > -1;
  if (isDecimal && strDecimal.length - decimalIndex - 1 > precision) {
    strDecimal = strDecimal.slice(0, decimalIndex + precision + 1);
  }
  const left_side = isDecimal ? strDecimal.slice(0, decimalIndex) : strDecimal;
  const right_side = isDecimal ? strDecimal.slice(decimalIndex, strDecimal.length) : "";
  let newValue = "";
  const reducer2 = (previousValue, currentValue, index, arr) => {
    return index === 0 ? previousValue += reverseString(currentValue) : previousValue += reverseString(currentValue) + thousand;
  };
  newValue = ((_a = reverseString(left_side).match(/.{1,3}/g)) == null ? void 0 : _a.reduceRight(reducer2, "")) || "";
  if (right_side) {
    newValue += right_side;
  }
  if (fillEmptyDecimals) {
    if (isDecimal) {
      const dot = newValue.indexOf(decimal);
      const diff = newValue.length - dot - 1;
      if (diff < precision) {
        newValue = newValue + repeatStringNumTimes("0", precision - diff);
      }
      if (dot === 0) {
        newValue = "0" + newValue;
      }
    } else if (precision) {
      if (newValue === "-") {
        newValue = newValue + "0";
      }
      newValue += decimal + repeatStringNumTimes("0", precision);
    }
  }
  if (prefix) {
    newValue = `${prefix} ${newValue}`;
  }
  if (suffix) {
    newValue = `${newValue} ${suffix}`;
  }
  return newValue;
}
const validateThousand = (thousand) => {
  return /[^a-zA-Z]+/.test(thousand);
};
const Icon$4 = css`
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.secondary};
  }
  &:hover {
    cursor: pointer;
  }
  &:hover *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.basic.hover};
  }
`;
const IconDisabled = css`
  cursor: default;
  pointer-events: none;
  & *[fill^='#'] {
    fill: ${(props2) => props2.theme.color.text.tertiary};
  }
`;
const Minus = styled(ReactComponent$b)`
  ${Icon$4}
  ${({ disabled }) => disabled && IconDisabled}
`;
const Plus = styled(ReactComponent$c)`
  ${Icon$4}
  ${({ disabled }) => disabled && IconDisabled}
`;
const NumberInput = React.forwardRef(({
  precision = 2,
  prefix = "",
  suffix = "\u20BD",
  thousand: userThousand = " ",
  decimal: userDecimal = ".",
  onBlur,
  onChange,
  placeholder = "0 \u20BD",
  step = 1,
  minValue,
  maxValue,
  displayPlusMinusIcons = true,
  ...rest
}, ref) => {
  const inputRef = React.useRef(null);
  const [plusDisabled, setPlusDisabled] = React.useState(false);
  const [minusDisabled, setMinusDisabled] = React.useState(false);
  const thousand = validateThousand(userThousand) ? userThousand.slice(0, 1) : " ";
  const decimal = userDecimal.slice(0, 1);
  React.useEffect(() => {
    const valueExist = rest.value !== void 0 && !!String(rest.value);
    const defaultValueExist = rest.defaultValue !== void 0 && !!String(rest.defaultValue);
    const value = valueExist ? String(rest.value) : String(rest.defaultValue);
    if (valueExist || defaultValueExist) {
      if (typeof minValue === "number") {
        const minusDsb = Number(clearValue(value, precision, decimal)) - step < minValue;
        minusDisabled !== minusDsb && setMinusDisabled(minusDsb);
      }
      if (typeof maxValue === "number") {
        const plusDsb = Number(clearValue(value, precision, decimal)) + step > maxValue;
        plusDisabled !== plusDsb && setPlusDisabled(plusDsb);
      }
    } else {
      minusDisabled && setMinusDisabled(false);
      plusDisabled && setPlusDisabled(false);
    }
  }, [rest.value, rest.defaultValue]);
  const handleInputChange = (inputData) => {
    const { value, selectionStart } = inputData || {};
    const cursor = selectionStart || 0;
    const init_value = value || "";
    const newValue = fitToCurrency(init_value, precision, decimal, thousand, prefix, suffix);
    const cursorInPrefix = cursor >= 0 && cursor <= prefix.length + 1 && prefix;
    const cursorInSuffix = cursor >= init_value.length - suffix.length && cursor <= init_value.length + 1 && suffix;
    if (cursor && (cursorInPrefix || cursorInSuffix)) {
      return {
        ...inputData,
        value: newValue,
        selectionStart: suffix ? newValue.length - suffix.length - 1 : newValue.length,
        selectionEnd: suffix ? newValue.length - suffix.length - 1 : newValue.length
      };
    } else if (thousand && init_value.charAt(cursor - 1) === thousand && newValue.length === init_value.length) {
      return {
        ...inputData,
        value: newValue,
        selectionStart: cursor - 1,
        selectionEnd: cursor - 1
      };
    } else {
      return {
        ...inputData,
        value: newValue,
        selectionStart: newValue.length - init_value.length + cursor,
        selectionEnd: newValue.length - init_value.length + cursor
      };
    }
  };
  const handleBlur = (event) => {
    const newValue = fitToCurrency(event.currentTarget.value, precision, decimal, thousand, prefix, suffix, true);
    if (inputRef.current) {
      if (typeof minValue === "number" && Number(clearValue(newValue, precision, decimal)) < minValue) {
        const fullValue = fitToCurrency(String(minValue), precision, decimal, thousand, prefix, suffix, true);
        const shortValue = clearValue(fullValue, precision, decimal);
        onChange == null ? void 0 : onChange(fullValue, shortValue, event);
        inputRef.current.value = fullValue;
      } else if (typeof maxValue === "number" && Number(clearValue(newValue, precision, decimal)) > maxValue) {
        const fullValue = fitToCurrency(String(maxValue), precision, decimal, thousand, prefix, suffix, true);
        const shortValue = clearValue(fullValue, precision, decimal);
        onChange == null ? void 0 : onChange(fullValue, shortValue, event);
        inputRef.current.value = fullValue;
      } else if (newValue !== event.currentTarget.value) {
        const fullValue = newValue;
        const shortValue = clearValue(fullValue, precision, decimal);
        onChange == null ? void 0 : onChange(fullValue, shortValue, event);
        inputRef.current.value = fullValue;
      }
    }
    onBlur == null ? void 0 : onBlur(event);
  };
  const handleMinus = () => {
    var _a;
    const current = ((_a = inputRef.current) == null ? void 0 : _a.value) || "";
    const newValue = Number(clearValue(current, precision, decimal)) - step;
    const newValueStr = fitToCurrency(String(newValue), precision, decimal, thousand, prefix, suffix, true);
    if (inputRef.current) {
      if (typeof minValue === "number") {
        if (newValue >= minValue) {
          changeInputData(inputRef.current, { value: newValueStr });
        }
      } else {
        changeInputData(inputRef.current, { value: newValueStr });
      }
    }
  };
  const handlePlus = () => {
    var _a;
    const current = ((_a = inputRef.current) == null ? void 0 : _a.value) || "";
    const newValue = Number(clearValue(current, precision, decimal)) + step;
    const newValueStr = fitToCurrency(String(newValue), precision, decimal, thousand, prefix, suffix, true);
    if (inputRef.current) {
      if (typeof maxValue === "number") {
        if (newValue <= maxValue) {
          changeInputData(inputRef.current, { value: newValueStr });
        }
      } else {
        changeInputData(inputRef.current, { value: newValueStr });
      }
    }
  };
  const handleChange = (event) => {
    const newVal = event.currentTarget.value;
    if (typeof minValue === "number" && newVal) {
      const minusDsb = Number(clearValue(newVal, precision, decimal)) - step < minValue;
      minusDisabled !== minusDsb && setMinusDisabled(minusDsb);
    }
    if (typeof maxValue === "number" && newVal) {
      const plusDsb = Number(clearValue(newVal, precision, decimal)) + step > maxValue;
      plusDisabled !== plusDsb && setPlusDisabled(plusDsb);
    }
    if (newVal === "") {
      minusDisabled && setMinusDisabled(false);
      plusDisabled && setPlusDisabled(false);
    }
    const fullValue = newVal;
    const shortValue = clearValue(newVal, precision, decimal);
    onChange == null ? void 0 : onChange(fullValue, shortValue, event);
  };
  return /* @__PURE__ */ React.createElement(TextInput, {
    ...rest,
    onChange: handleChange,
    placeholder,
    ref: refSetter(ref, inputRef),
    onBlur: handleBlur,
    handleInput: handleInputChange,
    type: "text",
    icons: displayPlusMinusIcons ? [
      rest.icons,
      /* @__PURE__ */ React.createElement(Minus, {
        onClick: handleMinus,
        disabled: rest.disabled || minusDisabled
      }),
      /* @__PURE__ */ React.createElement(Plus, {
        onClick: handlePlus,
        disabled: rest.disabled || plusDisabled
      })
    ] : [rest.icons]
  });
});
NumberInput.displayName = "NumberInput";
const Wrapper$h = styled.div`
  position: absolute;
  left: ${({ position }) => position}%;
  display: flex;
  align-items: center;
  justify-content: center;
`;
const Content$6 = styled.div`
  display: flex;
  align-items: center;
  position: absolute;
  top: 16px;
  [data-dimension='m'] && {
    top: 14px;
  }
  white-space: nowrap;
  ${typography$1["Body/Body 2 Short"]}
  &:hover {
    color: ${({ theme }) => theme.color.basic.hover};
  }
  &:active {
    color: ${({ theme }) => theme.color.basic.press};
  }
  [data-disabled='true'] && {
    color: ${({ theme }) => theme.color.text.tertiary};
  }
`;
const TickMarks = ({
  minValue,
  maxValue,
  decimal = ".",
  precision = 2,
  thousand = " ",
  tickMarks,
  onPointClick
}) => {
  const items = tickMarks.filter((d) => d >= minValue && d <= maxValue);
  const range2 = maxValue - minValue;
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, items.map((value, index) => {
    const key = value.toString() + index;
    const position = (value - minValue) / range2 * 100;
    let style = {};
    style = index === 0 ? { left: 0 } : style;
    style = index === tickMarks.length - 1 ? { right: 0 } : style;
    return /* @__PURE__ */ React__default.createElement(Wrapper$h, {
      key,
      position,
      onMouseDown: (e) => {
        onPointClick(e, value);
      }
    }, /* @__PURE__ */ React__default.createElement(Content$6, {
      style
    }, fitToCurrency(value, precision, decimal, thousand)));
  }));
};
const Slider$2 = ({
  minValue = 0,
  maxValue = 20,
  decimal = ".",
  precision = 2,
  thousand = " ",
  value = 0,
  onChange,
  tickMarks: points,
  disabled = false,
  step = 1,
  dimension = "xl",
  ...props2
}) => {
  const tickMarks = Array.isArray(points) ? points : void 0;
  const SLIDER_WIDTH = dimension === "xl" ? 20 : 16;
  const [isDraging, setDrag] = useState(false);
  const [animation, setAnimation] = useState(false);
  const [sliderValue, setSliderValue] = useState(value);
  const filledRef = useRef(null);
  const trackRef = useRef(null);
  const sliderRef = useRef(null);
  useEffect(() => {
    setSliderValue(value);
  }, [value]);
  useEffect(() => {
    correctSliderPosition(sliderValue);
  }, [sliderValue, minValue, maxValue]);
  const [moveListener, freeResources] = throttle((e) => {
    updateSlider(e);
  }, 50);
  useEffect(() => {
    if (isDraging && !disabled) {
      document.addEventListener("mousemove", moveListener);
      document.addEventListener("mouseup", handleSliderMouseUp);
      document.addEventListener("touchmove", moveListener);
      document.addEventListener("touchend", handleSliderMouseUp);
      document.addEventListener("touchcancel", handleSliderMouseUp);
    }
    return () => {
      freeResources();
      document.removeEventListener("mousemove", moveListener);
      document.removeEventListener("mouseup", handleSliderMouseUp);
      document.removeEventListener("touchmove", moveListener);
      document.removeEventListener("touchend", handleSliderMouseUp);
      document.removeEventListener("touchcancel", handleSliderMouseUp);
    };
  });
  const getRangeWidth = () => {
    var _a;
    return ((_a = trackRef.current) == null ? void 0 : _a.offsetWidth) || 0;
  };
  const slideValue = useCallback((trackWidth, sliderPosition, e) => {
    const calcValue = calcValueByPos$1(trackWidth, sliderPosition, minValue, maxValue, step);
    calcValue !== value && onChange(e, calcValue);
    setSliderValue(calcValue);
  }, [maxValue, minValue, onChange, step]);
  const updateSlider = useCallback((e) => {
    var _a;
    setAnimation(false);
    const rangeWidth = getRangeWidth();
    const rangeLeft = ((_a = trackRef.current) == null ? void 0 : _a.getBoundingClientRect().left) || 0;
    const sliderPosition = rangeLeft && sliderRef.current ? Math.round(sliderRef.current.getBoundingClientRect().left - rangeLeft + SLIDER_WIDTH / 2) : 0;
    if (isDraging && rangeLeft) {
      let cursorPosition = e.changedTouches ? e.changedTouches[0].pageX : e.pageX;
      if (cursorPosition <= rangeLeft) {
        cursorPosition = rangeLeft;
      }
      if (cursorPosition >= rangeLeft + rangeWidth) {
        cursorPosition = rangeLeft + rangeWidth;
      }
      const getStyle = (cursorPosition2, rangeLeft2, rangeWidth2) => `${(cursorPosition2 - rangeLeft2) / rangeWidth2 * 100}%`;
      if (sliderRef.current && filledRef.current) {
        sliderRef.current.style.left = getStyle(cursorPosition, rangeLeft, rangeWidth);
        filledRef.current.style.width = getStyle(cursorPosition, rangeLeft, rangeWidth);
      }
    }
    slideValue(rangeWidth, sliderPosition, e);
  }, [slideValue, isDraging]);
  const correctSliderPosition = useCallback((value2) => {
    const rangeWidth = getRangeWidth();
    const onePxValue = rangeWidth ? rangeWidth / (maxValue - minValue) : 0;
    const correctValue = value2 >= 0 ? value2 - minValue : -minValue + value2;
    let calcPercents = onePxValue * correctValue / rangeWidth * 100;
    calcPercents = calcPercents > 100 ? 100 : calcPercents;
    calcPercents = calcPercents < 0 ? 0 : calcPercents;
    const sliderCoords = String(value2) ? calcPercents : 0;
    if (sliderRef.current && filledRef.current) {
      sliderRef.current.style.left = `${sliderCoords}%`;
      filledRef.current.style.width = `${sliderCoords}%`;
    }
    return setSliderValue(value2);
  }, [maxValue, minValue]);
  const onSliderClick = useCallback((e) => {
    if (e.type === "mousedown")
      e.preventDefault();
    e.stopPropagation();
    setDrag(true);
    setAnimation(true);
  }, [updateSlider, setDrag]);
  const handleSliderMouseUp = useCallback((e) => {
    if (e.type === "mouseup")
      e.preventDefault();
    e.stopPropagation();
    setAnimation(true);
    setDrag(false);
    const numValue = sliderValue || minValue;
    if (tickMarks) {
      const newValue = correctValueWithRanges(tickMarks, numValue, minValue, maxValue);
      correctSliderPosition(newValue);
      newValue !== value && onChange(e, newValue);
    } else {
      numValue !== value && onChange(e, numValue);
    }
  }, [onChange, maxValue, minValue, sliderValue, tickMarks]);
  const onPointClick = (e, newValue) => {
    e.preventDefault();
    e.stopPropagation();
    if (!disabled) {
      setAnimation(true);
      correctSliderPosition(newValue);
      newValue !== value && onChange(e, newValue);
    }
  };
  const onTrackClick = useCallback((e) => {
    var _a;
    if (!disabled) {
      setAnimation(true);
      const rangeWidth = getRangeWidth();
      const correctLeft = ((_a = trackRef.current) == null ? void 0 : _a.getBoundingClientRect().left) || 0;
      const cursorPosition = e.changedTouches ? e.changedTouches[0].pageX : e.pageX;
      const sliderPosition = cursorPosition - correctLeft;
      const calcValue = calcValueByPos$1(rangeWidth, sliderPosition, minValue, maxValue, step);
      if (tickMarks) {
        const numVal = calcValue.toString() ? calcValue : minValue;
        const newValue = correctValueWithRanges(tickMarks, numVal, minValue, maxValue);
        correctSliderPosition(newValue);
        newValue !== value && onChange(e, newValue);
      } else {
        correctSliderPosition(calcValue);
        onSliderClick(e);
      }
    }
  }, [correctSliderPosition, disabled, onSliderClick, maxValue, minValue, tickMarks, step]);
  const handleKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    switch (code) {
      case keyboardKey.ArrowLeft:
        if (sliderValue - step >= minValue) {
          correctSliderPosition(sliderValue - step);
          sliderValue - step !== value && onChange(e, sliderValue - step);
        }
        e.preventDefault();
        break;
      case keyboardKey.ArrowRight:
        if (sliderValue + step <= maxValue) {
          correctSliderPosition(sliderValue + step);
          sliderValue + step !== value && onChange(e, sliderValue + step);
        }
        e.preventDefault();
        break;
    }
  };
  return /* @__PURE__ */ React__default.createElement(Wrapper$i, {
    "data-dimension": dimension,
    "data-disabled": disabled,
    ...props2
  }, /* @__PURE__ */ React__default.createElement(TrackWrapper$1, {
    onTouchStart: onTrackClick,
    onMouseDown: onTrackClick
  }, /* @__PURE__ */ React__default.createElement(Track$1, null, /* @__PURE__ */ React__default.createElement(FilledTrack$1, {
    ref: filledRef,
    animation
  }), /* @__PURE__ */ React__default.createElement(DefaultTrack$1, {
    ref: trackRef
  }, /* @__PURE__ */ React__default.createElement(TickMarks, {
    tickMarks: tickMarks ? [minValue, ...tickMarks, maxValue] : [minValue, maxValue],
    minValue,
    maxValue,
    decimal,
    precision,
    thousand,
    onPointClick
  }), /* @__PURE__ */ React__default.createElement(Thumb$1, {
    ref: sliderRef,
    animation,
    role: "slider",
    tabIndex: disabled ? -1 : 0,
    "aria-valuenow": sliderValue,
    "aria-valuemin": minValue,
    "aria-valuemax": maxValue,
    onKeyDown: handleKeyDown
  }, /* @__PURE__ */ React__default.createElement(ThumbCircle$1, {
    onTouchStart: onSliderClick,
    onMouseDown: onSliderClick
  }))))));
};
Slider$2.displayName = "Slider";
const Wrapper$g = styled.div`
  position: relative;
  padding-bottom: ${({ dimension }) => dimension === "xl" ? 30 : 28}px;
`;
const Slider$1 = styled(Slider$2)`
  & > div {
    position: absolute;
    top: -11px;
    [data-dimension='m'] & {
      top: -9px;
    }
    [data-dimension='s'] & {
      top: -9px;
    }
  }
`;
const Input$2 = styled(NumberInput)`
  & > input {
    border-radius: 4px 4px 0 0;
  }
`;
const SliderInput = React.forwardRef(({
  defaultValue = "",
  onChange,
  minValue = 0,
  maxValue = 20,
  step = 1,
  tickMarks,
  dimension = "xl",
  precision = 0,
  thousand = " ",
  prefix = "",
  suffix = "\u20BD",
  placeholder = "0 \u20BD",
  disabled,
  wrapperProps,
  ...props2
}, ref) => {
  const sliderDimension = dimension === "xl" ? dimension : "m";
  const decimal = ".";
  const [inputValue, setInputValue] = React.useState("");
  const [sliderValue, setSliderValue] = React.useState(minValue);
  React.useEffect(() => {
    setInputValue(fitToCurrency(defaultValue, precision, decimal, thousand, prefix, suffix, true));
    setSliderValue(+clearValue(defaultValue, precision, decimal));
  }, [defaultValue]);
  const handleSliderChange = (e, value) => {
    const shortValue = value.toString() + "." + repeatStringNumTimes("0", precision);
    const fullValue = fitToCurrency(shortValue, precision, decimal, thousand, prefix, suffix);
    setSliderValue(value);
    setInputValue(fullValue);
    onChange == null ? void 0 : onChange(fullValue, shortValue);
  };
  const handleInputChange = (fullStr, shortStr) => {
    setInputValue(fullStr);
    setSliderValue(+shortStr);
    onChange == null ? void 0 : onChange(fullStr, shortStr);
  };
  return /* @__PURE__ */ React.createElement(Wrapper$g, {
    "data-dimension": dimension,
    dimension,
    ...wrapperProps
  }, /* @__PURE__ */ React.createElement(Input$2, {
    ...props2,
    ref,
    value: inputValue,
    onChange: handleInputChange,
    onBlur: props2.onBlur,
    dimension,
    disabled,
    precision,
    decimal,
    thousand,
    prefix,
    suffix,
    placeholder,
    step,
    displayPlusMinusIcons: false,
    minValue,
    maxValue
  }), /* @__PURE__ */ React.createElement(Slider$1, {
    "aria-hidden": true,
    value: sliderValue,
    onChange: handleSliderChange,
    minValue,
    maxValue,
    decimal,
    precision,
    thousand,
    tickMarks,
    step,
    disabled,
    dimension: sliderDimension
  }));
});
SliderInput.displayName = "SliderInput";
const ErrorBlock = styled.div`
  margin-top: ${(p) => p.status === "Error" ? "8px" : "20px"};
  color: ${(p) => p.theme.color.status.danger};
`;
const formatBytes = (bytes, decimals = 2) => {
  return Number((bytes / (1024 * 1024)).toFixed(decimals));
};
const dataTransferConstructorSupported = () => {
  let dataTransferConstructorSupported2;
  try {
    new DataTransfer();
    dataTransferConstructorSupported2 = true;
  } catch {
    dataTransferConstructorSupported2 = false;
  }
  return dataTransferConstructorSupported2;
};
function acceptFile(file, acceptedFiles) {
  if (file && acceptedFiles) {
    const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
    const fileName = file.name || "";
    const mimeType = (file.type || "").toLowerCase();
    const baseMimeType = mimeType.replace(/\/.*$/, "");
    return acceptedFilesArray.some((type) => {
      const validType = type.trim().toLowerCase();
      if (validType.charAt(0) === ".") {
        return fileName.toLowerCase().endsWith(validType);
      } else if (validType.endsWith("/*")) {
        return baseMimeType === validType.replace(/\/.*$/, "");
      }
      return mimeType === validType;
    });
  }
  return true;
}
const getIcon$2 = (type) => {
  switch (type) {
    case "image/jpeg":
    case "image/png":
    case "image/tiff":
      return ReactComponent$i;
    case "application/pdf":
      return ReactComponent$h;
    case "application/vnd.ms-powerpoint":
    case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
      return ReactComponent$g;
    case "application/vnd.ms-excel":
    case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
      return ReactComponent$f;
    case "application/msword":
    case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
      return ReactComponent$e;
    default:
      return ReactComponent$d;
  }
};
const getFormat = (type) => {
  switch (type) {
    case "image/jpeg":
      return "JPEG";
    case "image/png":
      return "PNG";
    case "image/tiff":
      return "TIFF";
    case "application/pdf":
      return "PDF";
    case "application/vnd.ms-powerpoint":
    case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
      return "PPT";
    case "application/vnd.ms-excel":
    case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
      return "XLS";
    case "application/msword":
    case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
      return "Word";
    default:
      return "Docs";
  }
};
const Container$3 = styled.div`
  display: flex;
  flex-direction: column;
  flex: ${(p) => p.dimension === "xl" ? "1 1 36%" : "1 1 auto"};
  margin-top: 16px;
  overflow: hidden;

  &:nth-of-type(even) {
    margin-left: ${(p) => p.dimension === "xl" ? "16px" : "0"};
  }
`;
const statusMixin = css`
  border-color: ${(p) => {
  if (p.status === "Error")
    return p.theme.color.status.danger;
  return p.theme.color.basic.disable;
}};
  color: ${(p) => p.status === "Queue" ? p.theme.color.text.tertiary : p.theme.color.text.primary};
  background: ${(p) => p.status === "Loading" ? p.theme.color.background.secondary : p.theme.color.background.primary};
`;
const PreviewWrapper = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  border-radius: 4px;
  border-width: 1px;
  border-style: solid;
  padding: ${(p) => p.fileDimension === "xl" ? "7px 8px" : "7px 15px"};
  ${statusMixin};
`;
const InfoBlock = styled.div`
  display: ${(p) => p.dimension === "m" ? "block" : "flex"};
  align-items: center;
  overflow: hidden;
`;
const ImagePreview = styled.div`
  min-width: 40px;
  width: 40px;
  height: 40px;
  border-radius: 4px;
  margin-right: 8px;
  overflow: hidden;

  > img {
    height: 100%;
    width: 100%;
  }
`;
const IconWrapper$3 = styled.div`
  margin-right: 8px;
  border-radius: 4px;

  & svg {
    width: 40px;
    height: 40px;
    fill: ${(p) => {
  if (p.status === "Loading")
    return p.theme.color.text.secondary;
  if (p.status === "Queue")
    return p.theme.color.text.tertiary;
  return p.theme.color.text.primary;
}};
  }
`;
const sizeMixin = css`
  align-items: center;
  justify-content: space-between;
`;
const Content$5 = styled.div`
  ${(p) => p.fileDimension === "m" && sizeMixin};
  display: flex;
  flex-direction: ${(p) => p.fileDimension === "m" ? "row" : "column"};
  min-width: 0;
`;
const Title$3 = styled.div`
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
`;
const Size = styled.span`
  color: ${(p) => p.status === "Queue" ? p.theme.color.text.tertiary : p.theme.color.text.secondary};
  margin-left: ${(p) => p.fileDimension === "xl" ? "0" : "4px"};
  white-space: nowrap;
`;
const FunctionalWrapper = styled.div`
  display: flex;
  flex: 0 0 auto;
  margin-left: 8px;
`;
const StyledSpinner$1 = styled(Spinner)`
  margin-right: 8px;
`;
const Close$1 = styled.div`
  cursor: pointer;
  display: flex;

  & svg {
    width: 24px;
    height: 24px;
    fill: ${(p) => p.theme.color.basic.tertiary};
  }

  & svg:hover {
    fill: ${(p) => p.theme.color.basic.hover};
  }
`;
const FileInfo = ({
  file,
  onCloseClick = () => void 0,
  dimension,
  fileDimension,
  children,
  ...props2
}) => {
  const {
    file: { type, name, size },
    status,
    error,
    showPreview
  } = file;
  const PreviewIcon = getIcon$2(type);
  const fileFormat = getFormat(type);
  const fileSize = formatBytes(size);
  const fileName = name.substring(0, name.lastIndexOf("."));
  const [imageSrc, setImageSrc] = React.useState("");
  const imageFile = showPreview && type.startsWith("image");
  const fileInfo = `${fileFormat}\u30FB${fileSize} Mb`;
  const getImageUrl = (file2) => {
    const reader = new FileReader();
    reader.onloadend = function() {
      if (typeof reader.result === "string") {
        setImageSrc(reader.result);
      }
    };
    if (file2) {
      reader.readAsDataURL(file2.file);
    } else {
      setImageSrc("");
    }
  };
  useEffect(() => {
    if (file && imageFile && !children) {
      getImageUrl(file);
    }
  }, [file]);
  return /* @__PURE__ */ React.createElement(Container$3, {
    dimension
  }, /* @__PURE__ */ React.createElement(PreviewWrapper, {
    ...props2,
    dimension,
    fileDimension,
    status
  }, children ? children : /* @__PURE__ */ React.createElement(InfoBlock, {
    dimension
  }, fileDimension === "xl" && (imageFile ? /* @__PURE__ */ React.createElement(ImagePreview, null, /* @__PURE__ */ React.createElement("img", {
    src: imageSrc,
    alt: ""
  })) : /* @__PURE__ */ React.createElement(IconWrapper$3, {
    status
  }, /* @__PURE__ */ React.createElement(PreviewIcon, null))), /* @__PURE__ */ React.createElement(Content$5, {
    fileDimension
  }, /* @__PURE__ */ React.createElement(Tooltip, {
    renderContent: () => `${fileName}`
  }, /* @__PURE__ */ React.createElement(Title$3, null, fileName)), /* @__PURE__ */ React.createElement(Size, {
    fileDimension,
    status
  }, fileInfo))), /* @__PURE__ */ React.createElement(FunctionalWrapper, null, status === "Loading" && /* @__PURE__ */ React.createElement(StyledSpinner$1, null), dataTransferConstructorSupported() && /* @__PURE__ */ React.createElement(Close$1, {
    onClick: onCloseClick
  }, /* @__PURE__ */ React.createElement(ReactComponent$7, null)))), error && status === "Error" && /* @__PURE__ */ React.createElement(ErrorBlock, {
    status
  }, error));
};
const Icon$3 = styled(ReactComponent$j)`
  height: ${(p) => p.dimension === "xl" ? "40px" : "24px"};
  width: ${(p) => p.dimension === "xl" ? "40px" : "24px"};
  margin-right: ${(p) => p.dimension === "m" ? "14px" : ""};
  margin-bottom: ${(p) => p.dimension === "xl" ? "14px" : ""};

  > * {
    fill: ${(p) => p.theme.color.basic.primary};
  }
`;
const disabledStyles$1 = css`
  border: ${(p) => `1px dashed ${p.theme.color.basic.disable}`};

  & svg {
    > * {
      fill: ${(p) => p.theme.color.basic.disable};
    }
  }
`;
const hoverStyles = css`
  &:hover {
    cursor: pointer;
    border: 1px dashed ${(p) => p.theme.color.basic.hover};
    background: ${(p) => p.theme.color.background.secondary};

    & svg {
      > * {
        fill: ${(p) => p.theme.color.basic.hover};
      }
    }
  }
`;
const CustomWrapper = styled.div`
  position: relative;
`;
const UploaderWrapperXL = styled.div`
  position: relative;
  display: flex;
  box-sizing: border-box;
  align-items: center;
  flex-direction: column;
  padding: 24px 0;
  border: ${(p) => `1px dashed ${p.theme.color.text.secondary}`};
  border-radius: 8px;
  pointer-events: ${({ disabled }) => disabled ? "none" : "all"};
  cursor: ${(p) => p.disabled ? "not-allowed" : "default"};
  ${(p) => p.disabled ? disabledStyles$1 : hoverStyles};
`;
const UploaderWrapperM = styled.div`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  padding: 8px 0;
  border: ${(p) => `1px dashed ${p.theme.color.text.secondary}`};
  border-radius: 8px;
  cursor: ${(p) => p.disabled ? "not-allowed" : "default"};
  ${(p) => p.disabled ? disabledStyles$1 : hoverStyles};
`;
const TitleText = styled.div`
  text-align: ${(p) => p.dimension === "xl" ? "center" : "start"};
  margin: 0 ${(p) => p.dimension === "xl" ? "24px" : ""};
  margin-bottom: ${(p) => p.dimension === "m" ? "16px" : "0px"};
  max-width: 100%;
  ${typography$1["Body/Body 2 Long"]}
  color: ${(p) => p.disabled && p.theme.color.basic.disable};
`;
const Desc = styled.div`
  ${typography$1["Body/Body 1 Long"]};
  color: ${(p) => p.disabled && p.theme.color.basic.disable};
`;
const FileInput = styled.input`
  display: block;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;

  &:focus {
    outline: none;
  }
`;
const Wrapper$f = styled.div`
  ${typography$1["Body/Body 2 Long"]};
`;
const FileWrapper = styled.div`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
`;
const FileUploader = React.forwardRef(({
  multiple = true,
  dimension = "xl",
  fileDimension = "xl",
  renderFileInfoList: r,
  disabled,
  title,
  description,
  children,
  uploadedFiles,
  style,
  className,
  onRemoveFile,
  ...props2
}, ref) => {
  const wrapperRef = React.useRef(null);
  const inputRef = React.useRef(null);
  const [files, setFiles] = React.useState(uploadedFiles);
  const previewProps = { dimension, fileDimension };
  React.useEffect(() => {
    if (uploadedFiles !== void 0) {
      setFiles(uploadedFiles);
    }
  }, [uploadedFiles]);
  React.useEffect(() => {
    function onChangeEventHandler() {
      const filesToAdd = Array.from(this.files || []).filter((file) => !props2.accept || acceptFile(file, props2.accept)).map((file) => ({ file }));
      const dt = new DataTransfer();
      filesToAdd.forEach(({ file }) => dt.items.add(file));
      this.files = dt.files;
      setFiles(filesToAdd);
    }
    const input = inputRef.current;
    if (input) {
      input.addEventListener("change", onChangeEventHandler, true);
      return () => input.removeEventListener("change", onChangeEventHandler, true);
    }
  }, [inputRef.current, files, props2.accept]);
  const handleRemoveFile = (index) => {
    if (inputRef.current && inputRef.current.files) {
      const files2 = inputRef.current.files;
      const dt = new DataTransfer();
      for (let i = 0; i < files2.length; i++) {
        const file = files2.item(i);
        if (index !== i && file) {
          dt.items.add(file);
        }
      }
      inputRef.current.files = dt.files;
      let event;
      if (typeof Event === "function") {
        event = new Event("change", { bubbles: true });
      } else {
        event = document.createEvent("Event");
        event.initEvent("change", true, true);
      }
      inputRef.current.dispatchEvent(event);
    }
    onRemoveFile == null ? void 0 : onRemoveFile(index);
  };
  const renderFileInfoList = r != null ? r : (files2) => files2.map((file, index) => {
    return /* @__PURE__ */ React.createElement(FileInfo, {
      ...previewProps,
      key: index,
      file,
      onCloseClick: () => handleRemoveFile(index)
    });
  });
  return /* @__PURE__ */ React.createElement(Wrapper$f, {
    ref: wrapperRef,
    style,
    className
  }, dimension === "xl" ? /* @__PURE__ */ React.createElement(React.Fragment, null, React.Children.count(children) ? /* @__PURE__ */ React.createElement(CustomWrapper, null, children, /* @__PURE__ */ React.createElement(FileInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    type: "file",
    multiple,
    disabled
  })) : /* @__PURE__ */ React.createElement(UploaderWrapperXL, {
    disabled
  }, /* @__PURE__ */ React.createElement(Icon$3, {
    dimension
  }), title && /* @__PURE__ */ React.createElement(TitleText, {
    dimension,
    disabled,
    children: title
  }), /* @__PURE__ */ React.createElement(FileInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    type: "file",
    multiple,
    disabled
  })), files && /* @__PURE__ */ React.createElement(FileWrapper, null, renderFileInfoList(files))) : /* @__PURE__ */ React.createElement(React.Fragment, null, React.Children.count(children) ? /* @__PURE__ */ React.createElement(CustomWrapper, null, children, /* @__PURE__ */ React.createElement(FileInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    type: "file",
    multiple,
    disabled
  })) : /* @__PURE__ */ React.createElement(React.Fragment, null, title && /* @__PURE__ */ React.createElement(TitleText, {
    dimension,
    disabled,
    children: title
  }), /* @__PURE__ */ React.createElement(UploaderWrapperM, {
    disabled
  }, /* @__PURE__ */ React.createElement(Icon$3, {
    dimension
  }), description && /* @__PURE__ */ React.createElement(Desc, {
    disabled
  }, description), /* @__PURE__ */ React.createElement(FileInput, {
    ...props2,
    ref: refSetter(ref, inputRef),
    type: "file",
    multiple,
    disabled
  }))), files && /* @__PURE__ */ React.createElement(FileWrapper, null, renderFileInfoList(files))));
});
FileUploader.displayName = "FileUploader";
const calcValueByPos = (trackWidth, sliderPosition, minValue, maxValue, step) => {
  const onePixelVal = trackWidth ? (maxValue - minValue) / trackWidth : 0;
  let sliderValue = sliderPosition * onePixelVal;
  if (!step || step >= 1) {
    sliderValue = Math.round(sliderValue);
  }
  let calcValue = minValue + sliderValue;
  if (step) {
    calcValue = Math.round(calcValue / step) * step;
  }
  return calcValue;
};
const sortNum = (arr) => arr[0] > arr[1] ? [arr[1], arr[0]] : arr;
const TRANSITION_ANIMATION = "all  ease-in 0.3s";
const Wrapper$e = styled.div`
  position: relative;
  -webkit-tap-highlight-color: transparent;
`;
const TrackWrapper = styled.div`
  position: relative;
  width: 100%;
  cursor: pointer;
  display: flex;
  align-items: center;
  height: 24px;
  [data-dimension='s'] & {
    height: 20px;
  }
  [data-disabled='true'] && {
    cursor: auto;
  }
`;
const Track = styled.div`
  height: 2px;
  background: ${({ theme }) => theme.color.background.tertiary};
  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.background.tertiary};
  }
  width: 100%;
`;
const DefaultTrack = styled.div`
  height: 2px;
  transform: translateY(-50%);
`;
const FilledTrack = styled.div`
  display: block;
  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.basic.disable};
  }
  position: absolute;
  height: 2px;
  left: 0%;
  background-color: ${({ theme }) => theme.color.basic.primary};
  transition: ${({ animation }) => animation ? TRANSITION_ANIMATION : "none"};
`;
const Thumb = styled.div`
  position: absolute;
  width: 20px;
  height: 20px;
  [data-dimension='s'] && {
    height: 16px;
    width: 16px;
  }
  align-items: center;
  justify-content: center;
  transform: translateX(-50%) translateY(-50%);
  border-radius: 50%;
  top: 2px;
  transition: ${({ animation }) => animation ? TRANSITION_ANIMATION : "none"};
`;
const ThumbCircle = styled.div`
  position: relative;
  height: 20px;
  width: 20px;
  background: ${({ theme }) => theme.color.basic.primary};
  border-radius: 50%;
  &:before {
    position: absolute;
    content: '';
    height: 8px;
    width: 8px;
    background: ${({ theme }) => theme.color.background.primary};
    top: 6px;
    bottom: 6px;
    left: 6px;
    right: 6px;
    border-radius: 50%;
  }
  [data-dimension='s'] && {
    height: 16px;
    width: 16px;
    &:before {
      height: 6px;
      width: 6px;
      top: 5px;
      bottom: 5px;
      left: 5px;
      right: 5px;
    }
  }
  &:hover {
    background: ${({ theme }) => theme.color.basic.hover};
  }
  &:active {
    background: ${({ theme }) => theme.color.basic.press};
  }

  [data-disabled='true'] && {
    background: ${({ theme }) => theme.color.basic.disable};
    pointer-events: none;
    &:hover,
    &:active {
      background: ${({ theme }) => theme.color.basic.disable};
    }
  }
`;
const Range = ({
  minValue = 0,
  maxValue = 20,
  value = [minValue, maxValue],
  onChange,
  disabled = false,
  step = 1,
  dimension = "m",
  ...props2
}) => {
  const SLIDER_WIDTH = dimension === "m" ? 20 : 16;
  const [isDraging, setDrag] = React.useState(false);
  const [isDraging2, setDrag2] = React.useState(false);
  const [animation, setAnimation] = React.useState(true);
  const filledRef = React.useRef(null);
  const trackRef = React.useRef(null);
  const sliderRef = React.useRef(null);
  const slider2Ref = React.useRef(null);
  const test = () => {
    if (sliderRef.current && slider2Ref.current) {
      if (sliderRef.current.offsetLeft <= slider2Ref.current.offsetLeft) {
        return value;
      } else {
        return [value[1], value[0]];
      }
    }
    return value;
  };
  const [sliderValue, setSliderValue] = React.useState([minValue, maxValue]);
  React.useLayoutEffect(() => {
    const res = sortNum(sliderValue);
    if (value[0] !== res[0] || value[1] !== res[1]) {
      setSliderValue(test());
      correctSliderPosition(test(), "both");
    }
  }, [value]);
  React.useEffect(() => {
    correctSliderPosition(sliderValue, "both");
  }, [sliderValue, minValue, maxValue]);
  const [moveListener, freeResources] = throttle((e) => {
    updateSlider(e);
  }, 50);
  React.useEffect(() => {
    if ((isDraging || isDraging2) && !disabled) {
      document.addEventListener("mousemove", moveListener);
      document.addEventListener("mouseup", handleSliderMouseUp);
      document.addEventListener("touchmove", moveListener);
      document.addEventListener("touchend", handleSliderMouseUp);
      document.addEventListener("touchcancel", handleSliderMouseUp);
    }
    return () => {
      freeResources();
      document.removeEventListener("mousemove", moveListener);
      document.removeEventListener("mouseup", handleSliderMouseUp);
      document.removeEventListener("touchmove", moveListener);
      document.removeEventListener("touchend", handleSliderMouseUp);
      document.removeEventListener("touchcancel", handleSliderMouseUp);
    };
  });
  const getRangeWidth = () => {
    var _a;
    return ((_a = trackRef.current) == null ? void 0 : _a.offsetWidth) || 0;
  };
  const getSliderPosition = (type) => {
    var _a;
    const rangeLeft = ((_a = trackRef.current) == null ? void 0 : _a.getBoundingClientRect().left) || 0;
    const sliderPosition = rangeLeft && sliderRef.current ? Math.round(sliderRef.current.getBoundingClientRect().left - rangeLeft + SLIDER_WIDTH / 2) : 0;
    const slider2Position = rangeLeft && slider2Ref.current ? Math.round(slider2Ref.current.getBoundingClientRect().left - rangeLeft + SLIDER_WIDTH / 2) : 0;
    return type === "first" ? sliderPosition : slider2Position;
  };
  const slideValue = React.useCallback((trackWidth, e) => {
    const first = calcValueByPos(trackWidth, getSliderPosition("first"), minValue, maxValue, step);
    const second = calcValueByPos(trackWidth, getSliderPosition("second"), minValue, maxValue, step);
    const calcValue = isDraging ? first : second;
    const newValue = isDraging ? [calcValue, second] : [first, calcValue];
    sortNum(newValue) !== value && (onChange == null ? void 0 : onChange(e, sortNum(newValue)));
    setSliderValue(newValue);
  }, [maxValue, minValue, onChange, step, isDraging]);
  const setFilled = () => {
    if (slider2Ref.current && sliderRef.current && filledRef.current) {
      if (sliderRef.current.offsetLeft <= slider2Ref.current.offsetLeft) {
        filledRef.current.style.left = sliderRef.current.style.left;
        filledRef.current.style.right = `${100 - parseInt(slider2Ref.current.style.left)}%`;
      } else {
        filledRef.current.style.left = slider2Ref.current.style.left;
        filledRef.current.style.right = `${100 - parseInt(sliderRef.current.style.left)}%`;
      }
    }
  };
  const updateSlider = React.useCallback((e) => {
    var _a;
    setAnimation(false);
    const rangeWidth = getRangeWidth();
    const rangeLeft = ((_a = trackRef.current) == null ? void 0 : _a.getBoundingClientRect().left) || 0;
    if ((isDraging || isDraging2) && rangeLeft) {
      let cursorPosition = e.changedTouches ? e.changedTouches[0].pageX : e.pageX;
      if (cursorPosition <= rangeLeft) {
        cursorPosition = rangeLeft;
      }
      if (cursorPosition >= rangeLeft + rangeWidth) {
        cursorPosition = rangeLeft + rangeWidth;
      }
      const getStyle = (cursorPosition2, rangeLeft2, rangeWidth2) => `${(cursorPosition2 - rangeLeft2) / rangeWidth2 * 100}%`;
      if (sliderRef.current && filledRef.current && isDraging) {
        sliderRef.current.style.left = getStyle(cursorPosition, rangeLeft, rangeWidth);
        setFilled();
      } else if (slider2Ref.current && filledRef.current && isDraging2) {
        slider2Ref.current.style.left = getStyle(cursorPosition, rangeLeft, rangeWidth);
        setFilled();
      }
    }
    slideValue(rangeWidth, e);
  }, [slideValue, isDraging, isDraging2]);
  const correctSliderPosition = React.useCallback((value2, slider) => {
    const rangeWidth = getRangeWidth();
    const onePxValue = rangeWidth ? rangeWidth / (maxValue - minValue) : 0;
    if (slider === "first" || slider === "both") {
      const correctValue1 = value2[0] >= 0 ? value2[0] - minValue : -minValue + value2[0];
      let calcPercents1 = onePxValue * correctValue1 / rangeWidth * 100;
      calcPercents1 = calcPercents1 > 100 ? 100 : calcPercents1;
      calcPercents1 = calcPercents1 < 0 ? 0 : calcPercents1;
      const sliderCoords1 = String(value2) ? calcPercents1 : 0;
      if (sliderRef.current && filledRef.current) {
        sliderRef.current.style.left = `${sliderCoords1}%`;
      }
    }
    if (slider === "second" || slider === "both") {
      const correctValue2 = value2[1] >= 0 ? value2[1] - minValue : -minValue + value2[1];
      let calcPercents2 = onePxValue * correctValue2 / rangeWidth * 100;
      calcPercents2 = calcPercents2 > 100 ? 100 : calcPercents2;
      calcPercents2 = calcPercents2 < 0 ? 0 : calcPercents2;
      const sliderCoords2 = String(value2) ? calcPercents2 : 0;
      if (slider2Ref.current && filledRef.current) {
        slider2Ref.current.style.left = `${sliderCoords2}%`;
      }
    }
    setFilled();
    return setSliderValue(value2);
  }, [maxValue, minValue]);
  const onSliderClick = React.useCallback((e, slider) => {
    if (e.type === "mousedown")
      e.preventDefault();
    e.stopPropagation();
    slider === "first" ? setDrag(true) : setDrag2(true);
    setAnimation(true);
  }, [updateSlider, setDrag, setDrag2]);
  const handleSliderMouseUp = React.useCallback((e) => {
    if (e.type === "mouseup")
      e.preventDefault();
    e.stopPropagation();
    setAnimation(true);
    setDrag(false);
    setDrag2(false);
    onChange == null ? void 0 : onChange(e, sortNum(sliderValue));
  }, [onChange, maxValue, minValue, sliderValue]);
  const onTrackClick = React.useCallback((e) => {
    var _a;
    if (!disabled) {
      setAnimation(true);
      const rangeWidth = getRangeWidth();
      const correctLeft = ((_a = trackRef.current) == null ? void 0 : _a.getBoundingClientRect().left) || 0;
      const cursorPosition = e.changedTouches ? e.changedTouches[0].pageX : e.pageX;
      const sliderPosition = cursorPosition - correctLeft;
      const calcValue = calcValueByPos(rangeWidth, sliderPosition, minValue, maxValue, step);
      const first = calcValueByPos(rangeWidth, getSliderPosition("first"), minValue, maxValue, step);
      const second = calcValueByPos(rangeWidth, getSliderPosition("second"), minValue, maxValue, step);
      if (Math.abs(second - calcValue) <= Math.abs(calcValue - first)) {
        correctSliderPosition([first, calcValue], "second");
        onSliderClick(e, "second");
      } else {
        correctSliderPosition([calcValue, second], "first");
        onSliderClick(e, "first");
      }
    }
  }, [correctSliderPosition, disabled, onSliderClick, maxValue, minValue, step]);
  return /* @__PURE__ */ React.createElement(Wrapper$e, {
    "data-dimension": dimension,
    "data-disabled": disabled,
    ...props2
  }, /* @__PURE__ */ React.createElement(TrackWrapper, {
    onTouchStart: onTrackClick,
    onMouseDown: onTrackClick
  }, /* @__PURE__ */ React.createElement(Track, null, /* @__PURE__ */ React.createElement(FilledTrack, {
    ref: filledRef,
    animation
  }), /* @__PURE__ */ React.createElement(DefaultTrack, {
    ref: trackRef
  }, /* @__PURE__ */ React.createElement(Thumb, {
    ref: sliderRef,
    animation
  }, /* @__PURE__ */ React.createElement(ThumbCircle, {
    onTouchStart: (e) => onSliderClick(e, "first"),
    onMouseDown: (e) => onSliderClick(e, "first")
  })), /* @__PURE__ */ React.createElement(Thumb, {
    ref: slider2Ref,
    animation
  }, /* @__PURE__ */ React.createElement(ThumbCircle, {
    onTouchStart: (e) => onSliderClick(e, "second"),
    onMouseDown: (e) => onSliderClick(e, "second")
  }))))));
};
Range.displayName = "Range";
const Wrapper$d = styled.div`
  position: relative;
`;
const InputsWrapper = styled.div`
  display: flex;
  margin-bottom: 16px;
  [data-dimension='s'] & {
    margin-bottom: 12px;
  }
  & > div:first-child {
    margin-right: 8px;
  }
  & > div {
    width: 100%;
  }
`;
const SliderRange = ({
  dimension,
  minValue = 0,
  maxValue = 20,
  step = 1,
  precision = 0,
  thousand = " ",
  prefix = ["\u041E\u0442", "\u0414\u043E"],
  suffix = "\u20BD",
  placeholder = [
    fitToCurrency(String(minValue), precision, ".", thousand, prefix[0], suffix),
    fitToCurrency(String(maxValue), precision, ".", thousand, prefix[1], suffix)
  ],
  defaultValue,
  onChange,
  input1: input1Props,
  input2: input2Props,
  disabled,
  ...props2
}) => {
  const rangeDimension = dimension === "s" ? dimension : "m";
  const input1Ref = React.useRef(null);
  const input2Ref = React.useRef(null);
  const [input1, setInput1] = React.useState("");
  const [input2, setInput2] = React.useState("");
  const [slider1, setSlider1] = React.useState(minValue);
  const [slider2, setSlider2] = React.useState(maxValue);
  const input1Value = input1;
  const input2Value = input2;
  const getFull = (str, prefixNum, fillEmptyDecimals) => fitToCurrency(String(str), precision, ".", thousand, prefix[prefixNum], suffix, fillEmptyDecimals);
  React.useEffect(() => {
    if (defaultValue) {
      const [defaultInput1, defaultInput2] = defaultValue;
      const newInput1 = getFull(defaultInput1, 0, true);
      const newInput2 = getFull(defaultInput2, 1, true);
      const newSlider1 = Number(clearValue(newInput1, precision));
      const newSlider2 = Number(clearValue(newInput2, precision));
      const diff = newSlider2 - newSlider1;
      if (defaultValue.indexOf("") > -1) {
        setInput1(newInput1);
        setInput2(newInput2);
        setSlider1(newInput1 === "" ? minValue : newSlider1);
        setSlider2(newInput2 === "" ? maxValue : newSlider2);
      } else if (diff < step) {
        const delta = step - diff;
        if (newSlider1 - delta > minValue) {
          const newInput12 = newSlider1 - delta;
          setInput1(getFull(newInput12, 0, true));
          setInput2(newInput2);
          setSlider1(newInput12);
          setSlider2(newSlider2);
          onChange == null ? void 0 : onChange([
            { str: getFull(newInput12, 0, true), num: newInput12 },
            { str: getFull(newInput2, 1, true), num: newSlider2 }
          ]);
        } else {
          const newInput22 = newSlider2 + delta;
          setInput1(newInput1);
          setInput2(getFull(newInput22, 1, true));
          setSlider1(newSlider1);
          setSlider2(newInput22);
          onChange == null ? void 0 : onChange([
            { str: getFull(newInput1, 0, true), num: newSlider1 },
            { str: getFull(newInput22, 1, true), num: newInput22 }
          ]);
        }
      } else {
        setInput1(newInput1);
        setInput2(newInput2);
        setSlider1(newSlider1);
        setSlider2(newSlider2);
      }
    }
  }, [defaultValue]);
  const handleRangeChange = (event, value) => {
    const [newSlider1, newSlider2] = value;
    const newInput1 = getFull(newSlider1, 0, true);
    const newInput2 = getFull(newSlider2, 1, true);
    const slider1Changed = newSlider1 !== slider1;
    const slider2Changed = newSlider2 !== slider2;
    const diff = newSlider2 - newSlider1;
    if (event.type !== "mousemove" && event.type !== "touchmove") {
      if (diff < step) {
        const delta = step - diff;
        if (newSlider1 - delta > minValue) {
          setInput1(getFull(newSlider1 - delta, 0, true));
          setSlider1(newSlider1 - delta);
          slider2Changed && setInput2(newInput2);
          slider2Changed && setSlider2(newSlider2);
          onChange == null ? void 0 : onChange([
            { str: getFull(newSlider1 - delta, 0, true), num: newSlider1 - delta },
            { str: slider2Changed ? newInput2 : input2Value, num: slider2Changed ? newSlider2 : slider2 }
          ]);
        } else {
          setInput2(getFull(newSlider2 + delta, 1, true));
          setSlider2(newSlider2 + delta);
          slider1Changed && setInput1(newInput1);
          slider1Changed && setSlider1(newSlider1);
          onChange == null ? void 0 : onChange([
            { str: slider1Changed ? newInput1 : input1Value, num: slider1Changed ? newSlider1 : slider1 },
            { str: getFull(newSlider2 + delta, 1, true), num: newSlider2 + delta }
          ]);
        }
      } else {
        slider1Changed && setInput1(newInput1);
        slider2Changed && setInput2(newInput2);
        slider1Changed && setSlider1(newSlider1);
        slider2Changed && setSlider2(newSlider2);
        onChange == null ? void 0 : onChange([
          { str: slider1Changed ? newInput1 : input1Value, num: slider1Changed ? newSlider1 : slider1 },
          { str: slider2Changed ? newInput2 : input2Value, num: slider2Changed ? newSlider2 : slider2 }
        ]);
      }
    } else {
      slider1Changed && setInput1(newInput1);
      slider2Changed && setInput2(newInput2);
      slider1Changed && setSlider1(newSlider1);
      slider2Changed && setSlider2(newSlider2);
    }
  };
  const handleInput1Blur = () => {
    const value1Num = Number(clearValue(input1Value, precision) || minValue);
    const value2Num = Number(clearValue(input2Value, precision) || maxValue);
    if (value1Num < minValue) {
      setInput1(getFull(minValue, 0, true));
      setSlider1(minValue);
      onChange == null ? void 0 : onChange([
        { str: getFull(minValue, 0, true), num: minValue },
        { str: input2Value, num: slider2 }
      ]);
    } else if (value1Num > value2Num - step) {
      setInput1(getFull(value2Num - step, 0, true));
      setSlider1(value2Num - step);
      onChange == null ? void 0 : onChange([
        { str: getFull(value2Num - step, 0, true), num: value2Num - step },
        { str: input2Value, num: slider2 }
      ]);
    } else {
      setSlider1(value1Num);
      onChange == null ? void 0 : onChange([
        { str: input1Value, num: value1Num },
        { str: input2Value, num: slider2 }
      ]);
    }
  };
  const handleInput2Blur = () => {
    const value1Num = Number(clearValue(input1Value, precision) || minValue);
    const value2Num = Number(clearValue(input2Value, precision) || maxValue);
    if (value2Num > maxValue) {
      setInput2(getFull(maxValue, 1, true));
      setSlider2(maxValue);
      onChange == null ? void 0 : onChange([
        { str: input1Value, num: slider1 },
        { str: getFull(maxValue, 1, true), num: maxValue }
      ]);
    } else if (value2Num < value1Num + step) {
      setInput2(getFull(value1Num + step, 1, true));
      setSlider2(value1Num + step);
      onChange == null ? void 0 : onChange([
        { str: input1Value, num: slider1 },
        { str: getFull(value1Num + step, 1, true), num: value1Num + step }
      ]);
    } else {
      setSlider2(value2Num);
      onChange == null ? void 0 : onChange([
        { str: input1Value, num: slider1 },
        { str: input2Value, num: value2Num }
      ]);
    }
  };
  const handleInput1Change = (fullStr) => setInput1(fullStr);
  const handleInput2Change = (fullStr) => setInput2(fullStr);
  const inputProps = {
    dimension,
    precision,
    thousand,
    suffix,
    disabled,
    displayPlusMinusIcons: false,
    step,
    minValue,
    maxValue
  };
  return /* @__PURE__ */ React.createElement(Wrapper$d, {
    "data-dimension": dimension,
    ...props2
  }, /* @__PURE__ */ React.createElement(InputsWrapper, null, /* @__PURE__ */ React.createElement(NumberInput, {
    ref: input1Ref,
    value: input1,
    prefix: prefix[0],
    placeholder: placeholder[0],
    onChange: handleInput1Change,
    onBlur: handleInput1Blur,
    ...input1Props,
    ...inputProps
  }), /* @__PURE__ */ React.createElement(NumberInput, {
    ref: input2Ref,
    value: input2,
    prefix: prefix[1],
    placeholder: placeholder[1],
    onChange: handleInput2Change,
    onBlur: handleInput2Blur,
    ...input2Props,
    ...inputProps
  })), /* @__PURE__ */ React.createElement(Range, {
    value: [slider1, slider2],
    onChange: handleRangeChange,
    minValue,
    maxValue,
    step,
    dimension: rangeDimension,
    disabled
  }));
};
SliderRange.displayName = "SliderRange";
const EditInput = styled(TextInput)`
  flex: 1 1 auto;
  & input {
    [data-dimension='s'] & {
      ${typography$1["Body/Body 2 Long"]}
    }
    [data-dimension='s-bold'] & {
      ${typography$1["Subtitle/Subtitle 3"]}
    }
    [data-dimension='m'] & {
      ${typography$1["Body/Body 1 Long"]}
    }
    [data-dimension='m-bold'] & {
      ${typography$1["Subtitle/Subtitle 2"]}
    }
    [data-dimension='xl'] & {
      ${typography$1["Header/H5"]}
    }
  }
`;
const EditButton = styled(Button$7)`
  margin-left: 4px;
  flex-shrink: 0;
`;
const iconStyle = css`
  display: flex;
  flex-shrink: 0;
  cursor: pointer;
`;
const EditIcon = styled(ReactComponent$k)`
  ${iconStyle}
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }

  [data-disabled='true'] & {
    cursor: default;
    pointer-events: none;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.disable};
    }
  }
  [data-disabled='false'] & {
    &:hover {
      & *[fill^='#'] {
        fill: ${({ theme }) => theme.color.basic.hover};
      }
    }
  }
`;
const CheckIcon = styled(ReactComponent$l)`
  ${iconStyle}
`;
const ClearIcon = styled(ReactComponent$7)`
  ${iconStyle}
`;
const Wrapper$c = styled.div`
  display: flex;
  align-items: center;
  ${({ cssMixin }) => cssMixin || ""}
`;
const Text$3 = styled.div`
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  align-items: center;
  cursor: text;
  margin-right: 12px;
  padding-left: 16px;
  [data-dimension='s'] & {
    ${typography$1["Body/Body 2 Long"]}
    height: 32px;
    line-height: 32px;
    padding-left: 12px;
  }
  [data-dimension='s-bold'] & {
    ${typography$1["Subtitle/Subtitle 3"]}
    height: 32px;
    line-height: 32px;
    padding-left: 12px;
  }
  [data-dimension='m'] & {
    ${typography$1["Body/Body 1 Long"]}
    height: 40px;
    line-height: 40px;
  }
  [data-dimension='m-bold'] & {
    ${typography$1["Subtitle/Subtitle 2"]}
    height: 40px;
    line-height: 40px;
  }
  [data-dimension='xl'] & {
    ${typography$1["Header/H5"]}
    height: 56px;
    line-height: 56px;
  }

  [data-disabled='true'] & {
    cursor: default;
    pointer-events: none;
  }
  [data-disabled='false'] & {
    &:hover {
      & + ${EditIcon} *[fill^='#'] {
        fill: ${({ theme }) => theme.color.basic.hover};
      }
    }
  }
`;
const EditMode = React.forwardRef(({ dimension = "m", bold = false, containerCssMixin, disabled = false, onEdit, onConfirm, onClear, value, ...props2 }, ref) => {
  const [edit, setEdit] = React.useState(false);
  const [localVal, setLocalVal] = React.useState(value);
  const iconSize = dimension === "s" ? 20 : 24;
  const inputRef = React.useRef(null);
  React.useEffect(() => {
    if (!localVal && value) {
      setLocalVal(value);
    }
  }, [value, localVal]);
  const enableEdit = () => {
    setEdit(true);
    onEdit == null ? void 0 : onEdit();
  };
  const disabledEdit = () => {
    setEdit(false);
    if (inputRef.current) {
      onConfirm == null ? void 0 : onConfirm(inputRef.current.value);
      setLocalVal(inputRef.current.value);
    }
  };
  const handleClear = () => {
    setEdit(false);
    if (inputRef.current) {
      changeInputData(inputRef.current, { value: localVal.toString() });
      onClear == null ? void 0 : onClear();
    }
  };
  return /* @__PURE__ */ React.createElement(Wrapper$c, {
    "data-dimension": `${dimension}${bold && dimension !== "xl" ? "-bold" : ""}`,
    "data-disabled": disabled,
    cssMixin: containerCssMixin
  }, edit ? !disabled && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EditInput, {
    ref: refSetter(ref, inputRef),
    autoFocus: true,
    disabled,
    dimension,
    value,
    ...props2
  }), /* @__PURE__ */ React.createElement(EditButton, {
    appearance: "secondary",
    dimension,
    displayAsSquare: true,
    disabled: props2.status === "error",
    onClick: disabledEdit
  }, /* @__PURE__ */ React.createElement(CheckIcon, {
    height: iconSize,
    width: iconSize
  })), /* @__PURE__ */ React.createElement(EditButton, {
    appearance: "secondary",
    dimension,
    displayAsSquare: true,
    onClick: handleClear
  }, /* @__PURE__ */ React.createElement(ClearIcon, {
    height: iconSize,
    width: iconSize
  }))) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Text$3, {
    onClick: enableEdit
  }, value), /* @__PURE__ */ React.createElement(EditIcon, {
    height: iconSize,
    width: iconSize,
    onClick: enableEdit
  })));
});
EditMode.displayName = "EditMode";
const COUNTRY_ISO3_CODES = [
  "AFG",
  "ALA",
  "ALB",
  "DZA",
  "AND",
  "AGO",
  "AIA",
  "ATG",
  "ARE",
  "ARG",
  "ARM",
  "ABW",
  "AUS",
  "AUT",
  "AZE",
  "BHS",
  "BHR",
  "BGD",
  "BRB",
  "BLR",
  "BEL",
  "BLZ",
  "BEN",
  "BMU",
  "BTN",
  "BOL",
  "BIH",
  "BWA",
  "BRA",
  "VGB",
  "BRN",
  "BGR",
  "BFA",
  "BDI",
  "CPV",
  "KHM",
  "CMR",
  "CAN",
  "CYM",
  "CAF",
  "TCD",
  "CHL",
  "CHN",
  "COL",
  "COM",
  "COD",
  "COG",
  "CRI",
  "CIV",
  "HRV",
  "CUB",
  "CYP",
  "CZE",
  "DNK",
  "DJI",
  "DMA",
  "DOM",
  "ECU",
  "EGY",
  "SLV",
  "GNQ",
  "ERI",
  "EST",
  "ETH",
  "FLK",
  "FJI",
  "FIN",
  "FRA",
  "GAB",
  "GMB",
  "GEO",
  "DEU",
  "GHA",
  "GIB",
  "GBR",
  "GRC",
  "GRD",
  "GTM",
  "GGY",
  "GIN",
  "GNB",
  "GUY",
  "HTI",
  "HND",
  "HKG",
  "HUN",
  "ISL",
  "IND",
  "IDN",
  "IRN",
  "IRQ",
  "IRL",
  "IMN",
  "ISR",
  "ITA",
  "JAM",
  "JPN",
  "JEY",
  "JOR",
  "KAZ",
  "KEN",
  "PRK",
  "KOR",
  "KWT",
  "KGZ",
  "LAO",
  "LVA",
  "LBN",
  "LSO",
  "LBR",
  "LBY",
  "LIE",
  "LTU",
  "LUX",
  "MAC",
  "MKD",
  "MDG",
  "MWI",
  "MYS",
  "MDV",
  "MLI",
  "MLT",
  "MRT",
  "MUS",
  "MEX",
  "FSM",
  "MDA",
  "MCO",
  "MNG",
  "MNE",
  "MSR",
  "MAR",
  "MOZ",
  "MMR",
  "NAM",
  "NPL",
  "NLD",
  "ANT",
  "NZL",
  "NIC",
  "NER",
  "NGA",
  "NOR",
  "OMN",
  "PAK",
  "PLW",
  "PAN",
  "PNG",
  "PRY",
  "PER",
  "PHL",
  "POL",
  "PYF",
  "PRT",
  "PRI",
  "QAT",
  "ROU",
  "RUS",
  "RWA",
  "SHN",
  "KNA",
  "LCA",
  "VCT",
  "WSM",
  "SMR",
  "STP",
  "SAU",
  "SEN",
  "SRB",
  "SYC",
  "SLE",
  "SGP",
  "SVK",
  "SVN",
  "SLB",
  "SOM",
  "ZAF",
  "ESP",
  "LKA",
  "SDN",
  "SUR",
  "SWZ",
  "SWE",
  "CHE",
  "SYR",
  "TWN",
  "TJK",
  "TZA",
  "THA",
  "TLS",
  "TGO",
  "TON",
  "TTO",
  "TUN",
  "TUR",
  "TKM",
  "TCA",
  "UGA",
  "UKR",
  "USA",
  "URY",
  "UZB",
  "VUT",
  "VEN",
  "VNM",
  "YEM",
  "ZMB",
  "ZWE"
];
const CountryNames = {
  AFG: "Afghanistan",
  ALA: "AlandIslands",
  ALB: "Albania",
  DZA: "Algeria",
  AND: "Andorra",
  AGO: "Angola",
  AIA: "Anguilla",
  ATG: "AntiguaAndBarbuda",
  ARE: "ArabEmirates",
  ARG: "Argentina",
  ARM: "Armenia",
  ABW: "Aruba",
  AUS: "Australia",
  AUT: "Austria",
  AZE: "Azerbaijan",
  BHS: "Bahamas",
  BHR: "Bahrain",
  BGD: "Bangladesh",
  BRB: "Barbados",
  BLR: "Belarus",
  BEL: "Belgium",
  BLZ: "Belize",
  BEN: "Benin",
  BMU: "Bermuda",
  BTN: "Bhutan",
  BOL: "Bolivia",
  BIH: "BosniaAndHerzegovina",
  BWA: "Botswana",
  BRA: "Brazil",
  VGB: "BritishVirginIslands",
  BRN: "Brunei",
  BGR: "Bulgaria",
  BFA: "BurkinaFaso",
  BDI: "Burundi",
  CPV: "CaboVerde",
  KHM: "Cambodia",
  CMR: "Cameroon",
  CAN: "Canada",
  CYM: "CaymanIslands",
  CAF: "CentralAfricanRepublic",
  TCD: "Chad",
  CHL: "Chile",
  CHN: "China",
  COL: "Colombia",
  COM: "Comoros",
  COD: "CongoDemocraticRepublic",
  COG: "CongoRepublic",
  CRI: "CostaRica",
  CIV: "CoteDIvoire",
  HRV: "Croatia",
  CUB: "Cuba",
  CYP: "Cyprus",
  CZE: "Czechia",
  DNK: "Denmark",
  DJI: "Djibouti",
  DMA: "Dominica",
  DOM: "DominicanRepublic",
  ECU: "Ecuador",
  EGY: "Egypt",
  SLV: "ElSalvador",
  GNQ: "EquatorialGuinea",
  ERI: "Eritrea",
  EST: "Estonia",
  ETH: "Ethiopia",
  FLK: "FalklandIslands",
  FJI: "Fiji",
  FIN: "Finland",
  FRA: "France",
  GAB: "Gabon",
  GMB: "Gambia",
  GEO: "Georgia",
  DEU: "Germany",
  GHA: "Ghana",
  GIB: "Gibraltar",
  GBR: "GreatBritain",
  GRC: "Greece",
  GRD: "Grenada",
  GTM: "Guatemala",
  GGY: "Guernsey",
  GIN: "Guinea",
  GNB: "GuineaBissau",
  GUY: "Guyana",
  HTI: "Haiti",
  HND: "Honduras",
  HKG: "HongKong",
  HUN: "Hungary",
  ISL: "Iceland",
  IND: "India",
  IDN: "Indonesia",
  IRN: "Iran",
  IRQ: "Iraq",
  IRL: "Ireland",
  IMN: "IsleOfMan",
  ISR: "Israel",
  ITA: "Italy",
  JAM: "Jamaica",
  JPN: "Japan",
  JEY: "Jersey",
  JOR: "Jordan",
  KAZ: "Kazakhstan",
  KEN: "Kenya",
  PRK: "KoreaNorth",
  KOR: "KoreaSouth",
  KWT: "Kuwait",
  KGZ: "Kyrgyzstan",
  LAO: "Laos",
  LVA: "Latvia",
  LBN: "Lebanon",
  LSO: "Lesotho",
  LBR: "Liberia",
  LBY: "Libya",
  LIE: "Liechtenstein",
  LTU: "Lithuania",
  LUX: "Luxembourg",
  MAC: "Macao",
  MKD: "Macedonia",
  MDG: "Madagascar",
  MWI: "Malawi",
  MYS: "Malaysia",
  MDV: "Maldives",
  MLI: "Mali",
  MLT: "Malta",
  MRT: "Mauritania",
  MUS: "Mauritius",
  MEX: "Mexico",
  FSM: "Micronesia",
  MDA: "Moldova",
  MCO: "Monaco",
  MNG: "Mongolia",
  MNE: "Montenegro",
  MSR: "Montserrat",
  MAR: "Morocco",
  MOZ: "Mozambique",
  MMR: "Myanmar",
  NAM: "Namibia",
  NPL: "Nepal",
  NLD: "Netherlands",
  ANT: "NetherlandsAntillesCountry",
  NZL: "NewZealand",
  NIC: "Nicaragua",
  NER: "Niger",
  NGA: "Nigeria",
  NOR: "Norway",
  OMN: "Oman",
  PAK: "Pakistan",
  PLW: "Palau",
  PAN: "Panama",
  PNG: "PapuaNewGuinea",
  PRY: "Paraguay",
  PER: "Peru",
  PHL: "Philippines",
  POL: "Poland",
  PYF: "PolynesiaFrench",
  PRT: "Portugal",
  PRI: "PuertoRico",
  QAT: "Qatar",
  ROU: "Romania",
  RUS: "Russia",
  RWA: "Rwanda",
  SHN: "SaintHelena",
  KNA: "SaintKittsAndNevis",
  LCA: "SaintLucia",
  VCT: "SaintVincentAndTheGrenadines",
  WSM: "Samoa",
  SMR: "SanMarino",
  STP: "SaoTomeAndPrincipe",
  SAU: "SaudiArabia",
  SEN: "Senegal",
  SRB: "Serbia",
  SYC: "Seychelles",
  SLE: "SierraLeone",
  SGP: "Singapore",
  SVK: "Slovakia",
  SVN: "Slovenia",
  SLB: "SolomonIslands",
  SOM: "Somalia",
  ZAF: "SouthAfrica",
  ESP: "Spain",
  LKA: "SriLanka",
  SDN: "Sudan",
  SUR: "Suriname",
  SWZ: "Swaziland",
  SWE: "Sweden",
  CHE: "Switzerland",
  SYR: "Syria",
  TWN: "Taiwan",
  TJK: "Tajikistan",
  TZA: "Tanzania",
  THA: "Thailand",
  TLS: "TimorLeste",
  TGO: "Togo",
  TON: "Tonga",
  TTO: "TrinidadAndTobago",
  TUN: "Tunisia",
  TUR: "Turkey",
  TKM: "Turkmenistan",
  TCA: "TurksAndCaicosIslands",
  UGA: "Uganda",
  UKR: "Ukraine",
  USA: "UnitedStatesOfAmerica",
  URY: "Uruguay",
  UZB: "Uzbekistan",
  VUT: "Vanuatu",
  VEN: "Venezuela",
  VNM: "Vietnam",
  YEM: "Yemen",
  ZMB: "Zambia",
  ZWE: "Zimbabwe"
};
const CountryRusNames = {
  AFG: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
  ALA: "\u0410\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  ALB: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F",
  DZA: "\u0410\u043B\u0436\u0438\u0440",
  AND: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430",
  AGO: "\u0410\u043D\u0433\u043E\u043B\u0430",
  AIA: "\u0410\u043D\u0433\u0438\u043B\u044C\u044F",
  ATG: "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430",
  ARE: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B",
  ARG: "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430",
  ARM: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F",
  ABW: "\u0410\u0440\u0443\u0431\u0430",
  AUS: "\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u044F",
  AUT: "\u0410\u0432\u0441\u0442\u0440\u0438\u044F",
  AZE: "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D",
  BHS: "\u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  BHR: "\u0411\u0430\u0445\u0440\u0435\u0439\u043D",
  BGD: "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448",
  BRB: "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441",
  BLR: "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u0438\u044F",
  BEL: "\u0411\u0435\u043B\u044C\u0433\u0438\u044F",
  BLZ: "\u0411\u0435\u043B\u0438\u0437",
  BEN: "\u0411\u0435\u043D\u0438\u043D",
  BMU: "\u0411\u0435\u0440\u043C\u0443\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  BTN: "\u0411\u0443\u0442\u0430\u043D",
  BOL: "\u0411\u043E\u043B\u0438\u0432\u0438\u044F",
  BIH: "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
  BWA: "\u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430",
  BRA: "\u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F",
  VGB: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0435 \u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430",
  BRN: "\u0411\u0440\u0443\u043D\u0435\u0439",
  BGR: "\u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F",
  BFA: "\u0411\u0443\u0440\u043A\u0438\u043D\u0430-\u0424\u0430\u0441\u043E",
  BDI: "\u0411\u0443\u0440\u0443\u043D\u0434\u0438",
  CPV: "\u041A\u0430\u0431\u043E-\u0412\u0435\u0440\u0434\u0435",
  KHM: "\u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430",
  CMR: "\u041A\u0430\u043C\u0435\u0440\u0443\u043D",
  CAN: "\u041A\u0430\u043D\u0430\u0434\u0430",
  CYM: "\u041A\u0430\u0439\u043C\u0430\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  CAF: "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
  TCD: "\u0427\u0430\u0434",
  CHL: "\u0427\u0438\u043B\u0438",
  CHN: "\u041A\u0438\u0442\u0430\u0439",
  COL: "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F",
  COM: "\u041A\u043E\u043C\u043E\u0440\u044B",
  COD: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
  COG: "\u041A\u043E\u043D\u0433\u043E",
  CRI: "\u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430",
  CIV: "\u041A\u043E\u0442-\u0434'\u0418\u0432\u0443\u0430\u0440",
  HRV: "\u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F",
  CUB: "\u041A\u0443\u0431\u0430",
  CYP: "\u041A\u0438\u043F\u0440",
  CZE: "\u0427\u0435\u0445\u0438\u044F",
  DNK: "\u0414\u0430\u043D\u0438\u044F",
  DJI: "\u0414\u0436\u0438\u0431\u0443\u0442\u0438",
  DMA: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430",
  DOM: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
  ECU: "\u042D\u043A\u0432\u0430\u0434\u043E\u0440",
  EGY: "\u0415\u0433\u0438\u043F\u0435\u0442",
  SLV: "\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440",
  GNQ: "\u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F",
  ERI: "\u042D\u0440\u0438\u0442\u0440\u0435\u044F",
  EST: "\u042D\u0441\u0442\u043E\u043D\u0438\u044F",
  ETH: "\u042D\u0444\u0438\u043E\u043F\u0438\u044F",
  FLK: "\u0424\u043E\u043B\u043A\u043B\u0435\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  FJI: "\u0424\u0438\u0434\u0436\u0438",
  FIN: "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0438\u044F",
  FRA: "\u0424\u0440\u0430\u043D\u0446\u0438\u044F",
  GAB: "\u0413\u0430\u0431\u043E\u043D",
  GMB: "\u0413\u0430\u043C\u0431\u0438\u044F",
  GEO: "\u0413\u0440\u0443\u0437\u0438\u044F",
  DEU: "\u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F",
  GHA: "\u0413\u0430\u043D\u0430",
  GIB: "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440",
  GBR: "\u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u044F",
  GRC: "\u0413\u0440\u0435\u0446\u0438\u044F",
  GRD: "\u0413\u0440\u0435\u043D\u0430\u0434\u0430",
  GTM: "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430",
  GGY: "\u0413\u0435\u0440\u043D\u0441\u0438",
  GIN: "\u0413\u0432\u0438\u043D\u0435\u044F",
  GNB: "\u0413\u0432\u0438\u043D\u0435\u044F-\u0411\u0438\u0441\u0430\u0443",
  GUY: "\u0413\u0430\u0439\u0430\u043D\u0430",
  HTI: "\u0413\u0430\u0438\u0442\u0438",
  HND: "\u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441",
  HKG: "\u0413\u043E\u043D\u043A\u043E\u043D\u0433",
  HUN: "\u0412\u0435\u043D\u0433\u0440\u0438\u044F",
  ISL: "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F",
  IND: "\u0418\u043D\u0434\u0438\u044F",
  IDN: "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F",
  IRN: "\u0418\u0440\u0430\u043D",
  IRQ: "\u0418\u0440\u0430\u043A",
  IRL: "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F",
  IMN: "\u041E\u0441\u0442\u0440\u043E\u0432 \u041C\u044D\u043D",
  ISR: "\u0418\u0437\u0440\u0430\u0438\u043B\u044C",
  ITA: "\u0418\u0442\u0430\u043B\u0438\u044F",
  JAM: "\u042F\u043C\u0430\u0439\u043A\u0430",
  JPN: "\u042F\u043F\u043E\u043D\u0438\u044F",
  JEY: "\u0414\u0436\u0435\u0440\u0441\u0438",
  JOR: "\u0418\u043E\u0440\u0434\u0430\u043D\u0438\u044F",
  KAZ: "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
  KEN: "\u041A\u0435\u043D\u0438\u044F",
  PRK: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F",
  KOR: "\u042E\u0436\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F",
  KWT: "\u041A\u0443\u0432\u0435\u0439\u0442",
  KGZ: "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F",
  LAO: "\u041B\u0430\u043E\u0441",
  LVA: "\u041B\u0430\u0442\u0432\u0438\u044F",
  LBN: "\u041B\u0438\u0432\u0430\u043D",
  LSO: "\u041B\u0435\u0441\u043E\u0442\u043E",
  LBR: "\u041B\u0438\u0431\u0435\u0440\u0438\u044F",
  LBY: "\u041B\u0438\u0432\u0438\u044F",
  LIE: "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D",
  LTU: "\u041B\u0438\u0442\u0432\u0430",
  LUX: "\u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433",
  MAC: "\u041C\u0430\u043A\u0430\u043E",
  MKD: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F",
  MDG: "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440",
  MWI: "\u041C\u0430\u043B\u0430\u0432\u0438",
  MYS: "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F",
  MDV: "\u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B",
  MLI: "\u041C\u0430\u043B\u0438",
  MLT: "\u041C\u0430\u043B\u044C\u0442\u0430",
  MRT: "\u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F",
  MUS: "\u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439",
  MEX: "\u041C\u0435\u043A\u0441\u0438\u043A\u0430",
  FSM: "\u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u044F",
  MDA: "\u041C\u043E\u043B\u0434\u0430\u0432\u0438\u044F",
  MCO: "\u041C\u043E\u043D\u0430\u043A\u043E",
  MNG: "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F",
  MNE: "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F",
  MSR: "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0440\u0430\u0442",
  MAR: "\u041C\u0430\u0440\u043E\u043A\u043A\u043E",
  MOZ: "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A",
  MMR: "\u041C\u044C\u044F\u043D\u043C\u0430",
  NAM: "\u041D\u0430\u043C\u0438\u0431\u0438\u044F",
  NPL: "\u041D\u0435\u043F\u0430\u043B",
  NLD: "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B",
  ANT: "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u0410\u043D\u0442\u0438\u043B\u044C\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  NZL: "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F",
  NIC: "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430",
  NER: "\u041D\u0438\u0433\u0435\u0440",
  NGA: "\u041D\u0438\u0433\u0435\u0440\u0438\u044F",
  NOR: "\u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F",
  OMN: "\u041E\u043C\u0430\u043D",
  PAK: "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D",
  PLW: "\u041F\u0430\u043B\u0430\u0443",
  PAN: "\u041F\u0430\u043D\u0430\u043C\u0430",
  PNG: "\u041F\u0430\u043F\u0443\u0430-\u041D\u043E\u0432\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F",
  PRY: "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439",
  PER: "\u041F\u0435\u0440\u0443",
  PHL: "\u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B",
  POL: "\u041F\u043E\u043B\u044C\u0448\u0430",
  PYF: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F",
  PRT: "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0438\u044F",
  PRI: "\u041F\u0443\u044D\u0440\u0442\u043E-\u0420\u0438\u043A\u043E",
  QAT: "\u041A\u0430\u0442\u0430\u0440",
  ROU: "\u0420\u0443\u043C\u044B\u043D\u0438\u044F",
  RUS: "\u0420\u043E\u0441\u0441\u0438\u044F",
  RWA: "\u0420\u0443\u0430\u043D\u0434\u0430",
  SHN: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0421\u0432\u044F\u0442\u043E\u0439 \u0415\u043B\u0435\u043D\u044B",
  KNA: "\u0421\u0435\u043D\u0442-\u041A\u0438\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441",
  LCA: "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F",
  VCT: "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B",
  WSM: "\u0421\u0430\u043C\u043E\u0430",
  SMR: "\u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E",
  STP: "\u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438",
  SAU: "\u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F",
  SEN: "\u0421\u0435\u043D\u0435\u0433\u0430\u043B",
  SRB: "\u0421\u0435\u0440\u0431\u0438\u044F",
  SYC: "\u0421\u0435\u0439\u0448\u0435\u043B\u044B",
  SLE: "\u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435",
  SGP: "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440",
  SVK: "\u0421\u043B\u043E\u0432\u0430\u043A\u0438\u044F",
  SVN: "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F",
  SLB: "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
  SOM: "\u0421\u043E\u043C\u0430\u043B\u0438",
  ZAF: "\u042E\u0436\u043D\u0430\u044F \u0410\u0444\u0440\u0438\u043A\u0430",
  ESP: "\u0418\u0441\u043F\u0430\u043D\u0438\u044F",
  LKA: "\u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430",
  SDN: "\u0421\u0443\u0434\u0430\u043D",
  SUR: "\u0421\u0443\u0440\u0438\u043D\u0430\u043C",
  SWZ: "\u042D\u0441\u0432\u0430\u0442\u0438\u043D\u0438",
  SWE: "\u0428\u0432\u0435\u0446\u0438\u044F",
  CHE: "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F",
  SYR: "\u0421\u0438\u0440\u0438\u044F",
  TWN: "\u0422\u0430\u0439\u0432\u0430\u043D\u044C",
  TJK: "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
  TZA: "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F",
  THA: "\u0422\u0430\u0438\u043B\u0430\u043D\u0434",
  TLS: "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u044B\u0439 \u0422\u0438\u043C\u043E\u0440",
  TGO: "\u0422\u043E\u0433\u043E",
  TON: "\u0422\u043E\u043D\u0433\u0430",
  TTO: "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E",
  TUN: "\u0422\u0443\u043D\u0438\u0441",
  TUR: "\u0422\u0443\u0440\u0446\u0438\u044F",
  TKM: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
  TCA: "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441",
  UGA: "\u0423\u0433\u0430\u043D\u0434\u0430",
  UKR: "\u0423\u043A\u0440\u0430\u0438\u043D\u0430",
  USA: "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438",
  URY: "\u0423\u0440\u0443\u0433\u0432\u0430\u0439",
  UZB: "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
  VUT: "\u0412\u0430\u043D\u0443\u0430\u0442\u0443",
  VEN: "\u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430",
  VNM: "\u0412\u044C\u0435\u0442\u043D\u0430\u043C",
  YEM: "\u0419\u0435\u043C\u0435\u043D",
  ZMB: "\u0417\u0430\u043C\u0431\u0438\u044F",
  ZWE: "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435"
};
const CountryCodes = {
  AFG: ["+93"],
  ALA: ["+358"],
  ALB: ["+355"],
  DZA: ["+213"],
  AND: ["+376"],
  AGO: ["+244"],
  AIA: ["+1-264"],
  ATG: ["+1-268"],
  ARE: ["+971"],
  ARG: ["+54"],
  ARM: ["+374"],
  ABW: ["+297"],
  AUS: ["+61"],
  AUT: ["+43"],
  AZE: ["+994"],
  BHS: ["+1-242"],
  BHR: ["+973"],
  BGD: ["+880"],
  BRB: ["+1-246"],
  BLR: ["+375"],
  BEL: ["+32"],
  BLZ: ["+501"],
  BEN: ["+229"],
  BMU: ["+1-441"],
  BTN: ["+975"],
  BOL: ["+591"],
  BIH: ["+387"],
  BWA: ["+267"],
  BRA: ["+55"],
  VGB: ["+1-284"],
  BRN: ["+673"],
  BGR: ["+359"],
  BFA: ["+226"],
  BDI: ["+257"],
  CPV: ["+238"],
  KHM: ["+855"],
  CMR: ["+237"],
  CAN: ["+1"],
  CYM: ["+1-345"],
  CAF: ["+236"],
  TCD: ["+235"],
  CHL: ["+56"],
  CHN: ["+86"],
  COL: ["+57"],
  COM: ["+269"],
  COD: ["+243"],
  COG: ["+242"],
  CRI: ["+506"],
  CIV: ["+225"],
  HRV: ["+385"],
  CUB: ["+53"],
  CYP: ["+357"],
  CZE: ["+420"],
  DNK: ["+45"],
  DJI: ["+253"],
  DMA: ["+1-767"],
  DOM: ["+1-809", "+1-829", "+1-849"],
  ECU: ["+593"],
  EGY: ["+20"],
  SLV: ["+503"],
  GNQ: ["+240"],
  ERI: ["+291"],
  EST: ["+372"],
  ETH: ["+251"],
  FLK: ["+500"],
  FJI: ["+679"],
  FIN: ["+358"],
  FRA: ["+33"],
  GAB: ["+241"],
  GMB: ["+220"],
  GEO: ["+995"],
  DEU: ["+49"],
  GHA: ["+233"],
  GIB: ["+350"],
  GBR: ["+44"],
  GRC: ["+30"],
  GRD: ["+1-473"],
  GTM: ["+502"],
  GGY: ["+44-1481"],
  GIN: ["+224"],
  GNB: ["+245"],
  GUY: ["+592"],
  HTI: ["+509"],
  HND: ["+504"],
  HKG: ["+852"],
  HUN: ["+36"],
  ISL: ["+354"],
  IND: ["+91"],
  IDN: ["+62"],
  IRN: ["+98"],
  IRQ: ["+964"],
  IRL: ["+353"],
  IMN: ["+44-1624"],
  ISR: ["+972"],
  ITA: ["+39"],
  JAM: ["+1-876"],
  JPN: ["+81"],
  JEY: ["+44-1534"],
  JOR: ["+962"],
  KAZ: ["+7"],
  KEN: ["+254"],
  PRK: ["+850"],
  KOR: ["+82"],
  KWT: ["+965"],
  KGZ: ["+996"],
  LAO: ["+856"],
  LVA: ["+371"],
  LBN: ["+961"],
  LSO: ["+266"],
  LBR: ["+231"],
  LBY: ["+218"],
  LIE: ["+423"],
  LTU: ["+370"],
  LUX: ["+352"],
  MAC: ["+853"],
  MKD: ["+389"],
  MDG: ["+261"],
  MWI: ["+265"],
  MYS: ["+213"],
  MDV: ["+960"],
  MLI: ["+223"],
  MLT: ["+356"],
  MRT: ["+222"],
  MUS: ["+230"],
  MEX: ["+52"],
  FSM: ["+691"],
  MDA: ["+373"],
  MCO: ["+377"],
  MNG: ["+976"],
  MNE: ["+382"],
  MSR: ["+1-664"],
  MAR: ["+212"],
  MOZ: ["+258"],
  MMR: ["+95"],
  NAM: ["+264"],
  NPL: ["+977"],
  NLD: ["+31"],
  ANT: ["+599"],
  NZL: ["+64"],
  NIC: ["+505"],
  NER: ["+227"],
  NGA: ["+234"],
  NOR: ["+47"],
  OMN: ["+968"],
  PAK: ["+92"],
  PLW: ["+680"],
  PAN: ["+507"],
  PNG: ["+675"],
  PRY: ["+595"],
  PER: ["+51"],
  PHL: ["+63"],
  POL: ["+48"],
  PYF: ["+689"],
  PRT: ["+351"],
  PRI: ["+1-787", "+1-939"],
  QAT: ["+974"],
  ROU: ["+40"],
  RUS: ["+7"],
  RWA: ["+250"],
  SHN: ["+290"],
  KNA: ["+1-869"],
  LCA: ["+1-758"],
  VCT: ["+1-784"],
  WSM: ["+685"],
  SMR: ["+378"],
  STP: ["+239"],
  SAU: ["+966"],
  SEN: ["+221"],
  SRB: ["+381"],
  SYC: ["+248"],
  SLE: ["+232"],
  SGP: ["+65"],
  SVK: ["+421"],
  SVN: ["+386"],
  SLB: ["+677"],
  SOM: ["+252"],
  ZAF: ["+27"],
  ESP: ["+34"],
  LKA: ["+94"],
  SDN: ["+249"],
  SUR: ["+597"],
  SWZ: ["+213"],
  SWE: ["+46"],
  CHE: ["+41"],
  SYR: ["+963"],
  TWN: ["+886"],
  TJK: ["+992"],
  TZA: ["+255"],
  THA: ["+66"],
  TLS: ["+670"],
  TGO: ["+228"],
  TON: ["+676"],
  TTO: ["+1-868"],
  TUN: ["+216"],
  TUR: ["+90"],
  TKM: ["+993"],
  TCA: ["+1-649"],
  UGA: ["+256"],
  UKR: ["+380"],
  USA: ["+1"],
  URY: ["+598"],
  UZB: ["+998"],
  VUT: ["+678"],
  VEN: ["+58"],
  VNM: ["+84"],
  YEM: ["+967"],
  ZMB: ["+260"],
  ZWE: ["+263"]
};
const Flag = ({ Component, dimension, ...props2 }) => {
  const width2 = dimension === "s" ? "18" : "22";
  return /* @__PURE__ */ React.createElement(Component, {
    ...props2,
    width: width2
  });
};
const defaultPhoneNumberInputHandler = clojureHandler(null);
function clojureHandler(mask) {
  const countryCode = mask == null ? void 0 : mask.replace(/\D/g, "");
  function needFormat(value) {
    if (!value || !countryCode)
      return false;
    const hasPlus = value.charAt(0) === "+";
    const hasCountyWs = value.length > countryCode.length + 1 ? value.charAt(countryCode.length + 1) === " " : true;
    const hasCityWs = value.length > countryCode.length + 5 ? value.charAt(countryCode.length + 5) === " " : true;
    const hasMiddleWs = value.length > countryCode.length + 9 ? value.charAt(countryCode.length + 9) === " " : true;
    return !hasPlus || !hasCountyWs || !hasCityWs || !hasMiddleWs;
  }
  const InitialInputData = {
    selectionStart: 1,
    value: ""
  };
  return (inputData) => {
    var _a;
    let selectionStart = (inputData == null ? void 0 : inputData.selectionStart) || 1;
    if (!needFormat((inputData == null ? void 0 : inputData.value) || "")) {
      return inputData || InitialInputData;
    }
    const hasNoPlus = ((_a = inputData == null ? void 0 : inputData.value) == null ? void 0 : _a.charAt(0)) !== "+";
    if (hasNoPlus)
      selectionStart += 1;
    const clearData = ((inputData == null ? void 0 : inputData.value) || "").replace(/\D/g, "");
    const value = formatValue(countryCode, clearData);
    const positionWithSpaceBefore = /\d/.test(value.charAt(selectionStart)) && value.charAt(selectionStart - 1) === " ";
    const oldNextChar = (inputData == null ? void 0 : inputData.value) ? inputData.value.length >= selectionStart ? inputData.value.charAt(selectionStart).trim() : null : null;
    if (positionWithSpaceBefore && !oldNextChar) {
      selectionStart += 1;
    }
    const noChanges = (inputData == null ? void 0 : inputData.value) === value;
    return !noChanges ? {
      ...inputData,
      value,
      selectionStart,
      selectionEnd: selectionStart
    } : inputData;
  };
}
function formatValue(mask, value) {
  const parsedData = parseInputValue(mask, value);
  if (!parsedData)
    return `+${value}`;
  if (parsedData.lastNum) {
    return `+${parsedData.mask} ${parsedData.cityCode} ${parsedData.middleCode} ${parsedData.lastNum}`;
  } else if (parsedData.middleCode) {
    return `+${parsedData.mask} ${parsedData.cityCode} ${parsedData.middleCode}`;
  } else if (parsedData.cityCode) {
    return `+${parsedData.mask} ${parsedData.cityCode}`;
  } else {
    return `+${value}`;
  }
}
function parseInputValue(mask, value) {
  if (!mask)
    return null;
  const matchMask = value.length >= mask.length && value.substring(0, mask.length) === mask;
  if (!matchMask)
    return null;
  let start = mask.length;
  const cityCode = value.substring(start, start + 3);
  start += 3;
  const middleCode = value.substring(start, start + 3);
  start += 3;
  const lastNum = value.substring(start, start + 4);
  return { mask, cityCode, middleCode, lastNum };
}
const activeCountry = css`
  background-color: ${(p) => p.theme.color.background.secondary};
`;
const CountryBlockStyle = styled.li`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  user-select: none;
  color: ${(p) => p.disabled ? p.theme.color.text.tertiary : p.theme.color.text.primary};
  cursor: ${(p) => p.disabled ? "not-allowed" : "pointer"};
  padding: ${(p) => p.dimension === "xl" ? "12px 16px" : p.dimension === "m" ? "8px 16px" : "6px 12px"};
  ${(p) => p.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}

  &:hover {
    background: ${(p) => p.disabled ? "" : p.theme.color.background.secondary};
  }

  ${(p) => p.selected && !p.active && !p.disabled || p.active && !p.disabled ? activeCountry : ""}
`;
const StyledCountryName = styled.span`
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0 9px;
`;
const CountryCode = styled.span`
  flex: 0 0 auto;
  color: ${(p) => p.theme.color.text.secondary};
`;
const CountryBlock = React.forwardRef((props2, ref) => {
  const { dimension, value, code, SvgFlag, ...otherProps } = props2;
  return /* @__PURE__ */ React.createElement(CountryBlockStyle, {
    ref,
    ...otherProps,
    dimension
  }, SvgFlag && /* @__PURE__ */ React.createElement(Flag, {
    dimension,
    Component: SvgFlag
  }), /* @__PURE__ */ React.createElement(StyledCountryName, null, value), /* @__PURE__ */ React.createElement(CountryCode, null, code));
});
const StyledCountriesList = styled.ul`
  pointer-events: initial;
  padding: 8px 0;
  margin: 0;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: ${(p) => p.theme.color.background.primary};
  border-radius: 4px;
  ${(p) => p.theme.shadow.NonClickable}
  flex: 0 0 auto;
  max-height: ${(p) => p.dimension === "xl" ? "192px" : p.dimension === "m" ? "160px" : "128px"};
  ${(p) => p.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
`;
const CountriesList = ({
  countries,
  dimension,
  activeIndex,
  onItemClick,
  onActivateItem
}) => {
  let currentItem = null;
  const currentActive = useRef(-1);
  useEffect(() => {
    const disableSmooth = Math.abs(activeIndex - currentActive.current) > 5;
    currentActive.current = activeIndex;
    currentItem == null ? void 0 : currentItem.scrollIntoView({
      behavior: disableSmooth ? "auto" : "smooth",
      inline: "center",
      block: "nearest"
    });
  }, [activeIndex]);
  return /* @__PURE__ */ React__default.createElement(StyledCountriesList, {
    dimension
  }, countries.map((country, index) => {
    const countryBlockProps = {
      dimension,
      active: index === activeIndex,
      value: country.rusName,
      code: country.code,
      SvgFlag: country.SvgFlag,
      onClick: () => onItemClick(index),
      onMouseEnter: () => onActivateItem(index)
    };
    return /* @__PURE__ */ React__default.createElement(CountryBlock, {
      key: country.uid,
      ref: (ref) => {
        if (index === activeIndex)
          currentItem = ref;
      },
      ...countryBlockProps
    });
  }));
};
var FlagsIcons = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  Afghanistan: ReactComponent$m,
  AlandIslands: ReactComponent$n,
  Albania: ReactComponent$o,
  Algeria: ReactComponent$p,
  Andorra: ReactComponent$q,
  Angola: ReactComponent$r,
  Anguilla: ReactComponent$s,
  AntiguaAndBarbuda: ReactComponent$t,
  ArabEmirates: ReactComponent$u,
  Argentina: ReactComponent$v,
  Armenia: ReactComponent$w,
  Aruba: ReactComponent$x,
  Australia: ReactComponent$y,
  Austria: ReactComponent$z,
  Azerbaijan: ReactComponent$A,
  Bahamas: ReactComponent$B,
  Bahrain: ReactComponent$C,
  Bangladesh: ReactComponent$D,
  Barbados: ReactComponent$E,
  Belarus: ReactComponent$F,
  Belgium: ReactComponent$G,
  Belize: ReactComponent$H,
  Benin: ReactComponent$I,
  Bermuda: ReactComponent$J,
  Bhutan: ReactComponent$K,
  Bolivia: ReactComponent$L,
  BosniaAndHerzegovina: ReactComponent$M,
  Botswana: ReactComponent$N,
  Brazil: ReactComponent$O,
  BritishVirginIslands: ReactComponent$P,
  Brunei: ReactComponent$Q,
  Bulgaria: ReactComponent$R,
  BurkinaFaso: ReactComponent$S,
  Burundi: ReactComponent$T,
  CAF: ReactComponent$U,
  CAS: ReactComponent$V,
  CEU: ReactComponent$W,
  CNA: ReactComponent$X,
  COC: ReactComponent$Y,
  CSA: ReactComponent$Z,
  CaboVerde: ReactComponent$_,
  Cambodia: ReactComponent$$,
  Cameroon: ReactComponent$10,
  Canada: ReactComponent$11,
  CaymanIslands: ReactComponent$12,
  CentralAfricanRepublic: ReactComponent$13,
  Chad: ReactComponent$14,
  Chile: ReactComponent$15,
  China: ReactComponent$16,
  Colombia: ReactComponent$17,
  Comoros: ReactComponent$18,
  CongoDemocraticRepublic: ReactComponent$19,
  CongoRepublic: ReactComponent$1a,
  CostaRica: ReactComponent$1b,
  CoteDIvoire: ReactComponent$1c,
  Croatia: ReactComponent$1d,
  Cuba: ReactComponent$1e,
  Cyprus: ReactComponent$1f,
  Czechia: ReactComponent$1g,
  Denmark: ReactComponent$1h,
  Djibouti: ReactComponent$1i,
  Dominica: ReactComponent$1j,
  DominicanRepublic: ReactComponent$1k,
  Ecuador: ReactComponent$1l,
  Egypt: ReactComponent$1m,
  ElSalvador: ReactComponent$1n,
  EquatorialGuinea: ReactComponent$1o,
  Eritrea: ReactComponent$1p,
  Estonia: ReactComponent$1q,
  Ethiopia: ReactComponent$1r,
  EuropeanUnion: ReactComponent$1s,
  FalklandIslands: ReactComponent$1t,
  Fiji: ReactComponent$1u,
  Finland: ReactComponent$1v,
  France: ReactComponent$1w,
  Gabon: ReactComponent$1x,
  Gambia: ReactComponent$1y,
  Georgia: ReactComponent$1z,
  Germany: ReactComponent$1A,
  Ghana: ReactComponent$1B,
  Gibraltar: ReactComponent$1C,
  GreatBritain: ReactComponent$1D,
  Greece: ReactComponent$1E,
  Grenada: ReactComponent$1F,
  Guatemala: ReactComponent$1G,
  Guernsey: ReactComponent$1H,
  Guinea: ReactComponent$1I,
  GuineaBissau: ReactComponent$1J,
  Guyana: ReactComponent$1K,
  Haiti: ReactComponent$1L,
  Honduras: ReactComponent$1M,
  HongKong: ReactComponent$1N,
  Hungary: ReactComponent$1O,
  Iceland: ReactComponent$1P,
  India: ReactComponent$1Q,
  Indonesia: ReactComponent$1R,
  Iran: ReactComponent$1S,
  Iraq: ReactComponent$1T,
  Ireland: ReactComponent$1U,
  IsleOfMan: ReactComponent$1V,
  Israel: ReactComponent$1W,
  Italy: ReactComponent$1X,
  Jamaica: ReactComponent$1Y,
  Japan: ReactComponent$1Z,
  Jersey: ReactComponent$1_,
  Jordan: ReactComponent$1$,
  Kazakhstan: ReactComponent$20,
  Kenya: ReactComponent$21,
  KoreaNorth: ReactComponent$22,
  KoreaSouth: ReactComponent$23,
  Kuwait: ReactComponent$24,
  Kyrgyzstan: ReactComponent$25,
  Laos: ReactComponent$26,
  Latvia: ReactComponent$27,
  Lebanon: ReactComponent$28,
  Lesotho: ReactComponent$29,
  Liberia: ReactComponent$2a,
  Libya: ReactComponent$2b,
  Liechtenstein: ReactComponent$2c,
  Lithuania: ReactComponent$2d,
  Luxembourg: ReactComponent$2e,
  Macao: ReactComponent$2f,
  Macedonia: ReactComponent$2g,
  Madagascar: ReactComponent$2h,
  Malawi: ReactComponent$2i,
  Malaysia: ReactComponent$2j,
  Maldives: ReactComponent$2k,
  Mali: ReactComponent$2l,
  Malta: ReactComponent$2m,
  Mauritania: ReactComponent$2n,
  Mauritius: ReactComponent$2o,
  Mexico: ReactComponent$2p,
  Micronesia: ReactComponent$2q,
  Moldova: ReactComponent$2r,
  Monaco: ReactComponent$2s,
  Mongolia: ReactComponent$2t,
  Montenegro: ReactComponent$2u,
  Montserrat: ReactComponent$2v,
  Morocco: ReactComponent$2w,
  Mozambique: ReactComponent$2x,
  Myanmar: ReactComponent$2y,
  Namibia: ReactComponent$2z,
  Nepal: ReactComponent$2A,
  Netherlands: ReactComponent$2B,
  NetherlandsAntillesCountry: ReactComponent$2C,
  NewZealand: ReactComponent$2D,
  Nicaragua: ReactComponent$2E,
  Niger: ReactComponent$2F,
  Nigeria: ReactComponent$2G,
  Norway: ReactComponent$2H,
  Oman: ReactComponent$2I,
  Pakistan: ReactComponent$2J,
  Palau: ReactComponent$2K,
  Panama: ReactComponent$2L,
  PapuaNewGuinea: ReactComponent$2M,
  Paraguay: ReactComponent$2N,
  Peru: ReactComponent$2O,
  Philippines: ReactComponent$2P,
  Poland: ReactComponent$2Q,
  PolynesiaFrench: ReactComponent$2R,
  Portugal: ReactComponent$2S,
  PuertoRico: ReactComponent$2T,
  Qatar: ReactComponent$2U,
  Romania: ReactComponent$2V,
  Russia: ReactComponent$2W,
  Rwanda: ReactComponent$2X,
  SaintHelena: ReactComponent$2Y,
  SaintKittsAndNevis: ReactComponent$2Z,
  SaintLucia: ReactComponent$2_,
  SaintVincentAndTheGrenadines: ReactComponent$2$,
  Samoa: ReactComponent$30,
  SanMarino: ReactComponent$31,
  SaoTomeAndPrincipe: ReactComponent$32,
  SaudiArabia: ReactComponent$33,
  Senegal: ReactComponent$34,
  Serbia: ReactComponent$35,
  Seychelles: ReactComponent$36,
  SierraLeone: ReactComponent$37,
  Singapore: ReactComponent$38,
  Slovakia: ReactComponent$39,
  Slovenia: ReactComponent$3a,
  SolomonIslands: ReactComponent$3b,
  Somalia: ReactComponent$3c,
  SouthAfrica: ReactComponent$3d,
  Spain: ReactComponent$3e,
  SriLanka: ReactComponent$3f,
  Sudan: ReactComponent$3g,
  Suriname: ReactComponent$3h,
  Swaziland: ReactComponent$3i,
  Sweden: ReactComponent$3j,
  Switzerland: ReactComponent$3k,
  Syria: ReactComponent$3l,
  Taiwan: ReactComponent$3m,
  Tajikistan: ReactComponent$3n,
  Tanzania: ReactComponent$3o,
  Thailand: ReactComponent$3p,
  TimorLeste: ReactComponent$3q,
  Togo: ReactComponent$3r,
  Tonga: ReactComponent$3s,
  TrinidadAndTobago: ReactComponent$3t,
  Tunisia: ReactComponent$3u,
  Turkey: ReactComponent$3v,
  Turkmenistan: ReactComponent$3w,
  TurksAndCaicosIslands: ReactComponent$3x,
  Uganda: ReactComponent$3y,
  Ukraine: ReactComponent$3z,
  UnitedStatesOfAmerica: ReactComponent$3A,
  Uruguay: ReactComponent$3B,
  Uzbekistan: ReactComponent$3C,
  Vanuatu: ReactComponent$3D,
  Venezuela: ReactComponent$3E,
  Vietnam: ReactComponent$3F,
  WW: ReactComponent$3G,
  Yemen: ReactComponent$3H,
  Zambia: ReactComponent$3I,
  Zimbabwe: ReactComponent$3J
});
const iconsPack = metadata["flags"].map((iconMetaInfo) => {
  return {
    name: iconMetaInfo.name,
    SvgComponent: FlagsIcons[iconMetaInfo.name]
  };
});
const getIcon$1 = (name) => {
  const item = iconsPack.find((flag) => flag.name === name);
  return item ? item.SvgComponent : null;
};
function getFindCountryFunction(countries) {
  const lengths = countries.map((country) => country.code.replace(/\D/g, "").length);
  const maxLength = Math.max(...lengths);
  function findCountry(value) {
    let country;
    const length = maxLength > value.length ? value.length : maxLength;
    for (let i = 1; i <= length; i++) {
      const code = value.slice(0, i);
      const foundCountry = countries.find((country2) => {
        const clearCountryCode = country2.code.replace(/\D/g, "");
        return clearCountryCode === code;
      });
      if (foundCountry) {
        country = foundCountry;
      }
    }
    return country;
  }
  function getPriorityCountry(country) {
    switch (country.code) {
      case "+7":
        return countries.find((country2) => country2.iso3 === "RUS") || country;
      case "+1":
        return countries.find((country2) => country2.iso3 === "USA") || country;
      default:
        return country;
    }
  }
  return function(inputValue) {
    const value = inputValue.replace(/\D/g, "");
    if (!value)
      return null;
    const country = findCountry(value);
    return country ? getPriorityCountry(country) : null;
  };
}
const Chevron$1 = styled(ReactComponent$2)`
  transition: all 0.3s;
  flex-shrink: 0;
  margin-left: 5px;

  & path {
    fill: ${(p) => p.theme.color.text.secondary};
  }
`;
const disabledStyles = css`
  & svg {
    & *[fill^='#'] {
      stroke: ${(p) => p.theme.color.text.tertiary};
      fill: ${(p) => p.theme.color.text.tertiary};
    }
  }
`;
const PhoneContainer = styled.div`
  position: relative;

  & ${Chevron$1} {
    width: ${(p) => p.dimension === "s" ? "20px" : "24px"};
    height: ${(p) => p.dimension === "s" ? "20px" : "24px"};
  }

  & input {
    padding-left: ${(p) => p.dimension === "s" ? "64px" : "76px"};
  }
`;
const CountryContainer = styled.div`
  position: absolute;
  top: 50%;
  left: 16px;
  transform: translateY(-50%);
  display: flex;

  & ${Chevron$1} {
    & *[fill^='#'] {
      stroke: none;
    }

    transform: ${(p) => p.isOpened || p.disabled ? "rotate(90deg)" : "rotate(0deg)"};
  }

  ${(p) => p.disabled && disabledStyles};
`;
const PhoneNumberInput = React.forwardRef(({
  value = "",
  disabled = false,
  dimension = "xl",
  defaultCountry = "RUS",
  onlyCountries = COUNTRY_ISO3_CODES,
  handleInput,
  ...props2
}, ref) => {
  const [activeIndex, setActiveIndex] = React.useState(-1);
  const [selectedIndex, setSelectedIndex] = React.useState(-1);
  const inputContainerRef = React.useRef(null);
  const inputRef = React.useRef(null);
  const containerRef = React.useRef(null);
  const [isOpened, setIsOpened] = React.useState(false);
  const countryList = React.useMemo(() => {
    return onlyCountries.reduce((acc, iso3) => {
      const codes2 = CountryCodes[iso3];
      if (codes2) {
        codes2.forEach((code) => acc.push({ iso3, code }));
      }
      return acc;
    }, []).map((item) => {
      const { iso3, code } = item, name = CountryNames[iso3];
      return {
        ...item,
        rusName: CountryRusNames[iso3],
        SvgFlag: getIcon$1(name),
        uid: uid(),
        handleInput: handleInput ? handleInput : clojureHandler(code)
      };
    }).sort((a, b) => a.rusName.localeCompare(b.rusName, "ru"));
  }, [onlyCountries]);
  const findCountry = React.useMemo(() => getFindCountryFunction(countryList), [countryList]);
  const currentCountry = React.useMemo(() => findCountry(value), [value]);
  const currentCountryIndex = currentCountry ? countryList.findIndex((item) => item.iso3 === currentCountry.iso3 && item.code === currentCountry.code) : -1;
  const selectedCountryCode = selectedIndex > -1 ? countryList[selectedIndex].code : null;
  const sameCountryCode = (currentCountry == null ? void 0 : currentCountry.code) === selectedCountryCode;
  if (currentCountryIndex !== selectedIndex && !sameCountryCode)
    setSelectedIndex(currentCountryIndex);
  const handleInputRef = currentCountryIndex > -1 ? countryList[currentCountryIndex].handleInput : defaultPhoneNumberInputHandler;
  React.useEffect(() => {
    if (defaultCountry && selectedIndex === -1) {
      const index = countryList.findIndex((country) => country.iso3 === defaultCountry);
      if (index > -1) {
        selectCountry(index);
      }
    }
  }, [defaultCountry]);
  const handleButtonClick = () => {
    setIsOpened((prev) => !prev);
  };
  const selectCountry = (indexNumber) => {
    if (!inputRef.current || indexNumber === selectedIndex)
      return;
    const hasOldSelected = selectedIndex > -1;
    const oldCode = hasOldSelected ? countryList[selectedIndex].code.replace(/[^0-9+]/g, "") : "";
    const newCode = countryList[indexNumber].code.replace(/[^0-9+]/g, "");
    changeInputData(inputRef.current, {
      value: hasOldSelected ? value.replace(/\s+/g, "").replace(oldCode, newCode) : newCode + value.replace(/\s+/g, ""),
      selectionStart: 1,
      selectionEnd: newCode.length
    });
    setSelectedIndex(indexNumber);
    setIsOpened(false);
  };
  const handleKeyUp = (e) => {
    switch (e.key) {
      case "Enter":
        if (isOpened && activeIndex > -1) {
          selectCountry(activeIndex);
          e.preventDefault();
        }
        break;
      case "ArrowUp":
        if (!isOpened) {
          setIsOpened(true);
          break;
        }
        if (activeIndex <= 0) {
          setActiveIndex(countryList.length - 1);
        } else {
          setActiveIndex(activeIndex - 1);
        }
        break;
      case "ArrowDown":
        if (!isOpened) {
          setIsOpened(true);
          break;
        }
        if (activeIndex >= countryList.length - 1) {
          setActiveIndex(0);
        } else {
          setActiveIndex(activeIndex + 1);
        }
        break;
      case "Escape": {
        if (isOpened) {
          setIsOpened(false);
        }
        break;
      }
    }
  };
  const handleKeyDown = (e) => {
    if (isOpened && ["Enter", "ArrowUp", "ArrowDown"].includes(e.key)) {
      e.preventDefault();
    }
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = containerRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setIsOpened(false);
  };
  const IconComponent = React.useMemo(() => {
    if (selectedIndex > -1) {
      const SvgComponent = countryList[selectedIndex].SvgFlag;
      return SvgComponent ? /* @__PURE__ */ React.createElement(Flag, {
        dimension,
        Component: SvgComponent
      }) : null;
    }
    return null;
  }, [selectedIndex]);
  React.useEffect(() => {
    setActiveIndex(isOpened ? selectedIndex : -1);
  }, [isOpened]);
  React.useEffect(() => {
    if (isOpened) {
      setActiveIndex(selectedIndex);
    }
  }, [selectedIndex]);
  return /* @__PURE__ */ React.createElement(PhoneContainer, {
    ref: containerRef,
    dimension,
    disabled
  }, /* @__PURE__ */ React.createElement(TextInput, {
    ...props2,
    type: "tel",
    ref: refSetter(ref, inputRef),
    handleInput: handleInputRef,
    containerRef: inputContainerRef,
    value,
    disabled,
    dimension,
    onKeyUp: (...p) => {
      var _a;
      (_a = props2.onKeyUp) == null ? void 0 : _a.call(props2, ...p);
      handleKeyUp(...p);
    },
    onKeyDown: (...p) => {
      var _a;
      (_a = props2.onKeyDown) == null ? void 0 : _a.call(props2, ...p);
      handleKeyDown(...p);
    }
  }, isOpened && !disabled && /* @__PURE__ */ React.createElement(Dropdown$3, {
    targetRef: inputRef,
    onClickOutside: clickOutside
  }, /* @__PURE__ */ React.createElement(CountriesList, {
    countries: countryList,
    activeIndex,
    dimension,
    onItemClick: selectCountry,
    onActivateItem: (index) => setActiveIndex(index)
  }))), /* @__PURE__ */ React.createElement(CountryContainer, {
    dimension,
    isOpened,
    disabled
  }, IconComponent, /* @__PURE__ */ React.createElement(Chevron$1, {
    onClick: handleButtonClick
  })));
});
PhoneNumberInput.displayName = "PhoneNumberInput";
const InputField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    inputRef,
    displayCharacterCounter,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = {
    ref: refSetter(ref, inputRef),
    id,
    "aria-required": required,
    status,
    disabled,
    maxLength,
    ...restProps
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(TextInput, {
    ...inputProps
  }));
});
InputField.displayName = "InputField";
const width$1 = css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};

  fieldset[data-dimension='s'] & {
    width: 16px;
  }
`;
const height = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};

  fieldset[data-dimension='s'] & {
    height: 16px;
  }
`;
const PositionedCheckbox = styled(Checkbox)`
  position: absolute;
  top: 2px;
  left: 2px;
`;
const Label$2 = styled.label`
  display: inline-block;
  position: relative;
  padding-top: 2px;
  padding-bottom: 2px;

  padding-left: ${(props2) => props2.dimension === "s" ? 28 : 32}px;

  ${(props2) => props2.dimension === "s" ? typography$1["Body/Body 2 Short"] : typography$1["Body/Body 1 Short"]}
  fieldset[data-dimension='s'] & {
    padding-left: 28px;
    ${typography$1["Body/Body 2 Short"]}
  }

  color: ${(props2) => props2.disabled ? props2.theme.color.text.tertiary : props2.theme.color.text.primary};
  cursor: ${(props2) => props2.disabled ? "default" : "pointer"};

  fieldset:disabled & {
    color: ${(props2) => props2.theme.color.text.tertiary};
    cursor: default;
  }
`;
const ExtrasContainer = styled.div`
  padding-top: 4px;

  ${(props2) => props2.dimension === "s" ? typography$1["Caption/Caption 1"] : typography$1["Body/Body 2 Short"]}
  fieldset[data-dimension='s'] & {
    ${typography$1["Caption/Caption 1"]}
  }

  color: ${(props2) => props2.theme.color.text.secondary};

  [disabled] & {
    color: ${(props2) => props2.theme.color.text.tertiary};
  }
`;
const CheckboxField = React.forwardRef(({ extraText, className, children, dimension = "m", ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(Label$2, {
    className,
    dimension,
    disabled: props2.disabled,
    "data-field-id": props2.id,
    "data-field-name": props2.name
  }, /* @__PURE__ */ React.createElement(PositionedCheckbox, {
    dimension,
    ref,
    ...props2
  }), children, extraText && /* @__PURE__ */ React.createElement(ExtrasContainer, {
    dimension,
    children: extraText
  }));
});
CheckboxField.displayName = "CheckboxField";
const DateField = React.forwardRef((props2, ref) => {
  const {
    className,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    name,
    disabled,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    "data-field-id": id,
    "data-field-name": name,
    displayInline,
    disabled
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = { ref, id, name, "aria-required": required, status, disabled, ...restProps };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(DateInput, {
    ...inputProps
  }));
});
DateField.displayName = "DateField";
const SELECT_DIMENSIONS = ["xl", "m", "s"];
const heights$1 = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "xl":
      return "56px";
    case "m":
      return "40px";
    case "s":
      return "32px";
    default:
      return "56px";
  }
}};
`;
const styleText$1 = css`
  font-size: ${({ dimension }) => dimension === "s" ? 14 : 16}px;
  line-height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  font-family: ${TYPOGRAPHY.fontFamily};
`;
const SelectComponent$1 = styled.div`
  position: relative;
  padding: 0 ${({ dimension }) => dimension === "s" ? 12 : 16}px;
  color: ${({ theme, disabled }) => disabled ? theme.color.text.tertiary : theme.color.text.primary};
  display: flex;
  user-select: none;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  border: 0;
  align-items: center;
  justify-content: space-between;
  ${styleText$1};
  box-sizing: border-box;
  border-radius: 4px;
  height: 100%;

  [data-status='error'] & {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }

  [data-read-only] & {
    user-select: none;
    background-color: ${(props2) => props2.theme.color.background.tertiary};
    border-color: ${(props2) => props2.theme.color.background.tertiary};
  }
`;
const Placeholder$1 = styled.div`
  color: ${({ theme, focused, disabled }) => {
  if (focused)
    return theme.color.basic.disable;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.text.secondary;
}};
  pointer-events: none;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  ${styleText$1}
`;
const StyledDropDown$3 = styled(Dropdown$3)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  ${(p) => p.alignDropdown ? `align-self: ${p.alignDropdown}` : ""};
  max-height: ${(p) => p.dropMaxHeight};
  min-width: 100%;
  ${(p) => p.cssMixin || ""}
`;
const IconPanel$1 = styled.div`
  flex: 0 0 auto;

  display: flex;
  align-items: center;

  margin-left: 10px;

  & > * {
    display: block;
    width: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
    height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  }

  & > *:not(:first-child) {
    margin-left: 8px;
  }
`;
const SelectWrapper$2 = styled.div`
  box-sizing: border-box;

  cursor: pointer;

  &&[disabled],
  &&[data-read-only] {
    cursor: default;
  }

  background: ${({ theme, disabled }) => disabled ? theme.color.background.tertiary : theme.color.background.primary};
  position: relative;
  border-radius: 4px;
  ${heights$1};

  border-color: ${({ theme, disabled, focused }) => {
  if (disabled)
    return "transparent";
  if (focused)
    return theme.color.basic.press;
  return theme.color.basic.tertiary;
}};

  [data-focus-within] &,
  &:focus {
    border-color: ${(p) => p.theme.color.basic.press};
  }

  border-width: 1px;
  border-style: solid;

  &:hover {
    border-color: ${({ theme, disabled }) => disabled ? "transparent" : theme.color.basic.hover};
  }

  &:focus {
    outline: none;
  }

  &:active {
    outline: none;
  }

  &[data-status='error'] {
    border-color: ${(p) => p.theme.color.status.danger};
  }

  &[data-status='success'] {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
`;
const WrapperChild = styled.div`
  flex: 1 1 auto;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;
const Select$2 = React.forwardRef(({
  portalTargetRef,
  children,
  renderInputValue = (value2) => value2,
  className,
  disabled,
  dimension = "m",
  value,
  onChange,
  onOpen,
  onClose,
  alignDropdown,
  dropMaxHeight = "300px",
  icons,
  status,
  displayStatusIcon,
  readOnly,
  dropContainerCssMixin,
  ...props2
}, ref) => {
  const [open, setOpen] = React.useState(false);
  const [hovered, setHovered] = React.useState("");
  const refWrapper = React.useRef(null);
  const childrenArray = React.Children.toArray(children);
  const findOptionValue = (option) => {
    if (React.isValidElement(option[0]) && "props" in option[0]) {
      return option[0].props.value;
    }
  };
  const hoverIndex = React.useMemo(() => childrenArray == null ? void 0 : childrenArray.findIndex((child) => {
    if (React.isValidElement(child) && "props" in child) {
      return child.props.value === +hovered;
    }
    return -1;
  }), [childrenArray, hovered]);
  const findNextHoverValue = React.useCallback(() => {
    const nextAbledOptionValue = findOptionValue(childrenArray.slice(hoverIndex + 1));
    if (nextAbledOptionValue)
      return nextAbledOptionValue;
    return findOptionValue(childrenArray);
  }, [hoverIndex, childrenArray]);
  const findPrevHoverValue = React.useCallback(() => {
    const sliceInd = hoverIndex === -1 ? void 0 : hoverIndex;
    const prevAbledOptionValue = findOptionValue(childrenArray.slice(0, sliceInd).reverse());
    if (prevAbledOptionValue)
      return prevAbledOptionValue;
    return findOptionValue(childrenArray.slice().reverse());
  }, [hoverIndex, childrenArray]);
  const handleKeyDownItem = (e) => {
    const code = keyboardKey.getCode(e);
    e.preventDefault();
    switch (code) {
      case keyboardKey[" "]:
      case keyboardKey.Enter: {
        setOpen(false);
        onClose == null ? void 0 : onClose();
        onChange && onChange(hovered);
        setHovered(hovered);
        refWrapper.current.focus();
        break;
      }
      case keyboardKey.ArrowUp: {
        const prevValue = findPrevHoverValue();
        if (!prevValue)
          break;
        setHovered(prevValue);
        break;
      }
      case keyboardKey.ArrowDown: {
        const nextValue = findNextHoverValue();
        if (!nextValue)
          break;
        setHovered(nextValue);
        break;
      }
      case keyboardKey.Tab:
      case keyboardKey.Escape: {
        onClose == null ? void 0 : onClose();
        setOpen(false);
        refWrapper.current.focus();
        break;
      }
    }
  };
  const handleClickItem = (e, disabled2) => {
    var _a, _b;
    const value2 = (_a = e == null ? void 0 : e.currentTarget.getAttribute("value")) != null ? _a : "";
    !disabled2 && onChange && onChange(value2);
    (_b = refWrapper.current) == null ? void 0 : _b.focus();
  };
  const renderChildrenDropDown = () => {
    return React.Children.map(children, (child) => {
      var _a, _b, _c;
      if (!React.isValidElement(child)) {
        return null;
      }
      const detectedSubGroup = (_b = (_a = child.props.children) == null ? void 0 : _a.some) == null ? void 0 : _b.call(_a, (element) => Array.isArray(element));
      if (detectedSubGroup) {
        return child.props.children.flat().map((child2) => {
          var _a2, _b2;
          return React.cloneElement(child2, {
            disabled: disabled || ((_a2 = child2 == null ? void 0 : child2.props) == null ? void 0 : _a2.disabled),
            onClick: (e) => handleClickItem(e, child2.props.disabled),
            onKeyDown: handleKeyDownItem,
            dimension: dimension === "xl" ? "l" : dimension,
            selected: (value == null ? void 0 : value.toString()) === ((_b2 = child2.props.value) == null ? void 0 : _b2.toString()),
            hovered: hovered === child2.props.value,
            ...child2.props
          });
        });
      }
      return React.cloneElement(child, {
        disabled: disabled || child.props.disabled,
        onClick: (e) => handleClickItem(e, child.props.disabled),
        onKeyDown: handleKeyDownItem,
        dimension: dimension === "xl" ? "l" : dimension,
        selected: (value == null ? void 0 : value.toString()) === ((_c = child.props.value) == null ? void 0 : _c.toString()),
        hovered: hovered === child.props.value,
        ...child.props
      });
    });
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = refWrapper.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setOpen(false);
    open && (onClose == null ? void 0 : onClose());
  };
  const handleKeyDown = (e) => {
    var _a;
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey[" "] && !disabled && !open) {
      setOpen(true);
      e.preventDefault();
      !open ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
    }
    (_a = props2.onKeyDown) == null ? void 0 : _a.call(props2, e);
  };
  const onClick = (e) => {
    var _a;
    if (!disabled) {
      setOpen((open2) => !open2);
      !open ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
    }
    (_a = props2.onClick) == null ? void 0 : _a.call(props2, e);
  };
  const renderSelectValue = () => props2.placeholder && !value ? /* @__PURE__ */ React.createElement(Placeholder$1, {
    disabled,
    focused: open,
    dimension
  }, props2.placeholder) : /* @__PURE__ */ React.createElement(WrapperChild, null, renderInputValue(value));
  const iconArray = React.Children.toArray(icons);
  if (displayStatusIcon) {
    iconArray.push(/* @__PURE__ */ React.createElement(StatusIcon, {
      key: "status-icon",
      status,
      "aria-hidden": true
    }));
  }
  if (!readOnly) {
    iconArray.push(/* @__PURE__ */ React.createElement(OpenStatusButton, {
      key: "open-status-icon",
      $isOpen: open,
      "data-disabled": disabled ? true : void 0,
      "aria-hidden": true
    }));
  }
  return /* @__PURE__ */ React.createElement(SelectWrapper$2, {
    ref: refSetter(ref, refWrapper),
    className,
    disabled,
    "data-disabled": disabled ? true : void 0,
    dimension,
    role: readOnly ? void 0 : "button",
    ...props2,
    onKeyDown: handleKeyDown,
    tabIndex: disabled ? void 0 : 0,
    onClick: readOnly ? () => null : onClick,
    "data-status": status,
    "data-read-only": readOnly ? true : void 0,
    "aria-readonly": readOnly ? true : void 0,
    focused: open
  }, /* @__PURE__ */ React.createElement(SelectComponent$1, {
    dimension,
    disabled
  }, renderSelectValue(), /* @__PURE__ */ React.createElement(IconPanel$1, {
    disabled,
    dimension
  }, iconArray)), open && /* @__PURE__ */ React.createElement(StyledDropDown$3, {
    targetRef: portalTargetRef || refWrapper,
    "data-dimension": dimension === "xl" ? "l" : dimension,
    onClickOutside: clickOutside,
    alignDropdown,
    dropMaxHeight,
    cssMixin: dropContainerCssMixin
  }, renderChildrenDropDown()));
});
Select$2.displayName = "Select";
const Select$1 = styled(Select$2)`
  [data-status='error'] & {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }
`;
const SelectField = React.forwardRef((props2, ref) => {
  const fieldRef = React.useRef(null);
  const { className, displayInline, status, required, extraText, label, id = uid(), disabled, ...restProps } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    ref: fieldRef
  };
  const selectProps = {
    ref,
    id,
    "aria-required": required,
    status,
    disabled,
    ...restProps,
    portalTargetRef: fieldRef
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(Select$1, {
    ...selectProps
  }));
});
SelectField.displayName = "SelectField";
const ALL_FIELDSET_DIMENSIONS_VALUES = ["m", "s"];
const Legend = styled.legend`
  ${(props2) => props2.dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  color: ${(props2) => props2.theme.color.text.primary};
  fieldset:disabled & {
    color: ${(props2) => props2.theme.color.text.tertiary};
    cursor: default;
  }

  [aria-required] &:before {
    content: '* ';
    color: ${(props2) => props2.theme.color.status.danger};
  }
`;
const FieldSetExtrasContainer = styled.div`
  flex: 1 1 100%;
  display: flex;
  margin: 0;
`;
const FieldSetContainer = styled.fieldset`
  border: none;
  padding: 0;

  display: flex;
  flex-wrap: wrap;
  flex-direction: ${({ flexDirection }) => flexDirection || "column"};

  && > *:not(${FieldSetExtrasContainer}) {
    margin-top: ${(props2) => props2.dimension === "s" ? 12 : 16}px;
    margin-right: 16px;
  }

  ${Legend} {
    margin-top: 0;
  }
`;
const FieldSet = (props2) => {
  const { legend, children, extraText, ...fieldsetProps } = props2;
  return /* @__PURE__ */ React.createElement(FieldSetContainer, {
    ...fieldsetProps,
    "data-dimension": fieldsetProps.dimension,
    "aria-required": props2.required,
    "data-status": props2.status,
    "data-required-within": props2.required ? "" : void 0,
    "data-disabled": props2.disabled ? "" : void 0
  }, legend && /* @__PURE__ */ React.createElement(Legend, {
    dimension: props2.dimension,
    children: legend
  }), children, extraText && /* @__PURE__ */ React.createElement(FieldSetExtrasContainer, null, /* @__PURE__ */ React.createElement(ExtraTextContainer, null, extraText)));
};
FieldSet.displayName = "FieldSet";
const SuggestField = React.forwardRef((props2, ref) => {
  const fieldRef = React.useRef(null);
  const {
    className,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    displayCharacterCounter,
    ref: fieldRef,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const suggestProps = {
    ref,
    id,
    "aria-required": required,
    status,
    disabled,
    ...restProps,
    portalTargetRef: fieldRef
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(SuggestInput, {
    ...suggestProps
  }));
});
SuggestField.displayName = "SuggestField";
const TextField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    inputRef,
    displayCharacterCounter,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = {
    ref: refSetter(ref, inputRef),
    id,
    "aria-required": required,
    status,
    disabled,
    maxLength,
    ...restProps
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(TextArea, {
    ...inputProps
  }));
});
TextField.displayName = "TextField";
const heights = css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "xl":
      return "54px";
    case "m":
      return "38px";
    case "s":
      return "30px";
    default:
      return "54px";
  }
}};
`;
const styleText = css`
  font-family: ${TYPOGRAPHY.fontFamily};
`;
const SelectComponent = styled.div`
  white-space: nowrap;
  position: relative;
  color: ${({ theme, disabled }) => disabled ? theme.color.text.tertiary : theme.color.text.primary};
  display: flex;
  user-select: none;
  flex-flow: nowrap;
  border: 0;
  pointer-events: none;
  align-items: center;
  padding: 0 ${({ dimension }) => dimension === "s" ? 12 : 16}px;
  justify-content: space-between;
  ${styleText};
  box-sizing: border-box;
  border-radius: 4px;
  height: inherit;
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};
`;
const Placeholder = styled.div`
  color: ${({ theme, focused, disabled }) => {
  if (focused)
    return theme.color.basic.disable;
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.text.secondary;
}};
  pointer-events: none;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;
const StyledDropDown$2 = styled(Dropdown$3)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  min-width: 100%;
  max-height: ${(p) => p.dropMaxHeight};

  // checkbox svgs should stay white colored.
  &:not(input[type='checkbox']) & *[fill^='#'] {
    fill: ${({ theme, disabled }) => {
  if (disabled)
    return theme.color.text.tertiary;
  return theme.color.basic.tertiary;
}};
  }
  ${(p) => p.cssMixin || ""};
`;
const IconPanel = styled.div`
  flex: 0 0 auto;

  display: flex;
  align-items: center;

  margin-left: 10px;

  & > * {
    display: block;
    width: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
    height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  }

  & > *:not(:first-child) {
    margin-left: 8px;
  }
`;
const SelectWrapper$1 = styled.div`
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};
  background: ${({ theme, disabled }) => disabled ? theme.color.background.tertiary : theme.color.background.primary};
  position: relative;
  border-radius: 4px;
  ${heights};
  border-color: ${({ theme, disabled, focused }) => {
  if (focused)
    return theme.color.basic.press;
  if (disabled)
    return "transparent";
  return theme.color.basic.tertiary;
}};
  border-width: 1px;
  border-style: solid;

  [data-focus-within] &,
  &:focus {
    border-color: ${(p) => p.theme.color.basic.press};
  }

  &:hover {
    border-color: ${({ theme, disabled }) => disabled ? "transparent" : theme.color.basic.hover};
  }

  &:focus {
    outline: none;
  }

  &:active {
    outline: none;
  }
  [data-status='success'] & {
    border-color: ${(props2) => props2.theme.color.status.success};
  }
  [data-status='error'] & {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }
`;
const WrapperChip = styled.div`
  align-items: center;
  box-sizing: border-box;
  display: flex;
  flex: 1;
  flex-wrap: wrap;
  overflow: hidden;
  position: relative;
  height: 32px;
  padding-right: 46px;
  pointer-events: none;
`;
const CounterChip = styled((props2) => /* @__PURE__ */ React.createElement(Chips, {
  ...props2
}))`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  flex: 0 0 auto;
  margin: ${(props2) => props2.dimension === "s" ? `4px 8px 4px 0` : `2px 8px 4px 0`};
  margin-right: ${(props2) => props2.dimension === "s" ? -34 : -45}px;
`;
const ChipItemWrapper = styled.div`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  flex: 0 0 auto;
  margin-right: 4px;
`;
const MultiSelect = React.forwardRef(({
  children,
  renderInputValue,
  className,
  disabled = false,
  dimension = "m",
  value,
  onChange,
  dropDownRef,
  onOpen,
  onClose,
  alignDropdown,
  dropMaxHeight = "300px",
  dropContainerCssMixin,
  ...props2
}, ref) => {
  const [open, setOpen] = useState(false);
  const [focused, setFocused] = useState(false);
  const [hovered, setHovered] = React.useState("");
  const refWrapper = useRef(null);
  const detectedDuplicate = (targetValue, array) => {
    return array.indexOf(targetValue) === array.lastIndexOf(targetValue) ? array : array.filter((item) => item !== targetValue);
  };
  const handleKeyDownItem = (e) => {
    var _a;
    const code = keyboardKey.getCode(e);
    const targetValue = (_a = (e == null ? void 0 : e.currentTarget).getAttribute("value")) != null ? _a : "";
    e.preventDefault();
    switch (code) {
      case keyboardKey[" "]:
      case keyboardKey.Enter: {
        targetValue && onChange && onChange(detectedDuplicate(hovered, [...value, hovered]));
        setHovered("");
        break;
      }
      case keyboardKey.Escape:
      case keyboardKey.Tab: {
        onClose == null ? void 0 : onClose();
        setOpen(false);
        refWrapper.current.focus();
        break;
      }
      case keyboardKey.ArrowUp: {
        setHovered(targetValue);
        break;
      }
      case keyboardKey.ArrowDown: {
        setHovered(targetValue);
        break;
      }
    }
  };
  const handleClickItem = (e, disabled2) => {
    var _a, _b, _c;
    const targetValue = (_c = (_b = (_a = e == null ? void 0 : e.currentTarget).getAttribute) == null ? void 0 : _b.call(_a, "value")) != null ? _c : "";
    targetValue && !disabled2 && onChange && onChange(detectedDuplicate(targetValue, [...value, targetValue]));
  };
  let detectedSubGroup = false;
  const renderChildrenDropDown = () => {
    return Children.map(children, (child) => {
      var _a, _b, _c, _d, _e;
      if (!isValidElement(child)) {
        return null;
      }
      detectedSubGroup = (_b = (_a = child.props.children) == null ? void 0 : _a.some) == null ? void 0 : _b.call(_a, (element) => Array.isArray(element));
      if (detectedSubGroup) {
        return child.props.children.flat().map((child2) => {
          var _a2, _b2, _c2, _d2;
          return cloneElement(child2, {
            disabled: disabled || ((_a2 = child2 == null ? void 0 : child2.props) == null ? void 0 : _a2.disabled),
            onMouseDown: (e) => handleClickItem(e, child2.props.disabled),
            onKeyDown: handleKeyDownItem,
            hovered: hovered === child2.props.value,
            dimension: dimension === "xl" ? "l" : dimension,
            selected: value.length === 0 ? false : value.includes((_d2 = (_c2 = (_b2 = child2 == null ? void 0 : child2.props) == null ? void 0 : _b2.value) == null ? void 0 : _c2.toString) == null ? void 0 : _d2.call(_c2)),
            ...child2.props
          });
        });
      }
      return cloneElement(child, {
        disabled: disabled || child.props.disabled,
        onMouseDown: (e) => handleClickItem(e, child.props.disabled),
        onKeyDown: handleKeyDownItem,
        hovered: hovered === child.props.value,
        dimension: dimension === "xl" ? "l" : dimension,
        selected: value.length === 0 ? false : value.includes((_e = (_d = (_c = child == null ? void 0 : child.props) == null ? void 0 : _c.value) == null ? void 0 : _d.toString) == null ? void 0 : _e.call(_d)),
        ...child.props
      });
    });
  };
  const outsideClick = () => {
    setOpen(false);
    setFocused(false);
    open && (onClose == null ? void 0 : onClose());
  };
  useEffect(() => {
    const listener = (event) => {
      var _a;
      if ((_a = refWrapper == null ? void 0 : refWrapper.current) == null ? void 0 : _a.contains(event.target)) {
        return;
      }
      outsideClick();
    };
    document.addEventListener("mousedown", listener);
    document.addEventListener("touchstart", listener);
    return () => {
      document.removeEventListener("mousedown", listener);
      document.removeEventListener("touchstart", listener);
    };
  }, [refWrapper == null ? void 0 : refWrapper.current, outsideClick]);
  const handleKeyDown = (e) => {
    var _a;
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey[" "] && !disabled && e.target === e.currentTarget) {
      setOpen(!open);
      setFocused(true);
      e.preventDefault();
      !open ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
    } else if (code === keyboardKey.Escape) {
      setOpen(false);
    } else if (code === keyboardKey.Tab) {
      if (!open) {
        setFocused(false);
      }
    }
    (_a = props2.onKeyDown) == null ? void 0 : _a.call(props2, e);
  };
  const onClick = (e) => {
    var _a;
    if (e.currentTarget === e.target) {
      e.preventDefault();
      e.stopPropagation();
      if (!disabled) {
        !open ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
        setOpen(!open);
        setFocused(true);
      }
      (_a = props2.onClick) == null ? void 0 : _a.call(props2, e);
    }
  };
  const defaultRender = () => {
    const setCounterChip = (index) => " + " + index;
    const iconClick = (id) => {
      onChange(value.filter((d, index) => index !== id));
    };
    return /* @__PURE__ */ React.createElement(WrapperChip, null, value.map((d, index) => /* @__PURE__ */ React.createElement(Fragment, {
      key: index
    }, /* @__PURE__ */ React.createElement(CounterChip, {
      tabIndex: -1,
      disabled,
      dimension: "s",
      appearance: "filled"
    }, setCounterChip(value.length - index)), /* @__PURE__ */ React.createElement(ChipItemWrapper, {
      dimension
    }, /* @__PURE__ */ React.createElement(Chips, {
      tabIndex: -1,
      disabled,
      dimension: "s",
      appearance: "filled",
      onClose: iconClick.bind(null, index)
    }, d)))));
  };
  const renderSelectValue = () => {
    var _a;
    return props2.placeholder && value.length === 0 ? /* @__PURE__ */ React.createElement(Placeholder, {
      disabled,
      focused: open,
      dimension
    }, props2.placeholder) : (_a = renderInputValue == null ? void 0 : renderInputValue()) != null ? _a : defaultRender();
  };
  return /* @__PURE__ */ React.createElement(SelectWrapper$1, {
    ref: refSetter(ref, refWrapper),
    className,
    disabled,
    dimension,
    focused,
    ...props2,
    onKeyDown: handleKeyDown,
    onClick,
    tabIndex: disabled ? -1 : 0
  }, /* @__PURE__ */ React.createElement(SelectComponent, {
    focused,
    dimension,
    disabled
  }, renderSelectValue(), /* @__PURE__ */ React.createElement(IconPanel, {
    disabled,
    dimension
  }, /* @__PURE__ */ React.createElement(OpenStatusButton, {
    key: "open-status-icon",
    $isOpen: open,
    "data-disabled": disabled ? true : void 0,
    "aria-hidden": true
  }))), open && /* @__PURE__ */ React.createElement(StyledDropDown$2, {
    targetRef: dropDownRef || refWrapper,
    "data-dimension": dimension === "xl" ? "l" : dimension,
    alignSelf: alignDropdown,
    cssMixin: dropContainerCssMixin,
    dropMaxHeight,
    disabled,
    role: "listbox"
  }, renderChildrenDropDown()));
});
MultiSelect.displayName = "MultiSelect";
const MultiSelectField = React.forwardRef((props2, ref) => {
  const { className, displayInline, status, required, extraText, label, id = uid(), disabled, ...restProps } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled
  };
  const selectProps = { ref, id, disabled, ...restProps };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(MultiSelect, {
    ...selectProps
  }));
});
MultiSelectField.displayName = "MultiSelectField";
const SliderInputField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    inputRef,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = {
    ref: refSetter(ref, inputRef),
    id,
    "aria-required": required,
    status,
    disabled,
    maxLength,
    ...restProps
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(SliderInput, {
    ...inputProps
  }));
});
SliderInputField.displayName = "SliderInputField";
const SliderRangeField = (props2) => {
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const componentProps = {
    id,
    disabled,
    ...restProps
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(SliderRange, {
    ...componentProps
  }));
};
SliderRangeField.displayName = "SliderRangeField";
const TimeField = React.forwardRef((props2, ref) => {
  const fieldRef = React.useRef(null);
  const {
    className,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    displayCharacterCounter,
    ref: fieldRef,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const TimeProps = {
    ref,
    id,
    "aria-required": required,
    status,
    disabled,
    ...restProps,
    portalTargetRef: fieldRef
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(TimeInput, {
    ...TimeProps
  }));
});
TimeField.displayName = "TimeField";
const NumberInputField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    inputRef,
    displayCharacterCounter,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = {
    ref: refSetter(ref, inputRef),
    id,
    "aria-required": required,
    status,
    disabled,
    maxLength,
    ...restProps
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(NumberInput, {
    ...inputProps
  }));
});
NumberInputField.displayName = "NumberInputField";
const Select = styled(SearchSelect)`
  [data-status='error'] & {
    border-color: ${(props2) => props2.theme.color.status.danger};
  }
`;
const SearchSelectField = React.forwardRef((props2, ref) => {
  const fieldRef = React.useRef(null);
  const { className, displayInline, status, required, extraText, label, id = uid(), disabled, ...restProps } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    ref: fieldRef,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const selectProps = {
    ref,
    id,
    "aria-required": required,
    status,
    disabled,
    ...restProps,
    portalTargetRef: fieldRef
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(Select, {
    ...selectProps
  }));
});
SearchSelectField.displayName = "SearchSelectField";
const EditModeField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    maxLength,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    maxLength,
    inputRef,
    displayCharacterCounter,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  const inputProps = {
    ref: refSetter(ref, inputRef),
    id,
    "aria-required": required,
    status,
    disabled,
    maxLength,
    ...restProps
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(EditMode, {
    ...inputProps
  }));
});
EditModeField.displayName = "EditModeField";
const PhoneInputField = React.forwardRef((props2, ref) => {
  const inputRef = React.useRef(null);
  const {
    className,
    displayInline,
    status,
    required,
    extraText,
    label,
    id = uid(),
    disabled,
    displayCharacterCounter,
    ...restProps
  } = props2;
  const fieldContainerProps = {
    className,
    extraText,
    status,
    required,
    label,
    id,
    displayInline,
    disabled,
    displayCharacterCounter,
    ref: inputRef,
    "data-field-id": id,
    "data-field-name": restProps.name
  };
  Object.keys(restProps).forEach((key) => {
    if (key.startsWith("data-field")) {
      fieldContainerProps[key] = restProps[key];
    }
  });
  const inputProps = {
    ref,
    id,
    "aria-required": required,
    status,
    disabled,
    ...restProps,
    portalTargetRef: inputRef
  };
  return /* @__PURE__ */ React.createElement(Field, {
    ...fieldContainerProps
  }, /* @__PURE__ */ React.createElement(PhoneNumberInput, {
    ...inputProps
  }));
});
PhoneInputField.displayName = "NumberInputField";
css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};
`;
css`
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "s":
      return "16px";
    default:
      return "20px";
  }
}};
`;
const styleTextMixin$1 = css`
  font-size: ${({ dimension }) => dimension === "m" ? 16 : 14}px;
  line-height: ${({ dimension }) => dimension === "m" ? 20 : 16}px;
  font-weight: normal;
  font-family: ${TYPOGRAPHY.fontFamily};
  color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.basic.secondary};
  user-select: none;
`;
css`
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: ${({ theme }) => `2px solid ${theme.color.basic.hover}`};
    width: ${({ dimension }) => dimension === "m" ? 22 : 18}px;
    height: ${({ dimension }) => dimension === "m" ? 22 : 18}px;
    border-radius: 4px;
  }
`;
css`
  background: ${({ theme, checked }) => checked ? theme.color.basic.hover : theme.color.background.secondary};
`;
css`
  border: ${({ theme, disabled }) => `1px solid ${disabled ? theme.color.basic.disable : theme.color.basic.hover}`};
`;
css`
  background: ${({ theme }) => theme.color.basic.hover};
`;
css`
  background-color: ${({ checked, theme }) => checked ? theme.color.basic.primary : theme.color.background.primary};
`;
css`
  border: ${({ theme, disabled }) => `1px solid ${disabled ? theme.color.basic.disable : theme.color.basic.tertiary}`};
`;
css`
  background: ${({ theme }) => theme.color.basic.disable};
`;
const CheckboxGroupWrapper = styled.div`
  display: flex;
  flex-direction: column;
  display: inline-flex;
  box-sizing: border-box;
  ${styleTextMixin$1};

  & > div {
    margin-top: ${({ dimension }) => dimension === "m" ? 16 : 12}px;
  }
`;
const CheckboxGroup = ({
  children,
  label,
  disabled = false,
  dimension = "m",
  ...props2
}) => {
  const renderGroup = () => {
    return Children.map(children, (child) => {
      if (!isValidElement(child)) {
        return null;
      }
      return cloneElement(child, {
        disabled: disabled || child.props.disabled,
        dimension,
        ...child.props
      });
    });
  };
  return /* @__PURE__ */ React__default.createElement(CheckboxGroupWrapper, {
    disabled,
    dimension,
    ...props2
  }, label && label, renderGroup());
};
CheckboxGroup.displayName = "CheckboxGroup";
const CompositeWrapper = styled.div`
  ${({ dimension }) => css`
    position: relative;
    width: fit-content;
    display: flex;
    flex-flow: column;
    & > ${CheckboxGroupWrapper} {
      padding-left: ${dimension === "m" ? 30 : 25}px;
    }
    ${styleTextMixin$1}
  `}
`;
const CheckboxCompositeGroup = ({
  children,
  disabled = false,
  dimension = "m",
  ...props2
}) => {
  const renderCheckboxGroup = () => {
    return Children.map(children, (child) => {
      if (!isValidElement(child)) {
        return null;
      }
      return cloneElement(child, {
        disabled: disabled || child.props.disabled,
        dimension,
        ...child.props
      });
    });
  };
  return /* @__PURE__ */ React__default.createElement(CompositeWrapper, {
    dimension,
    disabled,
    ...props2
  }, renderCheckboxGroup());
};
CheckboxCompositeGroup.displayName = "CheckboxCompositeGroup";
const menuListHeights = css`
  max-height: ${({ dimension }) => {
  switch (dimension) {
    case "l":
      return `${48 * 6}px`;
    case "m":
      return `${40 * 6}px`;
    case "s":
      return `${32 * 6}px`;
    default:
      return `${48 * 6}px`;
  }
}};
`;
const UnstyledUL = styled.ul`
  padding: unset;
  margin: unset;
`;
const StyledDropdown$2 = styled(Dropdown$3)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  ${menuListHeights};
  cursor: pointer;
  outline: none;
  margin: 8px 0;
`;
const DropDownMenu = React.forwardRef(({ children, targetRef, dimension = "l", alignSelf, onClickOutside, ...props2 }, ref) => {
  const [hovered, setHovered] = React.useState("");
  const handleKeyUp = (e) => {
    const code = keyboardKey.getCode(e);
    const activeOption = e.target.id;
    switch (code) {
      case keyboardKey[" "]: {
        e.preventDefault();
        break;
      }
      case keyboardKey.ArrowUp: {
        setHovered(activeOption);
        e.preventDefault();
        break;
      }
      case keyboardKey.ArrowDown: {
        setHovered(activeOption);
        e.preventDefault();
        break;
      }
    }
  };
  const renderChildrenDropDown = () => {
    return React.Children.map(children, (child) => {
      var _a, _b;
      if (!React.isValidElement(child)) {
        return null;
      }
      const detectedSubGroup = (_b = (_a = child.props.children) == null ? void 0 : _a.some) == null ? void 0 : _b.call(_a, (element) => Array.isArray(element));
      if (detectedSubGroup) {
        return child.props.children.flat().map((child2) => {
          return React.cloneElement(child2, {
            hovered: hovered === child2.props.id,
            onKeyUp: handleKeyUp,
            ...child2.props
          });
        });
      }
      return React.cloneElement(child, {
        hovered: hovered === child.props.id,
        onKeyUp: handleKeyUp,
        ...child.props
      });
    });
  };
  return /* @__PURE__ */ React.createElement(StyledDropdown$2, {
    ref,
    dimension,
    targetRef,
    alignSelf,
    onClickOutside,
    ...props2
  }, /* @__PURE__ */ React.createElement(UnstyledUL, null, renderChildrenDropDown()));
});
DropDownMenu.displayName = "DropDownMenu";
const styleTextMixin = css`
  ${({ dimension }) => dimension === "s" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  ul[data-dimension='s'] & {
    ${typography$1["Body/Body 2 Long"]}
  }
  text-overflow: ellipsis;
`;
const colorTextMixin = css`
  color: ${({ theme, disabled }) => disabled ? theme.color.text.tertiary : theme.color.text.primary};
`;
const backgroundColor = css`
  background: ${({ theme, selected }) => selected ? theme.color.background.tertiary : theme.color.background.primary};
  ${({ id, theme }) => id && `ul[data-selectedid="${id}"] && {background: ${theme.color.background.tertiary};}`}}
`;
const paddings = css`
  padding: ${({ dimension }) => {
  switch (dimension) {
    case "l":
      return "12px 16px";
    case "m":
      return "8px 16px";
    case "s":
      return "6px 12px";
    default:
      return "12px 16px";
  }
}};
  ul[data-dimension='m'] && {
    padding: 8px 16px;
  }
  ul[data-dimension='s'] && {
    padding: 6px 12px;
  }
`;
const hoverStyle = css`
  background-color: ${(p) => p.theme.color.background.secondary};
  cursor: pointer;
`;
const Item$2 = styled.li`
  display: flex;
  align-items: center;
  user-select: none;
  flex-flow: wrap;
  position: relative;
  justify-content: space-between;
  outline: none;
  white-space: pre;
  margin: 0;
  ${paddings}
  ${styleTextMixin}
  ${colorTextMixin}
  ${backgroundColor}
  ${(p) => p.hovered && hoverStyle};

  &:hover {
    ${hoverStyle}
  }

  &&[data-disabled='true'] {
    cursor: not-allowed;
    background-color: ${(p) => p.theme.color.background.primary};
    color: ${(p) => p.theme.color.text.tertiary};
    && *[fill^='#'] {
      fill: ${(p) => p.theme.color.text.tertiary};
    }
  }
`;
const DropDownItem$1 = React.forwardRef(({ children, disabled, hovered, dimension = "l", selected = false, id, ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(Item$2, {
    ref,
    dimension,
    tabIndex: !disabled ? props2.tabIndex || 0 : void 0,
    selected,
    hovered,
    id,
    "data-disabled": disabled,
    ...props2
  }, children);
});
DropDownItem$1.displayName = "DropDownItem";
const circleBackground = css`
  background: ${({ background: background2, theme }) => {
  switch (background2) {
    case "green":
      return theme.color.status.success;
    case "blue":
      return theme.color.basic.primary;
    case "red":
      return theme.color.status.danger;
    case "orange":
      return theme.color.status.warn;
    default:
      return background2;
  }
}};
`;
const wrapperBackground = css`
  background: ${({ background: background2, theme }) => {
  switch (background2) {
    case "green":
      return theme.color.special.softGreen;
    case "blue":
      return theme.color.special.softLightBlue;
    case "red":
      return theme.color.special.softRed;
    case "orange":
      return theme.color.special.softYellow;
    case "neutral":
      return theme.color.background.tertiary;
    default:
      return background2 || theme.color.background.tertiary;
  }
}};
`;
const wrapperBorder = css`
  border: 1px solid
    ${({ border, theme }) => {
  switch (border) {
    case "green":
      return theme.color.special.green;
    case "blue":
      return theme.color.special.blue;
    case "red":
      return theme.color.special.red;
    case "orange":
      return theme.color.special.yellow;
    case "neutral":
      return theme.color.basic.tertiary;
    default:
      return border || theme.color.basic.tertiary;
  }
}};
`;
const Wrapper$b = styled.button`
  position: relative;
  box-sizing: border-box;
  height: 24px;
  ${({ width: width2 }) => width2 && `width: ${typeof width2 === "number" ? `${width2}px` : width2};`}
  margin-top: 8px;
  padding: 3px 7px;
  border-radius: 4px;
  ${({ statusViaBackground, theme }) => statusViaBackground ? wrapperBackground : `background: ${theme.color.background.tertiary};`}
  ${({ statusViaBackground, theme }) => statusViaBackground ? wrapperBorder : `border: 1px solid ${theme.color.background.tertiary};`}

  display: inline-flex;
  align-items: center;
  cursor: ${({ clickable }) => clickable ? "pointer" : "default"};

  ${({ clickable }) => !clickable && "pointer-events: none;"}
  &:hover,
  &:active {
    ${({ statusViaBackground, theme }) => statusViaBackground ? "" : `background: ${theme.color.background.tertiaryHover};`}
  }

  &:focus {
    outline: none;

    &:before {
      content: '';
      position: absolute;
      top: -4px;
      bottom: -4px;
      left: -4px;
      right: -4px;
      border-radius: 6px;
      border: 2px solid ${({ theme }) => theme.color.basic.hover};
    }
  }
`;
const Text$2 = styled.span`
  color: ${({ theme }) => theme.color.text.primary};
  user-select: none;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  ${typography$1["Caption/Caption 1"]}
`;
const Circle$1 = styled.div`
  display: flex;
  flex-shrink: 0;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  margin-right: 6px;
  ${circleBackground}
`;
const Icon$2 = styled.div`
  display: flex;
  flex-shrink: 0;
  width: 16px;
  height: 16px;
  margin-right: 4px;

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }
`;
const Tag = ({
  children,
  kind = "neutral",
  width: width2,
  statusViaBackground = false,
  icon,
  onClick,
  ...props2
}) => {
  const textRef = React.useRef(null);
  const [overflow, setOverflow] = React.useState(false);
  const background2 = typeof kind === "object" ? kind.background ? kind.background : "neutral" : kind;
  const border = typeof kind === "object" ? !!kind.background && !!kind.border ? kind.border : "neutral" : kind;
  const detectOverflow = (element) => element.offsetWidth < element.scrollWidth;
  React.useLayoutEffect(() => {
    const element = textRef.current;
    if (element && detectOverflow(element) !== overflow) {
      setOverflow(detectOverflow(element));
    }
  }, [children, width2]);
  const renderTag = () => /* @__PURE__ */ React.createElement(Wrapper$b, {
    width: width2,
    onClick,
    clickable: !!onClick,
    statusViaBackground,
    border,
    background: background2,
    ...props2
  }, background2 !== "neutral" && !statusViaBackground && /* @__PURE__ */ React.createElement(Circle$1, {
    background: background2
  }), statusViaBackground && icon && /* @__PURE__ */ React.createElement(Icon$2, null, icon), children && /* @__PURE__ */ React.createElement(Text$2, {
    ref: textRef
  }, children));
  return overflow ? /* @__PURE__ */ React.createElement(Tooltip, {
    renderContent: () => children
  }, renderTag()) : renderTag();
};
Tag.displayName = "Tag";
const TAG_MARGIN = "8px";
const TagsWrapper = styled.div`
  display: flex;
  flex-flow: wrap;
  & > * {
    margin-right: ${TAG_MARGIN};
  }

  & > *:last-child {
    margin-right: 0;
  }
`;
const Tags = ({ children, width: width2, kind, onClick }) => {
  return /* @__PURE__ */ React__default.createElement(TagsWrapper, null, Children.map(children, (child) => {
    if (!isValidElement(child)) {
      return null;
    }
    return cloneElement(child, {
      onClick: child.props.onClick || onClick,
      width: child.props.width || width2,
      kind: child.props.kind || kind,
      ...child.props
    });
  }));
};
Tags.displayName = "Tags";
const TOGGLE_WIDTH_M = "36px";
const TOGGLE_WIDTH_S = "28px";
const TOGGLE_HEIGHT_M = "20px";
const TOGGLE_HEIGHT_S = "16px";
const SLIDER_SIZE_M = "16px";
const SLIDER_SIZE_S = "12px";
const sizes$1 = css`
  width: ${({ dimension }) => dimension === "s" ? TOGGLE_WIDTH_S : TOGGLE_WIDTH_M};
  height: ${({ dimension }) => dimension === "s" ? TOGGLE_HEIGHT_S : TOGGLE_HEIGHT_M};
`;
const sliderSizes = css`
  width: ${({ dimension }) => dimension === "s" ? SLIDER_SIZE_S : SLIDER_SIZE_M};
  height: ${({ dimension }) => dimension === "s" ? SLIDER_SIZE_S : SLIDER_SIZE_M};
  border-radius: ${({ dimension }) => dimension === "s" ? SLIDER_SIZE_S : SLIDER_SIZE_M};
`;
const LABEL_MARGIN = "8px";
const BORDER_RADIUS = "10px";
const SLIDER_INDENT = "2px";
const Input$1 = styled.input`
  position: absolute;
  width: 0;
  height: 0;
  opacity: 0;

  &:checked + span {
    &:before {
      ${({ dimension }) => `left: calc(100% - ${SLIDER_INDENT} - ${dimension === "m" ? SLIDER_SIZE_M : SLIDER_SIZE_S});`}
    }

    background: ${({ theme }) => theme.color.basic.primary};
  }

  &:disabled + span {
    background: ${({ theme }) => theme.color.text.tertiary};
  }

  &:checked:not(:disabled) {
    &:hover + span,
    &:focus + span {
      background: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:not(:checked):not(:disabled) {
    &:hover + span,
    &:focus + span {
      background: ${({ theme }) => theme.color.text.secondary};
    }
  }
`;
const Label$1 = styled.div`
  display: flex;
  flex-direction: column;
  ${({ position }) => position === "right" ? `margin-left: ${LABEL_MARGIN};` : `margin-right: ${LABEL_MARGIN};`}
  ${({ dimension }) => dimension === "s" ? typography$1["Body/Body 2 Short"] : typography$1["Body/Body 1 Short"]}
  color: ${({ disabled, theme }) => disabled ? theme.color.text.tertiary : theme.color.text.primary};
`;
const Hint = styled.div`
  margin-top: 4px;
  ${({ dimension }) => dimension === "s" ? typography$1["Caption/Caption 1"] : typography$1["Body/Body 2 Short"]}
  color: ${({ theme, disabled }) => disabled ? theme.color.text.tertiary : theme.color.text.secondary};
`;
const Slider = styled.span`
  position: relative;
  ${sizes$1}
  border-radius: ${BORDER_RADIUS};
  flex-shrink: 0;

  &:before {
    content: '';
    position: absolute;
    top: ${SLIDER_INDENT};
    left: ${SLIDER_INDENT};
    ${sliderSizes}
    background: ${({ theme }) => theme.color.background.primary};
    transition: all 0.3s;
  }

  background: ${({ theme }) => theme.color.basic.tertiary};
`;
const Wrapper$a = styled.label`
  display: flex;
  flex-direction: ${({ labelPosition }) => labelPosition === "right" ? "row" : "row-reverse"};
  align-items: flex-start;
  justify-content: space-between;
  position: relative;
  width: ${({ width: width2 }) => width2 ? typeof width2 === "number" ? `${width2}px` : width2 : "fit-content"};
  cursor: ${({ disabled }) => disabled ? "default" : "pointer"};
  -webkit-tap-highlight-color: transparent;
  user-select: none;
`;
const Toggle = React.forwardRef(({ dimension = "m", labelPosition = "right", disabled = false, width: width2, extraText, className, children, ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(Wrapper$a, {
    className,
    width: labelPosition === "left" ? width2 : void 0,
    labelPosition,
    disabled,
    role: "switch",
    "aria-checked": props2.checked || props2["aria-checked"]
  }, /* @__PURE__ */ React.createElement(Input$1, {
    ref,
    type: "checkbox",
    dimension,
    disabled,
    ...props2
  }), /* @__PURE__ */ React.createElement(Slider, {
    dimension,
    disabled,
    "aria-hidden": true
  }), children && /* @__PURE__ */ React.createElement(Label$1, {
    dimension,
    disabled,
    position: labelPosition
  }, children, extraText && /* @__PURE__ */ React.createElement(Hint, {
    dimension,
    disabled
  }, extraText)));
});
Toggle.displayName = "Toggle";
const backGroundColorMixin$1 = css`
  background: ${({ theme, appearance }) => appearance === "secondary" || appearance === "ghost" ? theme.color.background.tertiary : appearance === "white" ? theme.color.basic.tertiary : theme.color.background.secondary};
`;
const PseudoText = styled.div`
  border-radius: 4px;
  width: ${({ dimension }) => dimension === "s" ? 65 : 74}px;
  height: ${({ dimension }) => dimension === "s" ? 8 : 12}px;
  ${backGroundColorMixin$1}
`;
const PseudoIcon$1 = styled.div`
  border-radius: 50%;
  width: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  ${backGroundColorMixin$1}
`;
const SkeletonText = styled(PseudoText)`
  margin-right: 8px;
`;
const OpenButton = styled(OpenStatusButton)`
  &:not([data-disabled]):hover *[fill^='#'] {
    fill: ${(props2) => {
  return props2.appearance === "primary" ? props2.theme.color.text.staticWhite : props2.theme.color.basic.hover;
}};
  }
`;
const MenuButton$3 = React.forwardRef(({
  children,
  dimension = "l",
  appearance = "primary",
  disabled = false,
  loading = false,
  skeleton = false,
  alignSelf = "flex-end",
  onClose,
  onOpen,
  options,
  selected,
  onChange,
  ...props2
}, ref) => {
  const [menuOpened, setMenuOpened] = React.useState(false);
  const btnRef = React.useRef(null);
  const [hovered, setHovered] = React.useState("");
  const menuDimension = dimension === "xl" ? "l" : dimension;
  const menuWidth = dimension === "s" ? "240px" : "280px";
  const findOptionValue = (options2) => {
    var _a;
    return (_a = options2.find(({ disabled: disabled2 }) => !disabled2)) == null ? void 0 : _a.id;
  };
  const hoverIndex = React.useMemo(() => options.findIndex((option) => option.id === hovered), [options, hovered]);
  const findNextHoverValue = React.useCallback(() => {
    const nextAbledOptionValue = findOptionValue(options.slice(hoverIndex + 1));
    if (nextAbledOptionValue)
      return nextAbledOptionValue;
    return findOptionValue(options);
  }, [hoverIndex, options]);
  const findPrevHoverValue = React.useCallback(() => {
    const sliceInd = hoverIndex === -1 ? void 0 : hoverIndex;
    const prevAbledOptionValue = findOptionValue(options.slice(0, sliceInd).reverse());
    if (prevAbledOptionValue)
      return prevAbledOptionValue;
    return findOptionValue(options.slice().reverse());
  }, [hoverIndex, options]);
  const reverseMenu = () => {
    setMenuOpened((prevOpened) => {
      prevOpened ? onClose == null ? void 0 : onClose() : onOpen == null ? void 0 : onOpen();
      return !prevOpened;
    });
  };
  const closeMenu = () => {
    var _a;
    setMenuOpened(false);
    onClose == null ? void 0 : onClose();
    (_a = btnRef.current) == null ? void 0 : _a.focus();
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = btnRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setMenuOpened(false);
  };
  const handleBtnKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.ArrowDown || code === keyboardKey.Enter || code === keyboardKey[" "]) {
      setMenuOpened(true);
      onOpen == null ? void 0 : onOpen();
      e.preventDefault();
    }
  };
  const renderContent = () => {
    if (skeleton)
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(SkeletonText, {
        dimension,
        appearance
      }), /* @__PURE__ */ React.createElement(PseudoIcon$1, {
        dimension,
        appearance
      }));
    return /* @__PURE__ */ React.createElement(React.Fragment, null, React.Children.toArray(children).map((child) => typeof child === "string" ? /* @__PURE__ */ React.createElement("span", {
      key: uid()
    }, child) : child), /* @__PURE__ */ React.createElement(OpenButton, {
      $isOpen: menuOpened,
      appearance,
      "aria-hidden": true
    }));
  };
  const handleClick = (e) => {
    onChange(e.currentTarget.id);
    closeMenu();
  };
  const handleKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    switch (code) {
      case keyboardKey[" "]:
      case keyboardKey.Enter: {
        onChange(hovered);
        closeMenu();
        e.preventDefault();
        break;
      }
      case keyboardKey.ArrowUp: {
        const prevValue = findPrevHoverValue();
        if (!prevValue)
          break;
        setHovered(prevValue);
        break;
      }
      case keyboardKey.ArrowDown: {
        const nextValue = findNextHoverValue();
        if (!nextValue)
          break;
        setHovered(nextValue);
        break;
      }
    }
  };
  const handleMenuKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.Escape || code === keyboardKey.Tab) {
      closeMenu();
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button$7, {
    ...props2,
    ref: refSetter(ref, btnRef),
    dimension,
    appearance,
    loading,
    disabled: loading || skeleton ? true : disabled,
    onKeyDown: handleBtnKeyDown,
    onClick: reverseMenu,
    "aria-expanded": menuOpened
  }, renderContent()), menuOpened && !loading && !skeleton && /* @__PURE__ */ React.createElement(Dropdown$3, {
    role: "listbox",
    targetRef: btnRef,
    onClickOutside: clickOutside,
    style: { width: menuWidth },
    alignSelf,
    onKeyDown: handleMenuKeyDown
  }, options.map(({ display, disabled: optionDisabled, id, ...props22 }) => /* @__PURE__ */ React.createElement(DropDownItem$1, {
    ...props22,
    key: id,
    id,
    dimension: menuDimension,
    hovered: hovered === id,
    disabled: disabled || optionDisabled,
    selected: selected === id,
    "aria-selected": selected === id,
    role: "option",
    onClick: disabled || optionDisabled ? (e) => {
      e.stopPropagation();
      e.preventDefault();
    } : handleClick,
    onKeyDown: handleKeyDown
  }, display))));
});
MenuButton$3.displayName = "MenuButton";
const ICON_SIZE = {
  l: 24,
  m: 20,
  s: 16
};
const focusStyle$1 = css`
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }

  &:before {
    content: '';
    position: absolute;
    top: -4px;
    left: -4px;
    bottom: -4px;
    right: -4px;
    border: 2px solid ${({ theme }) => theme.color.basic.hover};
    border-radius: 4px;
  }
`;
const ButtonComponent$2 = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  position: relative;
  cursor: pointer;
  border: 0;
  outline: none;
  padding: 0;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  overflow: visible;

  & svg {
    flex-shrink: 0;
  }

  &:hover:not(:disabled) *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }

  ${({ menuOpened }) => menuOpened && focusStyle$1}
  &:focus {
    ${focusStyle$1}
  }

  &:active *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.press};
  }

  &:disabled {
    cursor: default;

    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const ButtonContent$2 = styled.span`
  position: relative;
  display: inline-flex;
  align-items: center;
  height: 100%;

  & > svg {
    transform: rotate(${(p) => p.$isVertical ? 90 : 0}deg);
    height: ${({ dimension }) => ICON_SIZE[dimension]}px;
    width: ${({ dimension }) => ICON_SIZE[dimension]}px;

    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.secondary};
    }
  }
`;
const Button$6 = React.forwardRef(({ dimension = "l", menuOpened, type = "button", isVertical = false, ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(ButtonComponent$2, {
    ref,
    dimension,
    menuOpened,
    type,
    ...props2
  }, /* @__PURE__ */ React.createElement(ButtonContent$2, {
    dimension,
    $isVertical: isVertical
  }, /* @__PURE__ */ React.createElement(ReactComponent$3K, {
    "aria-hidden": true
  })));
});
const StyledDropdown$1 = styled(Dropdown$3)`
  padding: 8px 0;
`;
const OverflowMenu$1 = React.forwardRef(({
  children,
  dimension = "l",
  disabled = false,
  alignSelf = "flex-end",
  isVertical = false,
  onClose,
  onOpen,
  selected,
  onChange,
  onClick,
  onKeyDown,
  ...props2
}, ref) => {
  const [menuOpened, setMenuOpened] = React.useState(false);
  const [hovered, setHovered] = React.useState("");
  const btnRef = React.useRef(null);
  const childrenArray = React.Children.toArray(children);
  const findOptionValue = (option) => {
    if (React.isValidElement(option[0]) && "props" in option[0]) {
      return option[0].props.id;
    }
  };
  const hoverIndex = React.useMemo(() => childrenArray == null ? void 0 : childrenArray.findIndex((child) => {
    if (React.isValidElement(child) && "props" in child) {
      return child.props.id === hovered;
    }
    return -1;
  }), [childrenArray, hovered]);
  const findNextHoverValue = React.useCallback(() => {
    const nextAbledOptionValue = findOptionValue(childrenArray.slice(hoverIndex + 1));
    if (nextAbledOptionValue)
      return nextAbledOptionValue;
    return findOptionValue(childrenArray);
  }, [hoverIndex, childrenArray]);
  const findPrevHoverValue = React.useCallback(() => {
    const sliceInd = hoverIndex === -1 ? void 0 : hoverIndex;
    const prevAbledOptionValue = findOptionValue(childrenArray.slice(0, sliceInd).reverse());
    if (prevAbledOptionValue)
      return prevAbledOptionValue;
    return findOptionValue(childrenArray.slice().reverse());
  }, [hoverIndex, childrenArray]);
  const reverseMenu = (e) => {
    setMenuOpened((prevOpened) => {
      prevOpened ? onClose == null ? void 0 : onClose() : onOpen == null ? void 0 : onOpen();
      return !prevOpened;
    });
    onClick == null ? void 0 : onClick(e);
  };
  const closeMenu = () => {
    var _a;
    setMenuOpened(false);
    onClose == null ? void 0 : onClose();
    (_a = btnRef.current) == null ? void 0 : _a.focus();
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = btnRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setMenuOpened(false);
    onClose == null ? void 0 : onClose();
  };
  const handleBtnKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    onKeyDown == null ? void 0 : onKeyDown(e);
    if (code === keyboardKey.ArrowDown || code === keyboardKey.Enter || code === keyboardKey[" "]) {
      setMenuOpened(true);
      onOpen == null ? void 0 : onOpen();
      e.preventDefault();
    }
  };
  const handleMenuKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.Escape || code === keyboardKey.Tab) {
      closeMenu();
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button$6, {
    ...props2,
    ref: refSetter(ref, btnRef),
    dimension,
    disabled,
    menuOpened,
    isVertical,
    onKeyDown: handleBtnKeyDown,
    onClick: reverseMenu,
    "aria-expanded": menuOpened,
    "aria-haspopup": menuOpened
  }), menuOpened && /* @__PURE__ */ React.createElement(StyledDropdown$1, {
    role: "listbox",
    targetRef: btnRef,
    alignSelf,
    onClickOutside: clickOutside,
    onKeyDown: handleMenuKeyDown
  }, React.Children.map(children, (child) => {
    if (!React.isValidElement(child)) {
      return null;
    }
    const { onClick: onClick2, onKeyDown: onKeyDown2, disabled: disabled2, id, ...props22 } = child.props;
    const handleClick = (e) => {
      if (!disabled2) {
        onChange == null ? void 0 : onChange(e.currentTarget.id);
        closeMenu();
        onClick2 == null ? void 0 : onClick2(e);
      }
    };
    const handleKeyDown = (e) => {
      const code = keyboardKey.getCode(e);
      onKeyDown2 == null ? void 0 : onKeyDown2(e);
      switch (code) {
        case keyboardKey[" "]:
        case keyboardKey.Enter: {
          if (!disabled2) {
            onChange == null ? void 0 : onChange(hovered != null ? hovered : "");
            closeMenu();
            e.preventDefault();
          }
          break;
        }
        case keyboardKey.ArrowUp: {
          const prevValue = findPrevHoverValue();
          if (!prevValue)
            break;
          setHovered(prevValue);
          break;
        }
        case keyboardKey.ArrowDown: {
          const nextValue = findNextHoverValue();
          if (!nextValue)
            break;
          setHovered(nextValue);
          break;
        }
      }
    };
    return React.cloneElement(child, {
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      "aria-selected": selected === id,
      selected: selected === id,
      hovered: hovered === id,
      ...props22
    });
  })));
});
OverflowMenu$1.displayName = "OverflowMenu";
const Wrapper$9 = styled.div`
  background: ${({ theme }) => theme.color.background.tertiary};
  border-radius: 2px;
  min-width: 140px;
  min-height: 4px;
  display: flex;
`;
const Progress$2 = styled.div`
  background: ${({ theme, appearance }) => appearance === "error" ? theme.color.status.danger : theme.color.basic.primary};
  width: ${({ percent }) => percent}%;
  border-radius: 2px;
  transition: all 0.3s linear;
`;
const Label = styled.div`
  display: flex;
  padding-bottom: 8px;
  font-size: 12px;
  display: flex;
  justify-content: space-between;
  width: 100%;
  line-height: 16px;
  font-style: normal;
  font-weight: normal;
  font-family: ${TYPOGRAPHY.fontFamily};
  color: ${({ theme, appearance }) => appearance === "error" ? theme.color.status.danger : theme.color.text.primary};
`;
const Container$2 = styled.div``;
const ProgressPage = ({
  percent = 0,
  children,
  label,
  appearance = "primary",
  ...props2
}) => {
  return /* @__PURE__ */ React__default.createElement(Container$2, {
    ...props2
  }, /* @__PURE__ */ React__default.createElement(Label, {
    appearance
  }, label), /* @__PURE__ */ React__default.createElement(Wrapper$9, {
    appearance
  }, /* @__PURE__ */ React__default.createElement(Progress$2, {
    appearance,
    percent
  })));
};
ProgressPage.displayName = "ProgressPage";
const Container$1 = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
`;
const Wrapper$8 = styled.div`
  background: ${({ theme }) => theme.color.background.tertiary};
  min-width: 140px;
  min-height: 4px;
  display: flex;
`;
const Progress$1 = styled.div`
  background: ${({ theme, appearance }) => appearance === "error" ? theme.color.status.danger : theme.color.basic.primary};
  width: ${({ percent }) => percent}%;
  transition: all 0.3s linear;
`;
const ProgressHeader = ({ percent = 0, appearance = "primary", ...props2 }) => {
  return /* @__PURE__ */ React__default.createElement(Container$1, {
    ...props2
  }, /* @__PURE__ */ React__default.createElement(Wrapper$8, {
    appearance
  }, /* @__PURE__ */ React__default.createElement(Progress$1, {
    appearance,
    percent
  })));
};
ProgressHeader.displayName = "ProgressHeader";
const getPlural = (words) => (number) => {
  let value = Math.abs(number);
  value %= 100;
  if (value >= 5 && value <= 20) {
    return words[2];
  }
  value %= 10;
  if (value === 1) {
    return words[0];
  }
  if (value >= 2 && value <= 4) {
    return words[1];
  }
  return words[2];
};
const fitLimit = (min, max, num) => num >= min && num < max;
const setFirstLetterToLowerCase = (str = "") => str.slice(0, 1).toLowerCase() + str.slice(1);
const setFirstLetterToUpperCase = (str = "") => str.slice(0, 1).toUpperCase() + str.slice(1);
const convertNumberToIntegerPercent = (num, max = 100) => Math.round(100 * num / max);
const Wrapper$7 = styled.div`
  display: flex;
  flex-direction: column;
  min-width: 388px;
`;
const ProgressWrapper = styled.div`
  display: flex;
  overflow: hidden;
  height: 4px;
  border-radius: 2px;
  background-color: ${({ theme }) => theme.color.background.tertiary};
`;
const Progress = styled.div`
  width: ${({ percent }) => percent}%;
  background-color: ${({ theme }) => theme.color.basic.primary};
`;
const Header$1 = styled.div`
  display: flex;
  flex-direction: ${({ mobile }) => mobile ? "column" : "row"};
  ${({ mobile }) => !mobile && "  justify-content: space-between;"}
  margin-bottom: 8px;
`;
const ActiveStep = styled.div`
  ${typography$1["Body/Body 2 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
`;
const ProgressText = styled.div`
  white-space: nowrap;
  flex-shrink: 0;
  ${typography$1["Caption/Caption 1"]}
  color: ${({ theme }) => theme.color.text.secondary};
`;
const NextStep = styled.div`
  width: 100%;
  align-text: left;
  margin-top: 8px;
  ${typography$1["Caption/Caption 1"]}
  color: ${({ theme }) => theme.color.text.secondary};
`;
const ProgressStepper = ({
  steps,
  activeStep: activeStepProp = -1,
  stepName = ["\u0448\u0430\u0433", "\u0448\u0430\u0433\u0430", "\u0448\u0430\u0433\u043E\u0432"],
  renderNextStepName,
  displayNextStepName = true,
  mobile = false,
  ...props2
}) => {
  const stepsAmount = steps.length;
  const activeStep = fitLimit(0, stepsAmount, activeStepProp) ? activeStepProp : -1;
  const activeStepNumber = activeStep + 1;
  const nextStep = activeStep + 1;
  const nextStepContent = (renderNextStepName == null ? void 0 : renderNextStepName(steps[nextStep])) || "\u0414\u0430\u043B\u0435\u0435 - " + setFirstLetterToLowerCase(steps[nextStep]);
  const fixedStepName = getPlural(stepName)(1);
  const fixedStepNamePlural = getPlural(stepName)(5);
  return /* @__PURE__ */ React__default.createElement(Wrapper$7, {
    ...props2
  }, /* @__PURE__ */ React__default.createElement(Header$1, {
    mobile,
    "aria-hidden": true
  }, /* @__PURE__ */ React__default.createElement(ActiveStep, null, setFirstLetterToUpperCase(steps[activeStep])), /* @__PURE__ */ React__default.createElement(ProgressText, null, activeStepNumber, " \u0438\u0437 ", stepsAmount, " ", fixedStepNamePlural == null ? void 0 : fixedStepNamePlural.toLowerCase())), /* @__PURE__ */ React__default.createElement(ProgressWrapper, null, /* @__PURE__ */ React__default.createElement(Progress, {
    tabIndex: 0,
    role: "progressbar",
    "aria-valuemin": 0,
    "aria-valuemax": stepsAmount,
    "aria-valuenow": activeStepNumber,
    "aria-valuetext": `${fixedStepName} ${activeStepNumber}: ${steps[activeStep]}`,
    percent: convertNumberToIntegerPercent(activeStepNumber, stepsAmount)
  })), displayNextStepName && steps[nextStep] && /* @__PURE__ */ React__default.createElement(NextStep, {
    "aria-hidden": true
  }, nextStepContent));
};
ProgressStepper.displayName = "ProgressStepper";
const hexToRgba = (hex, opacity) => {
  const hexValue = hex.replace("#", "");
  const hexValueDivided = hexValue.match(new RegExp(`(.{${hexValue.length / 3}})`, "g"));
  const rgbaValue = [];
  if (!hexValueDivided) {
    throw new Error("Incorrect color srting");
  }
  for (let i = 0; i < hexValueDivided.length; i++) {
    rgbaValue[i] = parseInt(hexValueDivided[i].length == 1 ? hexValueDivided[i] + hexValueDivided[i] : hexValueDivided[i], 16);
  }
  if (opacity !== void 0) {
    rgbaValue.push(opacity);
  }
  return `rgba(${rgbaValue.join(",")})`;
};
const getScrollbarSize$1 = () => {
  let scrollBarWidth = 0;
  const scrollbox = document.createElement("div");
  scrollbox.innerHTML = `Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem 
  nonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. 
  Ut wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit 
  lobortis nisl ut aliquip ex ea commodo consequat.`;
  scrollbox.style.overflow = "scroll";
  scrollbox.style.fontSize = "14px";
  scrollbox.style.height = "50px";
  scrollbox.style.maxHeight = "50px";
  scrollbox.style.width = "100px";
  scrollbox.style.position = "absolute";
  scrollbox.style.top = "-100000px";
  scrollbox.style.left = "-100000px";
  document.body.appendChild(scrollbox);
  scrollBarWidth = scrollbox.offsetWidth - scrollbox.clientWidth;
  document.body.removeChild(scrollbox);
  return scrollBarWidth;
};
const ownerDocument = (node) => {
  return node && node.ownerDocument || document;
};
const ownerWindow = (node) => {
  const doc = ownerDocument(node);
  return doc.defaultView || window;
};
const getPaddingRight = (element) => {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
};
const isOverflow = (container) => {
  const doc = ownerDocument(container);
  if (doc.body === container) {
    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
  }
  return container.scrollHeight > container.clientHeight;
};
const restoreContainer = (wrapper) => {
  const container = wrapper;
  const initialStyle = [];
  if (isOverflow(container)) {
    initialStyle.push({
      value: container.style.paddingRight,
      property: "padding-right",
      el: container
    });
    container.style.paddingRight = `${getPaddingRight(container) + getScrollbarSize$1()}px`;
    const fixedElements = ownerDocument(container).querySelectorAll('*[style="position:fixed"]');
    [].forEach.call(fixedElements, (element) => {
      initialStyle.push({
        value: element.style.paddingRight,
        property: "padding-right",
        el: element
      });
      element.style.paddingRight = `${getPaddingRight(element) + getScrollbarSize$1()}px`;
    });
  }
  const parent = container.parentElement;
  const containerWindow = ownerWindow(container);
  const scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
  initialStyle.push({
    value: scrollContainer.style.overflow,
    property: "overflow",
    el: scrollContainer
  }, {
    value: scrollContainer.style.overflowX,
    property: "overflow-x",
    el: scrollContainer
  }, {
    value: scrollContainer.style.overflowY,
    property: "overflow-y",
    el: scrollContainer
  });
  scrollContainer.style.overflow = "hidden";
  const restoreInitialStyle = () => {
    initialStyle.forEach(({ value, el, property }) => {
      if (value) {
        el.style.setProperty(property, value);
      } else {
        el.style.removeProperty(property);
      }
    });
  };
  return restoreInitialStyle;
};
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index) => {
    if (callback(item)) {
      idx = index;
      return true;
    }
    return false;
  });
  return idx;
}
class ModalManager {
  constructor() {
    this.modals = [];
    this.containers = [];
  }
  add(modal, container) {
    let modalIndex = this.modals.indexOf(modal);
    if (modalIndex !== -1) {
      return modalIndex;
    }
    modalIndex = this.modals.length;
    this.modals.push(modal);
    const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
    if (containerIndex !== -1) {
      this.containers[containerIndex].modals.push(modal);
      return modalIndex;
    }
    this.containers.push({
      modals: [modal],
      container,
      restore: null
    });
    return modalIndex;
  }
  mount(modal) {
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    if (!containerInfo.restore) {
      containerInfo.restore = restoreContainer(containerInfo.container);
    }
  }
  remove(modal) {
    const modalIndex = this.modals.indexOf(modal);
    if (modalIndex === -1) {
      return modalIndex;
    }
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
    this.modals.splice(modalIndex, 1);
    if (containerInfo.modals.length === 0) {
      if (containerInfo.restore) {
        containerInfo.restore();
      }
      this.containers.splice(containerIndex, 1);
    }
    return modalIndex;
  }
}
const Overlay = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: ${({ theme }) => hexToRgba(theme.color.basic.secondary, 0.6)};
  backdrop-filter: blur(8px);
  transition: opacity 0.3s ease 0s;
  z-index: ${({ theme }) => theme.zIndex.modal};
  ${(p) => p.overlayStyledCss}
  outline: none;
`;
const width = css`
  width: ${({ dimension, mobile }) => {
  if (mobile)
    return "calc(100% - 32px)";
  switch (dimension) {
    case "s":
      return "384px";
    case "m":
      return "488px";
    case "xl":
      return "800px";
    case "l":
    default:
      return "592px";
  }
}};
`;
const Title$2 = styled.h5`
  ${typography$1["Header/H5"]}
  margin: 0 32px 16px 0;
`;
const Content$4 = styled.div`
  overflow-y: auto;
  outline: none;
  ${({ $overflow }) => $overflow && "padding-right: 24px;"}
`;
const ButtonPanel = styled.div`
  display: flex;
  flex-direction: row-reverse;
  margin-top: 24px;

  & > button {
    margin-right: 16px;
  }

  & > button:first-child {
    margin-right: 0;
  }
`;
const ModalComponent = styled.div`
  position: absolute;
  box-sizing: border-box;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  padding: ${({ mobile }) => mobile ? "20px 16px 24px 16px" : "20px 24px 24px 24px"};
  ${width};
  max-height: ${({ mobile }) => mobile ? "84vh" : "90vh"};
  background-color: ${({ theme }) => theme.color.background.primary};
  ${({ theme }) => theme.shadow.ClickableHover}
  border-radius: 8px;
  ${({ mobile }) => mobile ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
  outline: none;

  ${({ mobile }) => mobile && `
    & > ${Title$2} {
      ${typography$1["Subtitle/Subtitle 1"]}
      margin: 0 30px 16px 0;
    }
    & > ${ButtonPanel} {
      flex-direction: column-reverse;
      & > button {
        width: 100%;
        margin-bottom: 16px;
      }
      & > button:first-child {
          margin-bottom: 0;
      }
    }
  `}
`;
const CloseButton = styled.button`
  position: absolute;
  top: 20px;
  right: ${({ mobile }) => mobile ? 16 : 24}px;
  flex-shrink: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  cursor: pointer;
  outline: none;
  border: 0;
  padding: 0;
  width: 24px;
  height: 24px;
  background: transparent;
  -webkit-tap-highlight-color: transparent;

  & *[fill^='#'] {
    fill: ${(p) => p.theme.color.text.secondary};
  }

  &:hover,
  &:focus {
    & *[fill^='#'] {
      fill: ${(p) => p.theme.color.basic.hover};
    }
  }

  &:active {
    & *[fill^='#'] {
      fill: ${(p) => p.theme.color.basic.press};
    }
  }
`;
const emptyOverlayStyledCss = css``;
const ModalTitle = ({ children, ...props2 }) => {
  return /* @__PURE__ */ React.createElement(Title$2, {
    ...props2
  }, children);
};
const ModalContent = ({ children, ...props2 }) => {
  const contentRef = React.useRef(null);
  const [overflow, setOverflow] = React.useState(false);
  const detectOverflow = (e) => {
    return e.clientHeight < e.scrollHeight;
  };
  React.useLayoutEffect(() => {
    if (contentRef.current && detectOverflow(contentRef.current) !== overflow) {
      setOverflow(detectOverflow(contentRef.current));
    }
  }, [children]);
  return /* @__PURE__ */ React.createElement(Content$4, {
    tabIndex: -1,
    ref: contentRef,
    $overflow: overflow,
    ...props2
  }, children);
};
const ModalButtonPanel = ({ children, ...props2 }) => {
  return /* @__PURE__ */ React.createElement(ButtonPanel, {
    ...props2
  }, children);
};
const manager = new ModalManager();
const Modal = React.forwardRef(({
  overlayStyledCss = emptyOverlayStyledCss,
  dimension = "l",
  container,
  mobile,
  onClose,
  closeOnEscapeKeyDown,
  closeOnOutsideClick,
  children,
  ...props2
}, ref) => {
  const modal = React.useRef({});
  const modalRef = React.useRef(null);
  const overlayRef = React.useRef(null);
  const previousFocusedElement = React.useRef(null);
  const getModal = () => {
    modal.current.modalEl = modalRef.current;
    modal.current.containerEl = container || document.body;
    return modal.current;
  };
  React.useLayoutEffect(() => {
    var _a;
    previousFocusedElement.current = document.activeElement;
    (_a = modalRef.current) == null ? void 0 : _a.focus();
    manager.add(getModal(), container || document.body);
    if (modalRef.current) {
      manager.mount(getModal());
    }
    return () => {
      var _a2;
      (_a2 = previousFocusedElement.current) == null ? void 0 : _a2.focus();
      manager.remove(getModal());
    };
  }, []);
  const handleKeyDown = (event) => {
    event.stopPropagation();
    if (event.key === "Escape" && closeOnEscapeKeyDown) {
      event.preventDefault();
      onClose == null ? void 0 : onClose();
    } else if (event.key === "Tab") {
      const focusableEls = getKeyboardFocusableElements(modalRef.current);
      if (event.shiftKey) {
        if (document.activeElement === focusableEls[0] || document.activeElement === modalRef.current) {
          focusableEls[focusableEls.length - 1].focus();
          event.preventDefault();
        }
      } else {
        if (document.activeElement === focusableEls[focusableEls.length - 1]) {
          focusableEls[0].focus();
          event.preventDefault();
        }
      }
    }
  };
  const handleMouseDown = (event) => {
    closeOnOutsideClick && event.target === overlayRef.current && (onClose == null ? void 0 : onClose());
  };
  const handleCloseBtnClick = (event) => {
    event.stopPropagation();
    onClose == null ? void 0 : onClose();
  };
  return ReactDOM.createPortal(/* @__PURE__ */ React.createElement(Overlay, {
    ref: overlayRef,
    tabIndex: -1,
    onMouseDown: handleMouseDown,
    onKeyDown: handleKeyDown,
    overlayStyledCss
  }, /* @__PURE__ */ React.createElement(ModalComponent, {
    ref: refSetter(ref, modalRef),
    tabIndex: -1,
    role: "dialog",
    "aria-modal": true,
    dimension,
    mobile,
    ...props2
  }, children, onClose && /* @__PURE__ */ React.createElement(CloseButton, {
    "aria-label": "\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E\u0435 \u043E\u043A\u043D\u043E",
    mobile,
    onClick: handleCloseBtnClick
  }, /* @__PURE__ */ React.createElement(ReactComponent$7, {
    width: 24,
    height: 24,
    "aria-hidden": true
  })))), container || document.body);
});
Modal.displayName = "Modal";
const OVERFLOW_SIZE_L = 48;
const OVERFLOW_SIZE_M = 40;
const OVERFLOW_MARGIN_LEFT = 4;
const TAB_HEIGHT_L = 48;
const TAB_HEIGHT_M = 40;
const LINE_HEIGHT = "2px";
const ICON_SIZE_M$1 = 20;
const ICON_SIZE_L = 24;
const TAB_PADDING_M = "0 12px";
const TAB_PADDING_L = "0 16px";
const ICON_MARGIN = "8px";
const BADGE_MARGIN = "8px";
const DropDownItem = styled.li`
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: ${({ dimension }) => dimension === "m" ? TAB_HEIGHT_M : TAB_HEIGHT_L}px;
  background: ${({ theme, selected }) => selected ? theme.color.background.tertiary : theme.color.background.primary};
  color: ${({ theme }) => theme.color.text.primary};
  ${typography$1["Body/Body 1 Long"]}
  user-select: none;
  cursor: pointer;

  & > div {
    overflow: hidden;
    display: flex;
  }

  & svg {
    display: inline-block;
    flex-shrink: 0;

    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.tertiary};
    }
    width: ${({ dimension }) => dimension === "m" ? ICON_SIZE_M$1 : ICON_SIZE_L}px;
    height: ${({ dimension }) => dimension === "m" ? ICON_SIZE_M$1 : ICON_SIZE_L}px;
    margin-right: ${ICON_MARGIN};
  }
  & [data-badge] {
    margin-left: ${BADGE_MARGIN};
  }

  &:hover,
  &:focus {
    outline: none;
    ${({ disabled, theme }) => !disabled && `background: ${theme.color.background.secondary};`}
  }

  ${({ disabled, theme }) => disabled && `
  color: ${theme.color.text.tertiary};
  background: ${theme.color.background.primary};
  cursor: default;
  & *[fill^='#'] {
    fill: ${theme.color.text.tertiary};
  }
  `}
`;
const DropdownContentWrapper = styled.div`
  display: flex;
  overflow: hidden;
  text-overflow: ellipsis;
  align-items: center;
  height: ${({ dimension }) => dimension === "m" ? TAB_HEIGHT_M : TAB_HEIGHT_L}px;
  padding: ${({ dimension }) => dimension === "m" ? TAB_PADDING_M : TAB_PADDING_L};
`;
const DropdownContent = styled.div`
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  & > div {
    display: flex;
    overflow: hidden;
    text-overflow: ellipsis;
    align-items: center;
  }
`;
const InverseTooltip$3 = (props2) => {
  const themeContext = useContext(ThemeContext);
  return /* @__PURE__ */ React__default.createElement(Tooltip, {
    ...props2,
    theme: themeContext.name == "dark" ? LIGHT_THEME : DARK_THEME
  });
};
const Item$1 = ({
  id,
  dimension,
  disabled,
  selected,
  icon,
  badge,
  content,
  onClick,
  onKeyDown,
  ...props2
}) => {
  const itemRef = useRef(null);
  const [overflow, setOverflow] = useState(false);
  const detectOverflow = (e) => {
    return e.offsetWidth < e.scrollWidth;
  };
  useLayoutEffect(() => {
    if (itemRef.current && detectOverflow(itemRef.current) !== overflow) {
      setOverflow(detectOverflow(itemRef.current));
    }
  }, [content, dimension]);
  const renderContent = () => /* @__PURE__ */ React__default.createElement(DropdownContentWrapper, {
    dimension
  }, icon && icon, /* @__PURE__ */ React__default.createElement(DropdownContent, {
    ref: itemRef
  }, content), typeof badge !== "undefined" && /* @__PURE__ */ React__default.createElement(Badge, {
    "data-badge": true,
    dimension: "s",
    appearance: id === selected ? "info" : disabled ? "lightDisable" : "light"
  }, badge));
  return /* @__PURE__ */ React__default.createElement(DropDownItem, {
    ...props2,
    id,
    dimension,
    disabled,
    selected: selected === id,
    "aria-selected": selected === id,
    role: "tab",
    tabIndex: selected === id ? 0 : -1,
    onClick,
    onKeyDown
  }, overflow ? /* @__PURE__ */ React__default.createElement(InverseTooltip$3, {
    renderContent: () => content
  }, renderContent()) : renderContent());
};
const sizes = css`
  width: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "l":
    default:
      return "24px";
  }
}};
  height: ${({ dimension }) => {
  switch (dimension) {
    case "m":
      return "20px";
    case "l":
    default:
      return "24px";
  }
}};
`;
const focusStyle = css`
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }
  border: 2px solid ${({ theme }) => theme.color.basic.hover};
`;
const ButtonComponent$1 = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  position: relative;
  cursor: pointer;
  border: 0;
  outline: none;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  margin-left: 4px;
  padding: ${({ dimension }) => dimension === "l" ? "10px" : "8px"};
  border: 2px solid transparent;

  & svg {
    ${sizes};
    flex-shrink: 0;
  }

  & *[fill^='#'] {
    fill: ${({ theme, isActive }) => isActive ? theme.color.basic.press : theme.color.text.secondary};
  }

  &:hover:not(:disabled) *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }

  ${({ menuOpened }) => menuOpened && focusStyle}
  &:focus {
    ${focusStyle}
  }

  &:active *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.press};
  }

  &:disabled {
    cursor: default;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const Button$5 = React.forwardRef(({ dimension = "l", type = "button", ...props2 }, ref) => {
  return /* @__PURE__ */ React.createElement(ButtonComponent$1, {
    ref,
    dimension,
    type,
    ...props2
  }, dimension === "l" ? /* @__PURE__ */ React.createElement(ReactComponent$3K, {
    width: 24
  }) : /* @__PURE__ */ React.createElement(ReactComponent$3K, {
    width: 20
  }));
});
const HiddenTab = styled.div`
  height: 0;
  width: 0;
  opacity: 0;
  flex: 0 0 auto;
  z-index: -10;
`;
const StyledDropdown = styled(Dropdown$3)`
  padding: 8px 0;
`;
const TabOverflowMenu = React.forwardRef(({
  dimension = "l",
  disabled = false,
  options,
  selected,
  onMenuReachTop,
  alignSelf,
  menuFocus,
  onChange,
  onMenuReachBottom,
  setMenuFocus,
  ...props2
}, ref) => {
  const [menuOpened, setMenuOpened] = React.useState(false);
  const btnRef = React.useRef(null);
  const containsActiveTab = React.useMemo(() => options.findIndex((item) => item.id === selected) != -1, [options, selected]);
  const reverseMenu = (e) => {
    e.preventDefault();
    setMenuOpened((prevOpened) => !prevOpened);
  };
  const closeMenu = () => {
    var _a;
    if (btnRef.current)
      btnRef.current.dataset.focusHandler = "disabled";
    (_a = btnRef.current) == null ? void 0 : _a.focus();
    setMenuOpened(false);
  };
  const handleBtnFocus = (e) => {
    if (btnRef.current && btnRef.current.dataset.focusHandler === "disabled") {
      btnRef.current.removeAttribute("data-focus-handler");
    } else {
      setMenuOpened(true);
    }
  };
  const handleReachBottom = () => {
    closeMenu();
    onMenuReachBottom == null ? void 0 : onMenuReachBottom();
  };
  const handleReachTop = () => {
    closeMenu();
    onMenuReachTop == null ? void 0 : onMenuReachTop();
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, !menuOpened && options.map(({ id, content }) => {
    return /* @__PURE__ */ React.createElement(HiddenTab, {
      role: "tab",
      tabIndex: -1,
      key: id,
      id
    }, content);
  }), /* @__PURE__ */ React.createElement(Button$5, {
    ...props2,
    ref: refSetter(ref, btnRef),
    dimension,
    disabled,
    menuOpened,
    isActive: containsActiveTab,
    onMouseDown: reverseMenu,
    onFocus: handleBtnFocus,
    role: "none",
    "aria-hidden": true
  }), menuOpened && /* @__PURE__ */ React.createElement(StyledDropdown, {
    targetRef: btnRef,
    alignSelf,
    onMenuReachTop: handleReachTop,
    onMenuReachBottom: handleReachBottom,
    menuFocus,
    setMenuFocus,
    role: "none",
    onClickOutside: closeMenu
  }, options.map(({ disabled: optionDisabled, id, ...props22 }) => {
    const isDisabled = disabled || optionDisabled;
    const handleClick = (e) => {
      if (!isDisabled) {
        onChange(e.currentTarget.id);
        closeMenu();
      }
    };
    const handleKeyDown = (e) => {
      const code = keyboardKey.getCode(e);
      if ((code === keyboardKey.Enter || code === keyboardKey[" "]) && !isDisabled) {
        onChange(e.currentTarget.id);
        e.preventDefault();
        closeMenu();
      }
    };
    return /* @__PURE__ */ React.createElement(Item$1, {
      key: id,
      id,
      disabled: isDisabled,
      dimension,
      selected,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      ...props22
    });
  })));
});
TabOverflowMenu.displayName = "TabOverflowMenu";
const Wrapper$6 = styled.div`
  position: relative;
  display: flex;
  flex: 1 1 auto;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  box-sizing: border-box;
  box-shadow: inset 0 -${LINE_HEIGHT} 0 0 ${({ theme, underline }) => underline ? theme.color.background.tertiary : "transparent"};
  overflow-x: ${({ mobile }) => mobile ? "scroll" : "visible"};

  &::-webkit-scrollbar {
    width: 0 !important;
    height: 0 !important;
  }

  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  scrollbar-width: none;
  scrollbar-height: none;
`;
const TabsWrapper = styled.div`
  display: flex;
  margin-right: auto;
`;
const Underline = styled.div`
  position: absolute;
  bottom: 0;
  display: flex;
  background-color: ${({ theme }) => theme.color.basic.primary};
  height: ${LINE_HEIGHT};
  transition: all 0.2s ease-out;
`;
const TabContent = styled.div`
  height: 100%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
`;
const TabContentWrapper = styled.span`
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;
  padding: ${({ dimension }) => dimension === "l" ? TAB_PADDING_L : TAB_PADDING_M};
`;
const Tab = styled.button`
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  height: ${({ dimension }) => dimension === "m" ? TAB_HEIGHT_M : TAB_HEIGHT_L}px;
  padding: 0;
  background: transparent;
  appearance: none;
  border: none;
  ${({ dimension }) => dimension === "m" ? typography$1["Body/Body 2 Long"] : typography$1["Body/Body 1 Long"]}
  ${({ selected, theme }) => !selected && `color: ${theme.color.text.secondary};`}
  user-select: none;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;

  &:focus:not(:active) {
    &:before {
      position: absolute;
      content: '';
      border: ${LINE_HEIGHT} solid ${({ theme }) => theme.color.basic.hover};
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
    }
  }
  &:focus,
  & > ${TabContentWrapper} {
    outline: none;
  }

  & svg {
    display: inline-block;
    flex: 1 0 auto;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.secondary};
    }
    width: ${({ dimension }) => dimension === "m" ? ICON_SIZE_M$1 : ICON_SIZE_L}px;
    height: ${({ dimension }) => dimension === "m" ? ICON_SIZE_M$1 : ICON_SIZE_L}px;
    margin-right: ${ICON_MARGIN};
  }
  & [data-badge] {
    margin-left: ${BADGE_MARGIN};
  }

  &:hover:not(:disabled) {
    color: ${({ theme }) => theme.color.basic.hover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
    [data-badge] {
      background: ${({ theme }) => theme.color.basic.hover};
      color: ${({ theme }) => theme.color.text.staticWhite};
    }
  }
  &:active:not(:disabled) {
    color: ${({ theme }) => theme.color.basic.press};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
    [data-badge] {
      background: ${({ theme }) => theme.color.basic.press};
      color: ${({ theme }) => theme.color.text.staticWhite};
    }
  }
  &:disabled {
    color: ${({ theme }) => theme.color.text.tertiary};
    cursor: default;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const measureElement = ({ icon, badge, content }, dimension, callback) => {
  const container = document.createElement("div");
  container.style.position = "absolute";
  container.style.visibility = "hidden";
  container.style.left = "-10000";
  container.style.top = "-10000";
  container.id = "tab-wrapper";
  document.body.appendChild(container);
  const element = /* @__PURE__ */ React__default.createElement(ThemeProvider, {
    theme: LIGHT_THEME
  }, /* @__PURE__ */ React__default.createElement(Tab, {
    dimension,
    selected: true
  }, /* @__PURE__ */ React__default.createElement(TabContentWrapper, {
    dimension,
    tabIndex: -1
  }, icon && icon, /* @__PURE__ */ React__default.createElement(TabContent, null, content), typeof badge !== "undefined" && /* @__PURE__ */ React__default.createElement(Badge, {
    "data-badge": true,
    dimension: "s",
    appearance: "lightDisable"
  }, badge))));
  ReactDOM.render(element, container, () => {
    var _a;
    const width2 = container.getBoundingClientRect().width;
    callback(width2);
    ReactDOM.unmountComponentAtNode(container);
    (_a = container.parentNode) == null ? void 0 : _a.removeChild(container);
  });
};
const TabMenu = ({
  tabs,
  dimension = "l",
  underline = false,
  mobile = false,
  alignSelf = "flex-end",
  activeTab,
  onChange,
  ...props2
}) => {
  const tabsWithRef = React.useMemo(() => {
    return tabs.map((tab) => ({ ...tab, ref: React.createRef() }));
  }, [tabs]);
  const tabsWrapperRef = React.useRef(null);
  const tablistRef = React.useRef(null);
  const overflowBtnRef = React.useRef(null);
  const underlineRef = React.useRef(null);
  const tabsWrapperWidthRef = React.useRef(0);
  const [update, setUpdate] = React.useState({});
  const [visibleTabsAmount, setVisibleTabsAmount] = React.useState(tabsWithRef.length);
  const [menuFocus, setMenuFocus] = React.useState("activeOption");
  const visibleTabs = mobile ? tabsWithRef : tabsWithRef.slice(0, visibleTabsAmount);
  const hiddenTabs = mobile ? [] : tabsWithRef.slice(visibleTabsAmount);
  const getNextFocus = (target) => {
    var _a, _b;
    let sibling = target.nextElementSibling || overflowBtnRef.current || ((_a = tabsWrapperRef.current) == null ? void 0 : _a.firstElementChild);
    while (sibling == null ? void 0 : sibling.hasAttribute("disabled")) {
      sibling = sibling.nextElementSibling || overflowBtnRef.current || ((_b = tabsWrapperRef.current) == null ? void 0 : _b.firstElementChild);
    }
    return sibling;
  };
  const getPreviousFocus = (target) => {
    var _a, _b;
    let sibling = target.previousElementSibling || overflowBtnRef.current || ((_a = tabsWrapperRef.current) == null ? void 0 : _a.lastElementChild);
    while (sibling == null ? void 0 : sibling.hasAttribute("disabled")) {
      sibling = sibling.previousElementSibling || overflowBtnRef.current || ((_b = tabsWrapperRef.current) == null ? void 0 : _b.lastElementChild);
    }
    return sibling;
  };
  const focusFirstTab = () => {
    var _a;
    let tab = (_a = tabsWrapperRef.current) == null ? void 0 : _a.firstElementChild;
    while (tab == null ? void 0 : tab.hasAttribute("disabled")) {
      tab = tab.nextElementSibling;
    }
    tab ? tab.focus() : overflowBtnRef.current.focus();
  };
  const focusLastTab = () => {
    var _a;
    let tab = (_a = tabsWrapperRef.current) == null ? void 0 : _a.lastElementChild;
    while (tab == null ? void 0 : tab.hasAttribute("disabled")) {
      tab = tab.previousElementSibling;
    }
    tab ? tab.focus() : overflowBtnRef.current.focus();
  };
  const styleUnderline = (left, width2) => {
    if (underlineRef.current) {
      underlineRef.current.style.left = left + "px";
      underlineRef.current.style.width = width2 + "px";
      if (width2) {
        underlineRef.current.style.display = "flex";
      } else {
        underlineRef.current.style.display = "none";
      }
    }
  };
  const setUnderline = () => {
    var _a, _b, _c, _d;
    const activeTabRef = (_b = (_a = tabsWithRef.filter((tab) => tab.id === activeTab)) == null ? void 0 : _a[0]) == null ? void 0 : _b.ref.current;
    const left = parseFloat(((_c = underlineRef.current) == null ? void 0 : _c.style.left) || "0");
    const underlineWidth = parseFloat(((_d = underlineRef.current) == null ? void 0 : _d.style.width) || "0");
    if (activeTabRef && tablistRef.current) {
      const activeTabWidth = activeTabRef.getBoundingClientRect().width;
      const activeTabLeft = activeTabRef.getBoundingClientRect().left - tablistRef.current.getBoundingClientRect().left;
      if (activeTabLeft !== left || activeTabWidth !== underlineWidth) {
        styleUnderline(activeTabLeft, activeTabWidth);
      }
    }
    if (!activeTabRef || hiddenTabs.filter((tab) => tab.id === activeTab).length) {
      styleUnderline(0, 0);
    }
  };
  const measureTabs = () => {
    tabsWithRef.forEach((tab, index) => {
      measureElement(tab, dimension, (width2) => {
        tab.width = width2;
        if (index === tabs.length - 1) {
          setUpdate({});
        }
      });
    });
  };
  React.useLayoutEffect(() => {
    measureTabs();
  }, [tabsWithRef, dimension]);
  React.useLayoutEffect(() => setUnderline(), [tabsWithRef, activeTab, visibleTabsAmount, update]);
  React.useLayoutEffect(() => {
    if (tablistRef.current) {
      const observer = observeRect(tablistRef.current, (rect) => {
        const tablistWidth = (rect == null ? void 0 : rect.width) || 0;
        const tabsTotalWidth = tabsWithRef.reduce((sum, item) => {
          return sum + (item.width || 0);
        }, 0);
        if (tabsTotalWidth > tablistWidth) {
          let visibleTabsCounter = 0;
          let contentWidth = dimension === "l" ? OVERFLOW_SIZE_L + OVERFLOW_MARGIN_LEFT : OVERFLOW_SIZE_M + OVERFLOW_MARGIN_LEFT;
          tabsWithRef.forEach((item) => {
            contentWidth += item.width || 0;
            if (contentWidth <= tablistWidth) {
              visibleTabsCounter++;
            }
            setVisibleTabsAmount(visibleTabsCounter);
          });
        } else {
          setVisibleTabsAmount(tabs.length);
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [tablistRef.current, update]);
  React.useLayoutEffect(() => {
    if (tabsWrapperRef.current) {
      const observer = observeRect(tabsWrapperRef.current, (rect) => {
        const width2 = (rect == null ? void 0 : rect.width) || 0;
        if (tabsWrapperWidthRef.current !== width2) {
          tabsWrapperWidthRef.current = width2;
          setUnderline();
          measureTabs();
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [tabsWrapperRef.current, dimension]);
  const handleTabClick = (event) => {
    mobile && event.currentTarget.scrollIntoView({ behavior: "smooth", inline: "center", block: "nearest" });
    onChange(event.currentTarget.id);
    event.currentTarget.blur();
  };
  const handleTabKeyUp = (event) => {
    const code = keyboardKey.getCode(event);
    if (code === keyboardKey.Enter || code === keyboardKey[" "]) {
      onChange(event.currentTarget.id);
    }
  };
  const handleTabsWrapperKeyDown = (event) => {
    const { target } = event;
    let newFocusTarget;
    const code = keyboardKey.getCode(event);
    switch (code) {
      case keyboardKey.ArrowLeft:
        newFocusTarget = getPreviousFocus(target);
        event.preventDefault();
        break;
      case keyboardKey.ArrowRight:
        newFocusTarget = getNextFocus(target);
        event.preventDefault();
        break;
      case keyboardKey.Tab:
        setMenuFocus("activeOption");
        break;
    }
    if (newFocusTarget) {
      newFocusTarget.focus();
      if (code === keyboardKey.ArrowLeft) {
        setMenuFocus("lastOption");
      }
      if (code === keyboardKey.ArrowRight) {
        setMenuFocus("firstOption");
      }
    }
  };
  return /* @__PURE__ */ React.createElement(Wrapper$6, {
    role: "tablist",
    ref: tablistRef,
    underline,
    mobile,
    ...props2
  }, /* @__PURE__ */ React.createElement(Underline, {
    ref: underlineRef,
    "aria-hidden": true
  }), /* @__PURE__ */ React.createElement(TabsWrapper, {
    ref: tabsWrapperRef,
    onKeyDown: handleTabsWrapperKeyDown
  }, visibleTabs.map((item) => {
    const { disabled, content, id, icon, badge, ref, width: width2, ...props22 } = item;
    return /* @__PURE__ */ React.createElement(Tab, {
      ref,
      key: id,
      id,
      role: "tab",
      type: "button",
      "aria-selected": id === activeTab,
      selected: id === activeTab,
      tabIndex: id === activeTab ? 0 : -1,
      dimension,
      disabled,
      onClick: handleTabClick,
      onKeyUp: handleTabKeyUp,
      ...props22
    }, /* @__PURE__ */ React.createElement(TabContentWrapper, {
      dimension,
      tabIndex: -1
    }, icon && icon, /* @__PURE__ */ React.createElement(TabContent, null, content), typeof badge !== "undefined" && /* @__PURE__ */ React.createElement(Badge, {
      "data-badge": true,
      dimension: "s",
      appearance: id === activeTab ? "info" : disabled ? "lightDisable" : "lightInactive"
    }, badge)));
  })), hiddenTabs.length && !mobile ? /* @__PURE__ */ React.createElement(TabOverflowMenu, {
    ref: overflowBtnRef,
    alignSelf,
    options: hiddenTabs.map(({ ref, ...item }) => item),
    selected: activeTab,
    dimension,
    disabled: hiddenTabs.length === hiddenTabs.filter((tab) => tab.disabled).length,
    onChange: (id) => {
      onChange(id);
      styleUnderline(0, 0);
    },
    tabIndex: (hiddenTabs == null ? void 0 : hiddenTabs.filter((item) => item.id === activeTab).length) ? 0 : -1,
    onMenuReachTop: focusLastTab,
    onMenuReachBottom: focusFirstTab,
    menuFocus,
    setMenuFocus
  }) : null);
};
TabMenu.displayName = "TabMenu";
const MainButton = styled(Button$7)`
  &[data-appearance~='primary'] {
    border-radius: 4px 0 0 4px;
  }
  &[data-appearance~='secondary'] {
    border-right: none;
    border-radius: 4px 0 0 4px;
  }
  &:focus {
    outline: none;
  }
`;
const MenuButton$2 = styled(Button$7)`
  &[data-appearance~='primary'] {
    border-radius: 0 4px 4px 0;
  }
  &[data-appearance~='secondary'] {
    border-left: none;
    border-radius: 0 4px 4px 0;
  }
  &:focus {
    outline: none;
  }
`;
const Separator$1 = styled.div`
  width: 2px;
  &[data-appearance~='primary'] {
    background-color: transparent;
  }
  &[data-appearance~='secondary'] {
    background-color: ${({ theme }) => theme.color.basic.primary};
  }
  &[data-appearance~='secondary'] {
    background-color: ${({ theme, disabled }) => disabled ? theme.color.text.tertiary : theme.color.basic.primary};
  }
`;
const Wrapper$5 = styled.div`
  display: inline-flex;

  &[data-focused='true'],
  &:hover {
    & [data-appearance='secondary'] {
      border-color: ${({ theme }) => theme.color.basic.hover};
    }
    & ${Separator$1}[data-appearance="secondary"] {
      background-color: ${({ theme }) => theme.color.basic.hover};
    }
  }
  &:active {
    & [data-appearance='secondary'] {
      border-color: ${({ theme }) => theme.color.basic.press};
    }
    & ${Separator$1}[data-appearance="secondary"] {
      background-color: ${({ theme }) => theme.color.basic.press};
    }
  }
  &[data-appearance~='disabled'] + div {
    background-color: ${({ theme }) => theme.color.text.tertiary};
  }
`;
const Icon$1 = styled(ReactComponent)`
  transition: all 0.3s;
  ${({ $menuOpened }) => $menuOpened && "transform: rotate(180deg);"}
`;
const MultiButton = ({
  dimension = "l",
  appearance = "primary",
  disabled,
  options,
  selected,
  alignSelf = "flex-end",
  onChange,
  onClose,
  onOpen,
  ...props2
}) => {
  const [menuOpened, setMenuOpened] = useState(false);
  const wrapperRef = useRef(null);
  const btnRef = useRef(null);
  const menuDimension = dimension === "xl" ? "l" : dimension;
  const menuWidth = dimension === "s" ? "240px" : "280px";
  const { display: firstOption, disabled: firstOptionDisabled, ...firstOptionProps } = options[0];
  const reverseMenu = () => {
    setMenuOpened((prevOpened) => {
      prevOpened ? onClose == null ? void 0 : onClose() : onOpen == null ? void 0 : onOpen();
      return !prevOpened;
    });
  };
  const closeMenu = () => {
    var _a;
    setMenuOpened(false);
    onClose == null ? void 0 : onClose();
    (_a = btnRef.current) == null ? void 0 : _a.focus();
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = btnRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setMenuOpened(false);
  };
  const handleWrapperFocus = (e) => {
    var _a;
    (_a = wrapperRef.current) == null ? void 0 : _a.setAttribute("data-focused", "true");
  };
  const handleWrapperBlur = (e) => {
    var _a;
    (_a = wrapperRef.current) == null ? void 0 : _a.setAttribute("data-focused", "false");
  };
  const handleMainBtnClick = (e) => {
    onChange(e.currentTarget.id);
  };
  const handleMenuBtnKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.ArrowDown || code === keyboardKey.Enter || code === keyboardKey[" "]) {
      setMenuOpened(true);
      onOpen == null ? void 0 : onOpen();
      e.preventDefault();
    }
  };
  const handleMenuKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.Escape || code === keyboardKey.Tab) {
      closeMenu();
    }
  };
  return /* @__PURE__ */ React__default.createElement(Wrapper$5, {
    ref: wrapperRef,
    "data-focused": "false",
    onFocus: handleWrapperFocus,
    onBlur: handleWrapperBlur,
    ...props2
  }, /* @__PURE__ */ React__default.createElement(MainButton, {
    ...firstOptionProps,
    dimension,
    appearance,
    disabled: disabled || firstOptionDisabled,
    onClick: handleMainBtnClick
  }, firstOption), /* @__PURE__ */ React__default.createElement(Separator$1, {
    disabled,
    "data-appearance": appearance,
    "aria-hidden": true
  }), /* @__PURE__ */ React__default.createElement(MenuButton$2, {
    ref: btnRef,
    dimension,
    appearance,
    disabled,
    displayAsSquare: true,
    onKeyDown: handleMenuBtnKeyDown,
    onClick: reverseMenu,
    "aria-expanded": menuOpened
  }, /* @__PURE__ */ React__default.createElement(Icon$1, {
    $menuOpened: menuOpened
  })), menuOpened && !disabled && /* @__PURE__ */ React__default.createElement(Dropdown$3, {
    role: "listbox",
    "data-dimension": menuDimension,
    targetRef: btnRef,
    style: { width: menuWidth },
    onClickOutside: clickOutside,
    onKeyDown: handleMenuKeyDown,
    alignSelf
  }, options.slice(1, options.length).map(({ display, disabled: optionDisabled, id, ...props22 }) => {
    const handleClick = (e) => {
      if (!optionDisabled) {
        onChange(e.currentTarget.id);
        closeMenu();
      }
    };
    const handleKeyDown = (e) => {
      const code = keyboardKey.getCode(e);
      if (code === keyboardKey.Enter || code === keyboardKey[" "]) {
        if (!optionDisabled) {
          onChange(e.currentTarget.id);
          closeMenu();
          e.preventDefault();
        }
      }
    };
    return /* @__PURE__ */ React__default.createElement(DropDownItem$1, {
      ...props22,
      key: id,
      id,
      dimension: menuDimension,
      disabled: disabled || optionDisabled,
      selected: selected === id,
      "aria-selected": selected === id,
      role: "option",
      onClick: handleClick,
      onKeyDown: handleKeyDown
    }, display);
  })));
};
MultiButton.displayName = "MultiButton";
const getIcon = (status) => {
  switch (status) {
    case "info":
      return ReactComponent$3M;
    case "error":
      return ReactComponent$3L;
    case "success":
      return ReactComponent$4;
    case "warning":
    default:
      return ReactComponent$3;
  }
};
const backGroundColorMixin = css`
  background-color: ${({ theme, status }) => {
  if (status === "warning")
    return theme.color.background.surfaceWarn;
  if (status === "error")
    return theme.color.background.surfaceDanger;
  if (status === "success")
    return theme.color.background.surfaceSuccess;
  return theme.color.background.secondary;
}};
`;
const borderColorMixin = css`
  border-color: ${({ theme, status }) => {
  if (status === "warning")
    return theme.color.status.warn;
  if (status === "error")
    return theme.color.status.danger;
  if (status === "success")
    return theme.color.status.success;
  return theme.color.basic.primary;
}};
`;
const NotificationWrapper = styled.div`
  overflow: hidden;
  position: relative;
  box-sizing: border-box;
  border-radius: 4px;
  padding: 12px 44px 12px 52px;
  ${(p) => p.displayStatusIcon ? "" : "padding-left: 16px;"}
  ${(p) => p.isClosable ? "" : "padding-right: 16px;"}
  border-width: 1px;
  border-style: solid;
  ${borderColorMixin};
  ${backGroundColorMixin};
`;
const Content$3 = styled.div`
  display: flex;
  flex-direction: column;
  padding: 2px 0px;
`;
const Title$1 = styled.div`
  ${typography$1["Subtitle/Subtitle 3"]}
  color: ${({ theme }) => theme.color.text.primary};
  margin-bottom: 4px;
`;
const CustomBody = styled.div`
  ${typography$1["Body/Body 2 Long"]}
  color: ${({ theme }) => theme.color.text.primary};
`;
const Close = styled.div`
  position: absolute;
  top: 14px;
  right: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;

  width: 20px;
  height: 20px;

  & svg {
    width: 20px;
    height: 20px;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.secondary};
    }
  }
  & svg:hover *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }
`;
const IconWrapper$2 = styled.div`
  position: absolute;
  top: 11px;
  left: 15px;
  width: 24px;
  height: 24px;
  & svg {
    width: 24px;
    height: 24px;
    & *[fill^='#'] {
      fill: ${({ theme, status }) => {
  if (status === "warning")
    return theme.color.status.warn;
  if (status === "error")
    return theme.color.status.danger;
  if (status === "success")
    return theme.color.status.success;
  return theme.color.basic.primary;
}};
    }
  }
`;
const LinkWrapper = styled(Link)`
  margin-top: 4px;
  ${typography$1["Button/Button 2"]}
  color: ${({ theme }) => theme.color.basic.primary};
`;
NotificationWrapper.defaultProps = {
  theme: DEFAULT_THEME
};
const Notification = ({
  status = "info",
  title,
  linkText = "",
  href = "",
  displayStatusIcon = false,
  isClosable = false,
  onClose,
  children,
  ...props2
}) => {
  const NotificationIcon = getIcon(status);
  const isAlert = status !== "info";
  return /* @__PURE__ */ React__default.createElement(NotificationWrapper, {
    role: isAlert ? "alert" : "status",
    "aria-live": isAlert ? "assertive" : "polite",
    status,
    displayStatusIcon,
    isClosable,
    ...props2
  }, displayStatusIcon && /* @__PURE__ */ React__default.createElement(IconWrapper$2, {
    status
  }, /* @__PURE__ */ React__default.createElement(NotificationIcon, null)), /* @__PURE__ */ React__default.createElement(Content$3, null, title && /* @__PURE__ */ React__default.createElement(Title$1, null, title), /* @__PURE__ */ React__default.createElement(CustomBody, null, children), linkText && /* @__PURE__ */ React__default.createElement(LinkWrapper, {
    href
  }, linkText || href)), isClosable && /* @__PURE__ */ React__default.createElement(Close, {
    onClick: onClose,
    tabIndex: 0
  }, /* @__PURE__ */ React__default.createElement(ReactComponent$7, null)));
};
Notification.displayName = "Notification";
const ToastContext = React.createContext({});
const ToastProvider = ({ autoDeleteTime, ...props2 }) => {
  const [toasts, setToast] = React.useState([]);
  const removeToast = React.useCallback((removeToast2) => {
    setToast((prevToasts) => prevToasts.filter(({ id }) => id !== removeToast2.id));
  }, []);
  const removeToastById = React.useCallback((removeId) => {
    setToast((prevToasts) => prevToasts.filter(({ id }) => id !== removeId));
  }, []);
  const addToast = React.useCallback((toast) => {
    const idToast = uid();
    const newToast = { ...toast, id: (toast == null ? void 0 : toast.id) || idToast };
    setToast((prevToasts) => {
      const isNewToast = prevToasts.every((toast2) => toast2.id !== newToast.id);
      if (isNewToast) {
        return [newToast, ...prevToasts];
      }
      return prevToasts;
    });
  }, []);
  const clearToasts = React.useCallback(() => {
    setToast([]);
  }, []);
  React.useEffect(() => {
    if (!autoDeleteTime)
      return setToast(toasts);
    const interval = setInterval(() => {
      if (toasts.length) {
        removeToast(toasts[(toasts == null ? void 0 : toasts.length) - 1]);
      }
    }, autoDeleteTime);
    return () => clearInterval(interval);
  }, [toasts]);
  const providerValue = React.useMemo(() => ({ addToast, removeToast, toasts, clearToasts, removeToastById }), [addToast, removeToast, toasts]);
  return /* @__PURE__ */ React.createElement(ToastContext.Provider, {
    value: providerValue,
    children: props2.children
  });
};
function useToast() {
  const context = React.useContext(ToastContext);
  return {
    addToast: context == null ? void 0 : context.addToast,
    removeToast: context == null ? void 0 : context.removeToast,
    toasts: context == null ? void 0 : context.toasts,
    clearToasts: context == null ? void 0 : context.clearToasts,
    removeToastById: context == null ? void 0 : context.removeToastById,
    autoDeleteTime: context == null ? void 0 : context.autoDeleteTime
  };
}
const fadeInRight = keyframes`
  from {
    transform: translateX(100%);

  }
  to {
    transform: translateX(0);
  }
`;
const fadeInLeft = keyframes`
  from {
    transform: translateX(-100%);

  }
  to {
    transform: translateX(0);
  }
`;
const fadeMixin = css`
  animation-name: ${({ position }) => {
  if (position === "bottom-left")
    return fadeInLeft;
  return fadeInRight;
}};
`;
const Transition = styled.div`
  margin-bottom: 16px;
  &:last-child {
    margin-bottom: 0;
  }
  animation-duration: 1s;
  animation-timing-function: ease-out;
  ${fadeMixin}
`;
const StyledNotification = styled(Notification)`
  ${(props2) => props2.theme.shadow.ClickableDefault}
`;
const AnimationToast = ({ position, item }) => {
  const { removeToast } = useToast();
  const handleOnClose = () => {
    removeToast(item);
  };
  return /* @__PURE__ */ React.createElement(Transition, {
    key: item.id,
    position
  }, /* @__PURE__ */ React.createElement(StyledNotification, {
    ...item,
    onClose: item.onClose || handleOnClose
  }, item.children));
};
const Container = styled.div`
  position: fixed;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  width: 488px;
  z-index: ${({ theme }) => theme.zIndex.notification};
  ${(p) => p.position === "top-right" && "top: 16px"};
  ${(p) => (p.position === "bottom-right" || p.position === "bottom-left") && "bottom: 16px"};
  ${(p) => (p.position === "top-right" || p.position === "bottom-right") && "right: 16px"};
  ${(p) => p.position === "bottom-left" && "left: 16px"};
  pointer-events: none;
  > * {
    pointer-events: initial;
  }
`;
const Toast = ({ position = "top-right", ...props2 }) => {
  const { toasts } = useToast();
  return /* @__PURE__ */ React.createElement(Container, {
    position,
    ...props2
  }, !!(toasts == null ? void 0 : toasts.length) && toasts.map((item) => {
    return /* @__PURE__ */ React.createElement(AnimationToast, {
      key: item.id,
      position,
      item
    });
  }));
};
Toast.displayName = "Toast";
const StepperContext = React.createContext({ orientation: "horizontal", activeStep: -1, lineClamp: 3 });
var _path$2;
function _extends$2() {
  _extends$2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function SvgStep(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$2({
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$2 || (_path$2 = /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10 19a9 9 0 100-18 9 9 0 000 18zm0-5.4a3.6 3.6 0 100-7.2 3.6 3.6 0 000 7.2z",
    fill: "#C4CAD4"
  })));
}
const StepTrack = styled.div`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  align-self: stretch;
  flex-direction: row;
  width: 100%;
  margin: 0 0 8px 0;
  [data-orientation='vertical'] & {
    flex-direction: column;
    width: 20px;
    margin: 0 8px 0 0;
  }
`;
const StepIcon = styled(SvgStep)`
  margin: 0 4px 0 0;
  [data-orientation='vertical'] & {
    margin: 0 0 4px 0;
  }
  [data-active='true'] & {
    path {
      fill: ${({ theme }) => theme.color.basic.primary};
    }
  }
  [data-error='true'] & {
    path {
      fill: ${({ theme }) => theme.color.status.danger};
    }
  }
  [data-warning='true'] & {
    path {
      fill: ${({ theme }) => theme.color.status.warn};
    }
  }
  [data-disabled='true'] & {
    path {
      fill: ${({ theme }) => theme.color.basic.primaryLight};
    }
  }
  flex-shrink: 0;
`;
const StepRail = styled.div`
  height: 2px;
  width: 100%;
  [data-orientation='vertical'] & {
    height: 100%;
    width: 2px;
  }
  background-color: ${({ theme }) => theme.color.basic.disable};
  [data-completed='true'] & {
    background-color: ${({ theme }) => theme.color.basic.primary};
  }
  [data-error='true'] & {
    background-color: ${({ theme }) => theme.color.status.danger};
  }
  [data-warning='true'] & {
    background-color: ${({ theme }) => theme.color.status.warn};
  }
  [data-disabled='true'] & {
    background-color: ${({ theme }) => theme.color.basic.primaryLight};
  }
  border-radius: 1px;
`;
const StepContentWrapper = styled.span`
  position: relative;
  display: flex;
  width: 100%;
  height: 100%;
  flex-shrink: 0;
  flex-direction: column;
  [data-orientation='vertical'] & {
    flex-direction: row;
  }
`;
const clickableCss = css`
  &:hover svg {
    path {
      fill: ${({ error, warning, theme }) => {
  if (error)
    return theme.color.status.hoverDanger;
  if (warning)
    return theme.color.status.hoverWarn;
  return theme.color.basic.hover;
}};
    }
  }
`;
const clickableNotActiveCss = css`
  &:hover ${StepRail} {
    background-color: ${({ error, warning, theme }) => {
  if (error)
    return theme.color.status.hoverDanger;
  if (warning)
    return theme.color.status.hoverWarn;
  return theme.color.basic.hover;
}};
  }
`;
const StepWrapper = styled.li`
  display: flex;
  position: relative;
  box-sizing: border-box;
  width: ${({ orientation, stepWidth }) => {
  if (stepWidth)
    return `${typeof stepWidth === "number" ? `${stepWidth}px` : stepWidth}`;
  return orientation === "horizontal" ? "188px" : "224px";
}};
  flex-shrink: 0;
  background: none;
  padding: 0;
  margin: 0;
  text-align: left;
  border: none;
  text-decoration: none;
  ${({ clickable }) => clickable && "cursor: pointer;"}
  ${({ clickable }) => clickable && clickableCss}
  ${({ clickable, active }) => clickable && !active && clickableNotActiveCss}

    &:focus {
    outline: none;
    &:before {
      position: absolute;
      content: '';
      border: 2px solid ${({ theme }) => theme.color.basic.hover};
      border-radius: 4px;
      top: 0px;
      left: 0px;
      bottom: 0px;
      right: 0px;
    }
  }
  &:focus,
  & > ${StepContentWrapper} {
    outline: none;
  }
`;
const ContentWrapper = styled.div`
  display: flex;
  width: 100%;
  [data-orientation='vertical'] & {
    margin: 0 0 20px 0;
  }
`;
const Content$2 = styled.div`
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: ${({ lineClamp }) => {
  if (lineClamp === 1)
    return 1;
  if (lineClamp === 2)
    return 2;
  return 3;
}};
  overflow: hidden;
  color: ${({ theme }) => theme.color.text.primary};
  ${typography$1["Body/Body 2 Long"]}
  margin: 0 12px 0 0;
`;
const List = styled.ul`
  position: relative;
  display: flex;
  box-sizing: border-box;
  scroll-behavior: smooth;
  padding: 0;
  ${({ orientation }) => orientation === "horizontal" ? `
flex-direction: row;
overflow-x: scroll;
` : `
flex-direction: column;
`}

  & > * {
    padding: 2px;
  }

  &::-webkit-scrollbar {
    width: 0 !important;
    height: 0 !important;
  }

  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  scrollbar-width: none;
  scrollbar-height: none;
`;
const InverseTooltip$2 = (props2) => {
  const themeContext = React__default.useContext(ThemeContext);
  return /* @__PURE__ */ React__default.createElement(Tooltip, {
    ...props2,
    theme: themeContext.name == "dark" ? LIGHT_THEME : DARK_THEME
  });
};
const StepContent = ({
  children,
  tooltipProps
}) => {
  const { orientation, lineClamp, stepWidth } = React__default.useContext(StepperContext);
  const contentRef = React__default.useRef(null);
  const [overflow, setOverflow] = React__default.useState(false);
  const detectOverflow = (e) => e.clientHeight < e.scrollHeight;
  React__default.useLayoutEffect(() => {
    if (contentRef.current && detectOverflow(contentRef.current) !== overflow) {
      setOverflow(detectOverflow(contentRef.current));
    }
  }, [children, orientation, stepWidth, lineClamp]);
  return overflow ? /* @__PURE__ */ React__default.createElement(InverseTooltip$2, {
    renderContent: () => children,
    ...tooltipProps
  }, /* @__PURE__ */ React__default.createElement(ContentWrapper, null, /* @__PURE__ */ React__default.createElement(Content$2, {
    ref: contentRef,
    lineClamp
  }, children))) : /* @__PURE__ */ React__default.createElement(ContentWrapper, null, /* @__PURE__ */ React__default.createElement(Content$2, {
    ref: contentRef,
    lineClamp
  }, children));
};
var _path$1;
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function SvgStepCompleted(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends$1({
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path$1 || (_path$1 = /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10 19a9 9 0 100-18 9 9 0 000 18zm5.471-12.405c.26.26.26.683 0 .943l-6 6a.667.667 0 01-.942 0l-3.334-3.333a.667.667 0 11.943-.943L9 12.124l5.529-5.529c.26-.26.682-.26.942 0z",
    fill: "#0D69F2"
  })));
}
var _path;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function SvgStepError(props2) {
  return /* @__PURE__ */ React.createElement("svg", _extends({
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    focusable: false
  }, props2), _path || (_path = /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10 19a9 9 0 100-18 9 9 0 000 18zm.007-6.929a.857.857 0 00.857-.857V5.357a.857.857 0 10-1.714 0v5.857c0 .474.384.857.857.857zm.857 2.572a.857.857 0 10-1.714 0 .857.857 0 001.714 0z",
    fill: "#DA0B20"
  })));
}
const Step = ({
  index = -1,
  link,
  error,
  warning,
  disabled: propDisabled,
  completed: propCompleted,
  active: propActive,
  onClick,
  children,
  ...props2
}) => {
  const { activeStep, orientation, stepWidth } = React__default.useContext(StepperContext);
  const clickable = !propDisabled && (!!onClick || !!link) && !!propCompleted;
  const active = propActive !== void 0 ? propActive : activeStep === index;
  const completed = !!propCompleted && !propDisabled;
  const disabled = !completed && !active || !!propDisabled;
  const icon = error || warning ? SvgStepError : completed ? SvgStepCompleted : SvgStep;
  const stepRef = React__default.useRef(null);
  const handleClick = () => {
    if (!disabled) {
      onClick == null ? void 0 : onClick({ index, active, completed, disabled });
    }
  };
  const nonClickableProps = { clickable: false };
  const linkProps = { clickable: true, as: "a", href: link };
  const buttonProps = { clickable: true, as: "button", type: "button", disabled };
  const extraProps = !clickable ? nonClickableProps : link ? linkProps : buttonProps;
  return /* @__PURE__ */ React__default.createElement(StepWrapper, {
    ref: stepRef,
    "data-orientation": orientation,
    orientation,
    "data-error": error,
    error,
    "data-warning": warning,
    warning,
    "data-completed": completed,
    "data-active": active,
    active,
    "data-disabled": propDisabled,
    stepWidth,
    onClick: handleClick,
    ...extraProps,
    ...props2
  }, /* @__PURE__ */ React__default.createElement(StepContentWrapper, {
    tabIndex: -1
  }, /* @__PURE__ */ React__default.createElement(StepTrack, {
    "aria-hidden": true
  }, /* @__PURE__ */ React__default.createElement(StepIcon, {
    as: icon,
    width: 20,
    height: 20
  }), /* @__PURE__ */ React__default.createElement(StepRail, null)), children));
};
const Stepper = ({
  orientation = "horizontal",
  activeStep = -1,
  lineClamp = 3,
  stepWidth,
  children,
  ...props2
}) => {
  const listRef = React__default.useRef();
  const steps = React__default.Children.toArray(children).map((step, index) => {
    if (!React__default.isValidElement(step)) {
      return null;
    }
    return activeStep === index ? React__default.cloneElement(step, {
      index,
      role: "listitem",
      "aria-current": "step",
      ...step.props
    }) : React__default.cloneElement(step, {
      index,
      role: "listitem",
      ...step.props
    });
  });
  const contextValue = React__default.useMemo(() => ({ activeStep, orientation, lineClamp, stepWidth }), [activeStep, orientation, lineClamp, stepWidth]);
  React__default.useEffect(() => {
    if (listRef.current && orientation === "horizontal") {
      const activeNode = listRef.current.childNodes[activeStep] || listRef.current.firstChild;
      listRef.current.scrollLeft = activeStep === 0 ? activeNode.offsetLeft : activeNode.offsetLeft - 16;
    }
  }, [activeStep, listRef.current, steps]);
  return /* @__PURE__ */ React__default.createElement(StepperContext.Provider, {
    value: contextValue
  }, /* @__PURE__ */ React__default.createElement(List, {
    ref: listRef,
    role: "list",
    orientation,
    ...props2
  }, steps));
};
Stepper.displayName = "Stepper";
const Button$4 = styled.button`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border: none;
  border-radius: 4px;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  overflow: visible;
  background-color: ${({ theme }) => theme.color.background.tertiary};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }

  &:hover {
    cursor: pointer;
    background-color: ${({ theme }) => theme.color.background.tertiaryHover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:active {
    background-color: ${({ theme }) => theme.color.background.tertiaryHover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }

  &:focus {
    outline: none;
    &:before {
      position: absolute;
      content: '';
      border: 2px solid ${({ theme }) => theme.color.basic.primary};
      top: -4px;
      bottom: -4px;
      left: -4px;
      right: -4px;
      border-radius: 4px;
    }
    background-color: ${({ theme }) => theme.color.background.tertiaryHover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:disabled {
    cursor: not-allowed;
    background-color: ${({ theme }) => theme.color.background.tertiary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.disable};
    }
  }
`;
const PaginationButton = (props2) => {
  return /* @__PURE__ */ React.createElement(Button$4, {
    ...props2,
    type: "button"
  });
};
const Button$3 = styled.button`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 40px;
  padding: 10px 12px;
  border: 2px solid transparent;
  border-radius: 4px;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  background-color: transparent;
  ${typography$1["Body/Body 2 Long"]}
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }
  & > span {
    min-width: 20px;
  }

  &:hover {
    cursor: pointer;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  &:active {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }

  &:focus {
    outline: none;
    border-color: ${({ theme }) => theme.color.basic.hover};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  ${({ $menuOpened, theme }) => $menuOpened && `
      border-color: ${theme.color.basic.hover};
      & *[fill^='#'] {
        fill: ${theme.color.basic.hover};
      }
    `}

  &:disabled {
    cursor: not-allowed;
    color: ${({ theme }) => theme.color.basic.disable};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.disable};
    }
  }
`;
const Icon = styled(ReactComponent)`
  transition: all 0.3s;
  ${({ $menuOpened }) => $menuOpened && "transform: rotate(180deg);"}
`;
const StyledDropDown$1 = styled(Dropdown$3)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  max-height: ${(p) => p.dropMaxHeight};
  min-width: 100%;
`;
const MenuButton$1 = React.forwardRef(({
  children,
  disabled = false,
  onClose,
  onOpen,
  options,
  selected,
  onChange,
  dropMaxHeight,
  dropContainerCssMixin,
  ...props2
}, ref) => {
  const [menuOpened, setMenuOpened] = React.useState(false);
  const btnRef = React.useRef(null);
  const menuRef = React.useRef(null);
  const reverseMenu = () => {
    setMenuOpened((prevOpened) => {
      prevOpened ? onClose == null ? void 0 : onClose() : onOpen == null ? void 0 : onOpen();
      return !prevOpened;
    });
  };
  const closeMenu = () => {
    var _a;
    setMenuOpened(false);
    onClose == null ? void 0 : onClose();
    (_a = btnRef.current) == null ? void 0 : _a.focus();
  };
  useClickOutside([menuRef, btnRef], closeMenu);
  const handleBtnKeyDown = (e) => {
    if (e.key === "ArrowDown" || e.key === "Enter" || e.key === " ") {
      setMenuOpened(true);
      onOpen == null ? void 0 : onOpen();
      e.preventDefault();
    }
  };
  const handleClick = (e) => {
    onChange(e.currentTarget.value);
    closeMenu();
  };
  const handleKeyDown = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      onChange(e.currentTarget.value);
      closeMenu();
      e.preventDefault();
    }
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = btnRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setMenuOpened(false);
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button$3, {
    ...props2,
    ref: refSetter(ref, btnRef),
    disabled,
    $menuOpened: menuOpened,
    onKeyDown: handleBtnKeyDown,
    onClick: reverseMenu,
    "aria-expanded": menuOpened,
    type: "button"
  }, /* @__PURE__ */ React.createElement("span", null, children), /* @__PURE__ */ React.createElement(Icon, {
    $menuOpened: menuOpened,
    width: 20,
    height: 20,
    "aria-hidden": true
  })), menuOpened && /* @__PURE__ */ React.createElement(StyledDropDown$1, {
    ref: menuRef,
    targetRef: btnRef,
    onClickOutside: clickOutside,
    dropMaxHeight,
    cssMixin: dropContainerCssMixin
  }, options.map((option) => /* @__PURE__ */ React.createElement(DropDownItem$1, {
    key: option,
    value: option,
    dimension: "s",
    selected: selected === option,
    "aria-selected": selected === option,
    role: "option",
    onClick: handleClick,
    onKeyDown: handleKeyDown
  }, option))));
});
const ComplexWrapper = styled.div`
  display: flex;
  align-items: center;
  ${typography$1["Body/Body 2 Long"]}
  white-space: nowrap;
  user-select: none;
  min-width: 696px;
  justify-content: space-between;
`;
const SimpleWrapper = styled(ComplexWrapper)`
  min-width: auto;
`;
const Part = styled.div`
  display: flex;
  align-items: center;
`;
const Devider = styled.div`
  width: 1px;
  height: 24px;
  background-color: ${({ theme }) => theme.color.background.tertiary};
`;
const PageAdditional = styled.span`
  margin: 0 4px;
  min-width: 112px;
`;
const PageSizeAdditional = styled.div`
  min-width: 172px;
  margin: 0 12px;
  [data-simple='true'] & {
    margin: 0;
  }
`;
const ButtonsWrapper = styled.div`
  display: flex;
  & > button {
    margin-left: 8px;
  }
  [data-simple='true'] & {
    margin-left: 20px;
  }
`;
const PaginationOne = ({
  page,
  pageSize,
  pageSizes,
  totalItems,
  pageSelectDisabled = false,
  pageSizeSelectDisabled = false,
  itemsPerPageText = "\u0417\u0430\u043F\u0438\u0441\u0435\u0439 \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435:",
  onChange,
  itemRangeText = (min, max, total) => `${min}\u2013${max} \u0437\u0430\u043F\u0438\u0441\u0435\u0439 \u0438\u0437 ${total}`,
  pageRangeText = (total) => `\u0438\u0437 ${total} ${total === 1 ? "\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B" : "\u0441\u0442\u0440\u0430\u043D\u0438\u0446"}`,
  pageSelectLabel = (page2, totalPages) => `\u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${page2} \u0438\u0437 ${totalPages}`,
  pageSizeSelectLabel = (pageSize2, total) => `\u0417\u0430\u043F\u0438\u0441\u0435\u0439 ${pageSize2} \u0438\u0437 ${total}`,
  backwardText = "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0432\u044B\u0431\u0440\u0430\u0442\u044C",
  forwardText = "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0432\u044B\u0431\u0440\u0430\u0442\u044C",
  simple = false,
  dropMaxHeight = "300px",
  dropContainerCssMixin,
  ...props2
}) => {
  const totalPages = Math.max(Math.ceil(totalItems / pageSize), 1);
  const pages = Array.from({ length: totalPages }, (v, k) => k + 1);
  const backButtonDisabled = page === 1;
  const forwardButtonDisabled = page === totalPages;
  const handleSizeChange = (pageSize2) => {
    onChange({ page: 1, pageSize: pageSize2 });
  };
  const handlePageInputChange = (page2) => {
    if (page2 > 0 && page2 <= totalPages) {
      onChange({
        page: page2,
        pageSize
      });
    }
  };
  const pageIncrement = () => onChange({ page: page + 1, pageSize });
  const pageDecrement = () => onChange({ page: page - 1, pageSize });
  const renderComplex = () => {
    return /* @__PURE__ */ React.createElement(ComplexWrapper, {
      "data-simple": simple,
      ...props2
    }, /* @__PURE__ */ React.createElement(Part, null, itemsPerPageText, /* @__PURE__ */ React.createElement(MenuButton$1, {
      options: pageSizes,
      selected: pageSize,
      onChange: handleSizeChange,
      disabled: pageSizeSelectDisabled,
      "aria-label": pageSizeSelectLabel(pageSize, totalItems),
      dropMaxHeight,
      dropContainerCssMixin
    }, pageSize), /* @__PURE__ */ React.createElement(Devider, null), /* @__PURE__ */ React.createElement(PageSizeAdditional, null, itemRangeText(Math.min(pageSize * (page - 1) + 1, totalItems), Math.min(page * pageSize, totalItems), totalItems))), /* @__PURE__ */ React.createElement(Part, null, /* @__PURE__ */ React.createElement(Devider, null), /* @__PURE__ */ React.createElement(MenuButton$1, {
      options: pages,
      selected: page,
      onChange: handlePageInputChange,
      disabled: pageSelectDisabled,
      "aria-label": pageSelectLabel(page, totalPages),
      dropMaxHeight,
      dropContainerCssMixin
    }, page), /* @__PURE__ */ React.createElement(PageAdditional, null, pageRangeText(totalPages)), /* @__PURE__ */ React.createElement(ButtonsWrapper, null, /* @__PURE__ */ React.createElement(PaginationButton, {
      "aria-label": backwardText,
      disabled: backButtonDisabled,
      onClick: pageDecrement
    }, /* @__PURE__ */ React.createElement(ReactComponent$1, {
      width: 24,
      height: 24
    })), /* @__PURE__ */ React.createElement(PaginationButton, {
      "aria-label": forwardText,
      disabled: forwardButtonDisabled,
      onClick: pageIncrement
    }, /* @__PURE__ */ React.createElement(ReactComponent$2, {
      width: 24,
      height: 24
    })))));
  };
  const renderSimple = () => {
    return /* @__PURE__ */ React.createElement(SimpleWrapper, {
      "data-simple": simple,
      ...props2
    }, /* @__PURE__ */ React.createElement(PageSizeAdditional, null, itemRangeText(Math.min(pageSize * (page - 1) + 1, totalItems), Math.min(page * pageSize, totalItems), totalItems)), /* @__PURE__ */ React.createElement(ButtonsWrapper, null, /* @__PURE__ */ React.createElement(PaginationButton, {
      "aria-label": backwardText,
      disabled: backButtonDisabled,
      onClick: pageDecrement
    }, /* @__PURE__ */ React.createElement(ReactComponent$1, {
      width: 24,
      height: 24
    })), /* @__PURE__ */ React.createElement(PaginationButton, {
      "aria-label": forwardText,
      disabled: forwardButtonDisabled,
      onClick: pageIncrement
    }, /* @__PURE__ */ React.createElement(ReactComponent$2, {
      width: 24,
      height: 24
    }))));
  };
  return simple ? renderSimple() : renderComplex();
};
PaginationOne.displayName = "PaginationOne";
const Wrapper$4 = styled.ul`
  position: relative;
  display: flex;
  overflow-x: scroll;
  list-style: none;

  & > li {
    margin-right: 8px;
  }

  & > li:last-child {
    margin-right: 0;
  }

  &::-webkit-scrollbar {
    width: 0 !important;
    height: 0 !important;
  }

  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  scrollbar-width: none;
  scrollbar-height: none;
`;
const ItemContentWrapper = styled.span`
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;
  padding: 4px;
`;
const ItemContent = styled.div`
  display: inline-flex;
  height: 4px;
  width: 16px;
  border-radius: 2px;
  background-color: ${({ theme }) => theme.color.background.tertiary};

  [aria-selected='true'] & {
    background-color: ${({ theme }) => theme.color.basic.primary};
  }
`;
const Item = styled.button`
  width: 24px;
  height: 12px;
  border-radius: 4px;

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  background: transparent;
  appearance: none;
  border: 2px solid transparent;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;

  &:focus {
    border-color: ${({ theme }) => theme.color.basic.primary};
    & ${ItemContent} {
      background-color: ${({ theme }) => theme.color.basic.hover};
    }
  }
  &:focus,
  & > ${ItemContentWrapper} {
    outline: none;
  }

  &:hover ${ItemContent} {
    background-color: ${({ theme }) => theme.color.basic.hover};
  }
  &:active ${ItemContent} {
    background-color: ${({ theme }) => theme.color.basic.press};
  }
`;
const PaginationSimple = ({
  totalItems,
  currentItem,
  onChange,
  children,
  ...props2
}) => {
  return /* @__PURE__ */ React.createElement(Wrapper$4, {
    ...props2
  }, children && React.Children.toArray(children).map((child, index) => {
    const id = uid();
    const handleChange = (event) => onChange(event, index);
    return /* @__PURE__ */ React.createElement("li", {
      "aria-selected": currentItem === index,
      key: id,
      onClick: handleChange
    }, child);
  }));
};
const PaginationSimpleItem = (props2) => {
  return /* @__PURE__ */ React.createElement(Item, {
    ...props2
  }, /* @__PURE__ */ React.createElement(ItemContentWrapper, {
    tabIndex: -1
  }, /* @__PURE__ */ React.createElement(ItemContent, null)));
};
PaginationSimple.displayName = "PaginationSimple";
const T = styled.span`
  ${(p) => typography$1[p.font]};
  ${(p) => p.cssMixin ? p.cssMixin : ""}
`;
T.displayName = "T";
const StyledButton$1 = styled.button.attrs((props2) => ({
  "data-dimension": props2.dimension
}))`
  box-sizing: border-box;
  display: inline-block;
  border: none;
  border-radius: 4px;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  appearance: none;
  vertical-align: center;

  &[data-dimension='xl'] {
    padding: 0;
    height: 56px;
    width: 56px;
  }

  &[data-dimension='l'] {
    height: 48px;
    width: 48px;
  }

  &[data-dimension='m'] {
    height: 40px;
    width: 40px;
  }

  &[data-dimension='s'] {
    height: 32px;
    width: 32px;
  }

  &:hover {
    cursor: pointer;
    background: ${({ theme }) => theme.color.background.secondary};
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }
  &:active {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
  }

  &:disabled {
    cursor: not-allowed;
    background-color: transparent;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const IconButtonContent = styled.span`
  vertical-align: top;
  display: inline-flex;
  flex-direction: row;
  overflow: hidden;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
  height: ${({ dimension }) => dimension === "s" ? 16 : 20}px;

  > * {
    display: inline-block;
    flex: 0 1 auto;
    white-space: nowrap;
  }

  > *:not(:first-child) {
    margin-left: 8px;
  }

  & *[fill^='#'] {
    fill: ${(p) => p.theme.color.text.secondary};
  }

  & > svg {
    width: ${({ dimension }) => dimension === "s" ? 16 : 20}px;
    height: ${({ dimension }) => dimension === "s" ? 16 : 20}px;
  }
`;
const PseudoIcon = styled.div`
  border-radius: 50%;
  width: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  height: ${({ dimension }) => dimension === "s" ? 20 : 24}px;
  background: ${({ theme }) => theme.color.background.tertiary};
`;
const IconButton = ({
  dimension = "xl",
  type = "button",
  loading = false,
  skeleton = false,
  disabled = false,
  children,
  ...props2
}) => {
  const contentSize = dimension === "s" ? "20px" : "24px";
  const disabledOptions = loading || skeleton || disabled;
  const renderContent = () => {
    if (loading) {
      return /* @__PURE__ */ React.createElement(IconButtonContent, {
        style: { height: contentSize }
      }, /* @__PURE__ */ React.createElement(Spinner, {
        style: { height: contentSize, width: contentSize }
      }));
    }
    if (skeleton) {
      return /* @__PURE__ */ React.createElement(IconButtonContent, {
        style: { height: contentSize }
      }, /* @__PURE__ */ React.createElement(PseudoIcon, {
        dimension
      }));
    }
    return /* @__PURE__ */ React.createElement(IconButtonContent, {
      dimension
    }, children);
  };
  return /* @__PURE__ */ React.createElement(StyledButton$1, {
    dimension,
    disabled: disabledOptions,
    type,
    ...props2
  }, renderContent());
};
IconButton.displayName = "IconButton";
const selectedMixin = css`
  background: ${({ theme }) => theme.color.basic.primary};
  color: ${({ theme }) => theme.color.text.staticWhite};
`;
const hoverMixin = css`
  background: ${({ theme }) => theme.color.background.tertiary};
  color: ${({ theme }) => theme.color.basic.hover};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }
`;
const pressMixin = css`
  background: ${({ theme }) => theme.color.background.tertiary};
  color: ${({ theme }) => theme.color.basic.press};
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.press};
  }
`;
const ButtonContent$1 = styled.span`
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
`;
const Button$2 = styled.button`
  display: flex;
  flex: 1 1 auto;
  position: relative;
  width: 40px;
  height: 40px;
  align-items: center;
  justify-content: center;
  border: 2px solid transparent;
  border-radius: 20px;
  ${typography$1["Body/Body 1 Short"]}
  background: transparent;
  border: none;
  appearance: none;
  outline: none;
  padding: 0;
  margin: 0;
  user-select: none;
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }

  &:disabled {
    cursor: default;
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
    ${({ selected, theme }) => !selected && `color: ${theme.color.text.tertiary};`}
  }

  ${({ selected }) => selected && selectedMixin}
  &:hover:not(:disabled) {
    ${({ selected }) => !selected && hoverMixin}
  }
  &:active:not(:disabled) {
    ${({ selected }) => !selected && pressMixin}
  }

  &:focus:not(:active) {
    border: 2px solid ${({ theme }) => theme.color.basic.hover};
  }
`;
const PreviousButton = styled(Button$2)`
  margin-right: 8px;
`;
const NextButton = styled(Button$2)`
  margin-left: 8px;
`;
const PaginationItem = ({ onClick, page, selected, disabled, type }) => {
  let label = "";
  if (type === "page")
    label = `\u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${page}, \u0432\u044B\u0431\u0440\u0430\u0442\u044C`;
  if (type === "next")
    label = "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0432\u044B\u0431\u0440\u0430\u0442\u044C";
  if (type === "previous")
    label = "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430, \u0432\u044B\u0431\u0440\u0430\u0442\u044C";
  const component = type === "page" ? Button$2 : type === "previous" ? PreviousButton : NextButton;
  return /* @__PURE__ */ React.createElement(Button$2, {
    type: "button",
    as: component,
    "aria-current": selected,
    "aria-label": label,
    tabIndex: disabled ? -1 : 0,
    disabled,
    selected,
    onClick
  }, /* @__PURE__ */ React.createElement(ButtonContent$1, {
    tabIndex: -1
  }, type === "page" && page, type === "next" && /* @__PURE__ */ React.createElement(ReactComponent$2, {
    width: 24,
    height: 24
  }), type === "previous" && /* @__PURE__ */ React.createElement(ReactComponent$1, {
    width: 24,
    height: 24
  })));
};
const EllipsisWrapper = styled.div`
  display: flex;
  width: 40px;
  height: 40px;
  align-items: center;
  justify-content: center;
  ${typography$1["Body/Body 1 Short"]}
  background: transparent;
`;
const Ellipsis = () => {
  return /* @__PURE__ */ React.createElement(EllipsisWrapper, null, "...");
};
const range = (start, end) => {
  const length = end - start + 1;
  return Array.from({ length }, (_, i) => start + i);
};
const getListOfPages = (page, count, hidePrevButton, hideNextButton) => {
  const boundaryCount = 1;
  const siblingCount = 1;
  const startPages = range(1, Math.min(boundaryCount, count));
  const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
  const siblingsStart = Math.max(Math.min(page - siblingCount, count - boundaryCount - siblingCount * 2 - 1), boundaryCount + 2);
  const siblingsEnd = Math.min(Math.max(page + siblingCount, boundaryCount + siblingCount * 2 + 2), endPages.length > 0 ? endPages[0] - 2 : count - 1);
  return [
    ...hidePrevButton ? [] : ["previous"],
    ...startPages,
    ...siblingsStart > boundaryCount + 2 ? ["ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : [],
    ...range(siblingsStart, siblingsEnd),
    ...siblingsEnd < count - boundaryCount - 1 ? ["ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : [],
    ...endPages,
    ...hideNextButton ? [] : ["next"]
  ];
};
const Wrapper$3 = styled.div`
  position: relative;
  display: flex;
  flex-direction: ${({ mobile }) => mobile ? "column" : "row"};
  flex: 1 1 auto;
  list-style: none;

  ${({ mobile }) => mobile && `
  & > ul {
    margin: 0 4px 0 4px;
  }
  `}
`;
const PagesWrapper = styled.ul`
  position: relative;
  display: flex;
  justify-content: center;
  list-style: none;
  padding: 0;
  margin: 0;
`;
const Input = styled(TextInput)`
  margin-left: 8px;
  & > input {
    max-width: 130px;
  }
`;
const Button$1 = styled(Button$7)`
  margin-bottom: 20px;
`;
const PaginationTwo = ({
  page,
  count = 1,
  mobile = false,
  disabledPages = [],
  showNextBtnMobile = true,
  showInput = true,
  onChange,
  ...props2
}) => {
  const hideNextButton = mobile || false;
  const hidePrevButton = mobile || false;
  const isInputVisible = showInput && count > 21 && !mobile;
  const [inputValue, setInputValue] = React.useState("");
  const itemList = getListOfPages(page, count, hidePrevButton, hideNextButton);
  const getPreviousPage = () => range(1, page - 1).filter((item) => disabledPages.indexOf(item) === -1).reverse()[0] || 1;
  const getNextPage = () => range(page + 1, count).filter((item) => disabledPages.indexOf(item) === -1)[0] || count;
  const disableNextBtn = page >= count || range(page + 1, count).every((item) => disabledPages.indexOf(item) > -1);
  const disablePreviousBtn = page <= 1 || range(1, page - 1).every((item) => disabledPages.indexOf(item) > -1);
  const buttonPage = (type) => {
    switch (type) {
      case "previous":
        return getPreviousPage();
      case "next":
        return getNextPage();
      default:
        return null;
    }
  };
  const handlePageClick = (event, value) => {
    if (value !== page) {
      onChange == null ? void 0 : onChange(event, value);
    }
    event.currentTarget.blur();
  };
  const items = itemList.map((item) => {
    return typeof item === "number" ? {
      onClick: (event) => {
        handlePageClick(event, item);
      },
      type: "page",
      page: item,
      selected: item === page,
      disabled: disabledPages.indexOf(item) > -1
    } : {
      onClick: (event) => {
        handlePageClick(event, buttonPage(item));
      },
      type: item,
      page: buttonPage(item),
      selected: false,
      disabled: item.indexOf("ellipsis") === -1 && (item === "next" ? disableNextBtn : disablePreviousBtn)
    };
  });
  const onInputSubmit = (event, value) => {
    const parsed = parseInt(value, 10);
    if (isNaN(parsed)) {
      setInputValue("");
    } else if (disabledPages.indexOf(parsed) > -1) {
      setInputValue("");
    } else {
      if (parsed !== page) {
        const newValue = parsed > count ? count : parsed < 1 ? 1 : parsed;
        setInputValue(newValue.toString());
        onChange == null ? void 0 : onChange(event, newValue);
      }
    }
  };
  const handleInputChange = (event) => setInputValue(event.currentTarget.value);
  const handleInputKeyDown = (event) => {
    if (event.key === "Enter") {
      onInputSubmit(event, event.currentTarget.value);
      event.preventDefault();
    }
  };
  const handleInputBlur = (event) => onInputSubmit(event, event.currentTarget.value);
  const handleBtnClick = (event) => onChange == null ? void 0 : onChange(event, getNextPage());
  return /* @__PURE__ */ React.createElement(Wrapper$3, {
    mobile,
    ...props2
  }, mobile && showNextBtnMobile && /* @__PURE__ */ React.createElement(Button$1, {
    dimension: "m",
    appearance: "secondary",
    disabled: disableNextBtn,
    onClick: handleBtnClick
  }, "\u0414\u0430\u043B\u044C\u0448\u0435"), /* @__PURE__ */ React.createElement(PagesWrapper, null, items.map(({ type, selected, disabled, page: page2, onClick }) => {
    const id = uid();
    return type === "ellipsis" ? /* @__PURE__ */ React.createElement("li", {
      key: id
    }, /* @__PURE__ */ React.createElement(Ellipsis, null)) : /* @__PURE__ */ React.createElement("li", {
      key: id
    }, /* @__PURE__ */ React.createElement(PaginationItem, {
      type,
      selected,
      disabled,
      page: page2,
      onClick
    }));
  })), isInputVisible && /* @__PURE__ */ React.createElement(Input, {
    pattern: "[0-9]+",
    placeholder: "\u2116 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B",
    value: inputValue,
    onChange: handleInputChange,
    onKeyDown: handleInputKeyDown,
    onBlur: handleInputBlur
  }));
};
PaginationTwo.displayName = "PaginationTwo";
const useLoaded = (src) => {
  const [loaded, setLoaded] = React.useState(false);
  React.useEffect(() => {
    if (!src)
      return;
    setLoaded(false);
    let effectActive = true;
    const image = new Image();
    image.src = src;
    image.onload = () => {
      if (!effectActive) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = () => {
      if (!effectActive) {
        return;
      }
      setLoaded("error");
    };
    return () => {
      effectActive = false;
    };
  }, [src]);
  return loaded;
};
const VIEWBOX = {
  xs: "0 0 24 24",
  s: "0 0 32 32",
  m: "0 0 40 40",
  l: "0 0 48 48",
  xl: "0 0 56 56"
};
const CIRCLE = {
  xs: "12",
  s: "16",
  m: "20",
  l: "24",
  xl: "28"
};
const ELLIPSE = {
  xs: { c: "21", r: "3", r2: "5" },
  s: { c: "27", r: "5", r2: "7" },
  m: { c: "34", r: "6", r2: "8" },
  l: { c: "41", r: "7", r2: "9" },
  xl: { c: "47", r: "9", r2: "11" }
};
const AvatarSVG = ({
  dimension = "xl",
  hasImage,
  href,
  status,
  size,
  appearance: appearanceProp,
  group = false,
  svgMaskId
}) => {
  const theme = React.useContext(ThemeContext) || LIGHT_THEME;
  const id = svgMaskId || uid();
  const useId = `url(#${id})`;
  const getBackgroundColor = (appearance2) => {
    switch (appearance2) {
      case "white":
        return theme.color.background.primary;
      case "grey":
        return theme.color.basic.tertiary;
      case "dark":
        return theme.color.background.inversion;
      case "light":
      default:
        return theme.color.background.tertiary;
    }
  };
  const getStatusColor = (status2) => {
    switch (status2) {
      case "success":
        return theme.color.status.success;
      case "warn":
        return theme.color.status.warn;
      case "danger":
        return theme.color.status.danger;
      case "inactive":
      default:
        return theme.color.background.shadow;
    }
  };
  const appearance = appearanceProp || "light";
  const backgroundColor2 = typeof appearance === "string" ? getBackgroundColor(appearance) : appearance.background;
  return /* @__PURE__ */ React.createElement("svg", {
    viewBox: VIEWBOX[dimension],
    width: size,
    height: size,
    style: { transform: "rotate(.00001deg)" }
  }, /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("mask", {
    id
  }, /* @__PURE__ */ React.createElement("circle", {
    id: "outer",
    cx: CIRCLE[dimension],
    cy: CIRCLE[dimension],
    r: CIRCLE[dimension],
    strokeWidth: "0",
    stroke: "white",
    fill: "white"
  }), status && !group && /* @__PURE__ */ React.createElement("ellipse", {
    id: "inner",
    vectorEffect: "non-scaling-stroke",
    cx: ELLIPSE[dimension].c,
    cy: ELLIPSE[dimension].c,
    rx: ELLIPSE[dimension].r2,
    ry: ELLIPSE[dimension].r2,
    fill: "black"
  }), group && /* @__PURE__ */ React.createElement("circle", {
    cx: String(Number(CIRCLE[dimension]) * 3 - 2),
    cy: CIRCLE[dimension],
    r: String(Number(CIRCLE[dimension]) + 2),
    strokeWidth: "0",
    stroke: "black",
    fill: "black"
  }))), hasImage && /* @__PURE__ */ React.createElement("image", {
    width: "100%",
    height: "100%",
    preserveAspectRatio: "xMidYMid slice",
    mask: useId,
    xlinkHref: href
  }), !hasImage && /* @__PURE__ */ React.createElement("circle", {
    id: "outer",
    cx: CIRCLE[dimension],
    cy: CIRCLE[dimension],
    r: CIRCLE[dimension],
    strokeWidth: "0",
    stroke: backgroundColor2,
    fill: backgroundColor2,
    mask: useId
  }), status && !group && /* @__PURE__ */ React.createElement("ellipse", {
    style: { fill: getStatusColor(status), strokeWidth: 0, strokeOpacity: 0 },
    vectorEffect: "non-scaling-stroke",
    cx: ELLIPSE[dimension].c,
    cy: ELLIPSE[dimension].c,
    rx: ELLIPSE[dimension].r,
    ry: ELLIPSE[dimension].r
  }));
};
const InverseTooltip$1 = (props2) => {
  const themeContext = React.useContext(ThemeContext);
  return /* @__PURE__ */ React.createElement(Tooltip, {
    ...props2,
    theme: themeContext.name == "dark" ? LIGHT_THEME : DARK_THEME
  });
};
const Wrapper$2 = styled.button`
  position: relative;
  width: ${({ size }) => size};
  height: ${({ size }) => size};
  margin: 0;
  padding: 0;
  border: none;
  appearance: none;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  & .avatar-tooltip {
    display: flex;
  }
`;
const getTextColor = css`
  ${({ theme, appearance }) => {
  switch (appearance) {
    case "light":
    case "white":
      return theme.color.text.primary;
    case "grey":
    case "dark":
      return theme.color.text.inversion;
    default:
      return appearance.text;
  }
}}
`;
const getTypography = css`
  ${({ dimension }) => {
  switch (dimension) {
    case "xs":
    case "s":
      return typography$1["Caption/Caption 1"];
    case "m":
    case "l":
      return typography$1["Body/Body 1 Short"];
    case "xl":
    default:
      return typography$1["Subtitle/Subtitle 1"];
  }
}}
`;
const Text$1 = styled.span`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  user-select: none;
  ${getTypography}
  color: ${getTextColor};
`;
const getIconSize = css`
  ${({ dimension }) => {
  switch (dimension) {
    case "xs":
      return "16px";
    case "s":
      return "20px";
    case "m":
      return "24px";
    case "l":
      return "28px";
    case "xl":
    default:
      return "32px";
  }
}}
`;
const IconWrapper$1 = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: ${getIconSize};
  height: ${getIconSize};

  & svg {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.tertiary};
    }
    width: 100%;
    height: 100%;
  }
`;
const Avatar = ({
  userName,
  href,
  status,
  dimension = "xl",
  icon: Icon2,
  appearance = "light",
  group = false,
  showTooltip = true,
  isMenuAvatar = false,
  svgMaskId,
  ...props2
}) => {
  const loaded = useLoaded(href);
  const hasImage = Boolean(href && loaded === "loaded");
  const hasIcon = Boolean(Icon2 && !hasImage);
  const hasAbbr = !hasImage && !hasIcon || isMenuAvatar;
  const maxAbbrLength = dimension === "xs" ? 1 : 2;
  const abbr = isMenuAvatar ? userName : userName == null ? void 0 : userName.split(" ").map((word) => word.toUpperCase()[0]).join("").slice(0, maxAbbrLength);
  const getSize = () => {
    switch (dimension) {
      case "xs":
        return "24px";
      case "s":
        return "32px";
      case "m":
        return "40px";
      case "l":
        return "48px";
      case "xl":
      default:
        return "56px";
    }
  };
  const renderContent = () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(AvatarSVG, {
    dimension,
    size: getSize(),
    hasImage,
    href,
    status,
    appearance,
    group,
    svgMaskId
  }), hasAbbr && /* @__PURE__ */ React.createElement(Text$1, {
    dimension,
    appearance
  }, abbr), hasIcon && /* @__PURE__ */ React.createElement(IconWrapper$1, {
    dimension
  }, Icon2));
  return /* @__PURE__ */ React.createElement(Wrapper$2, {
    size: getSize(),
    ...props2
  }, showTooltip ? /* @__PURE__ */ React.createElement(InverseTooltip$1, {
    anchorClassName: "avatar-tooltip",
    renderContent: () => userName
  }, renderContent()) : renderContent());
};
Avatar.displayName = "Avatar";
const StyledDropDown = styled(Dropdown$3)`
  padding: 8px 0;
  overflow-x: hidden;
  overflow-y: auto;
  ${(p) => p.alignDropdown ? `align-self: ${p.alignDropdown}` : ""};
  max-height: ${(p) => p.dropMaxHeight};
  min-width: 100%;
`;
const SelectWrapper = styled.div`
  box-sizing: border-box;
  position: relative;
  display: flex;
  cursor: pointer;
`;
const MenuAvatar = styled(Avatar)`
  cursor: pointer;
`;
const Menu$1 = React.forwardRef(({
  portalTargetRef,
  children,
  alignDropdown,
  dropMaxHeight = "300px",
  appearance,
  dimension,
  onAvatarSelect,
  ...props2
}, ref) => {
  const [open, setOpen] = React.useState(false);
  const refWrapper = React.useRef(null);
  const [hovered, setHovered] = React.useState("");
  const childrenArray = React.Children.toArray(children);
  const findOptionValue = (option) => {
    if (React.isValidElement(option[0]) && "props" in option[0]) {
      return option[0].props.id;
    }
  };
  const hoverIndex = React.useMemo(() => childrenArray == null ? void 0 : childrenArray.findIndex((child) => {
    if (React.isValidElement(child) && "props" in child) {
      return child.props.id === hovered;
    }
    return -1;
  }), [childrenArray, hovered]);
  const findNextHoverValue = React.useCallback(() => {
    const nextAbledOptionValue = findOptionValue(childrenArray.slice(hoverIndex + 1));
    if (nextAbledOptionValue)
      return nextAbledOptionValue;
    return findOptionValue(childrenArray);
  }, [hoverIndex, childrenArray]);
  const findPrevHoverValue = React.useCallback(() => {
    const sliceInd = hoverIndex === -1 ? void 0 : hoverIndex;
    const prevAbledOptionValue = findOptionValue(childrenArray.slice(0, sliceInd).reverse());
    if (prevAbledOptionValue)
      return prevAbledOptionValue;
    return findOptionValue(childrenArray.slice().reverse());
  }, [hoverIndex, childrenArray]);
  const handleKeyDownItem = (e, onKeyDown) => {
    e.preventDefault();
    const code = keyboardKey.getCode(e);
    switch (code) {
      case keyboardKey.ArrowUp: {
        onKeyDown == null ? void 0 : onKeyDown(e);
        const prevValue = findPrevHoverValue();
        if (!prevValue)
          break;
        setHovered(prevValue);
        break;
      }
      case keyboardKey.ArrowDown: {
        onKeyDown == null ? void 0 : onKeyDown(e);
        const nextValue = findNextHoverValue();
        if (!nextValue)
          break;
        setHovered(nextValue);
        break;
      }
      case keyboardKey[" "]:
      case keyboardKey.Enter: {
        onKeyDown == null ? void 0 : onKeyDown(e);
        onAvatarSelect == null ? void 0 : onAvatarSelect(e);
        setOpen(false);
        refWrapper.current.focus();
        break;
      }
      case keyboardKey.Escape:
      case keyboardKey.Tab: {
        setOpen(false);
        refWrapper.current.focus();
        break;
      }
    }
  };
  const handleClickItem = (e, onClick2) => {
    var _a;
    (_a = refWrapper.current) == null ? void 0 : _a.focus();
    onClick2 == null ? void 0 : onClick2(e);
    onAvatarSelect == null ? void 0 : onAvatarSelect(e);
  };
  const renderChildrenDropDown = () => {
    return React.Children.map(children, (child) => {
      if (!React.isValidElement(child)) {
        return null;
      }
      return React.cloneElement(child, {
        ...child.props,
        hovered: hovered === child.props.id,
        onClick: (e) => handleClickItem(e, child.props.onClick),
        onKeyDown: (e) => handleKeyDownItem(e, child.props.onKeyDown)
      });
    });
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = refWrapper.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    setOpen(false);
  };
  const handleKeyDown = (e) => {
    if (e.key === " " && !open) {
      setOpen(true);
      e.preventDefault();
    }
  };
  const onClick = (e) => {
    setOpen((open2) => !open2);
  };
  return /* @__PURE__ */ React.createElement(SelectWrapper, {
    ref: refSetter(ref, refWrapper),
    role: "button",
    ...props2,
    tabIndex: 0,
    onKeyDown: handleKeyDown,
    onClick
  }, React.Children.count(children) ? /* @__PURE__ */ React.createElement(MenuAvatar, {
    userName: "+" + React.Children.count(children),
    isMenuAvatar: true,
    appearance,
    dimension,
    showTooltip: false
  }) : null, open && /* @__PURE__ */ React.createElement(StyledDropDown, {
    targetRef: portalTargetRef || refWrapper,
    "data-dimension": "m",
    onClickOutside: clickOutside,
    alignDropdown,
    dropMaxHeight
  }, renderChildrenDropDown()));
});
const AvatarsWrapper = styled.div`
  position: relative;
  display: flex;
  flex: 1 1 auto;
  width: 100%;
  white-space: nowrap;
  & > * {
    margin-left: -2px;
  }
  & > *:first-child {
    margin-left: 0;
  }
`;
const MenuItem = styled(DropDownItem$1)`
  flex-flow: nowrap;
  justify-content: flex-start;
  & > button:first-child {
    margin-right: 8px;
  }
`;
const AvatarGroup = ({
  items,
  dimension = "xl",
  appearance = "light",
  onAvatarSelect,
  ...props2
}) => {
  const wrapperRef = React.useRef(null);
  const [visibleItems, setVisibleItems] = React.useState(items.length);
  const [hiddenItems, setHiddenItems] = React.useState(0);
  const WIDTH = {
    xs: 24,
    s: 32,
    m: 40,
    l: 48,
    xl: 56
  };
  React.useLayoutEffect(() => {
    if (wrapperRef.current) {
      const observer = observeRect(wrapperRef.current, (rect) => {
        const wrapperWidth = (rect == null ? void 0 : rect.width) || 0;
        let validContent = 2, visibleItems2 = 0, hiddenItems2 = 0;
        while (validContent + WIDTH[dimension] < wrapperWidth) {
          validContent = validContent + WIDTH[dimension];
          visibleItems2++;
        }
        visibleItems2 = visibleItems2 > items.length ? items.length : visibleItems2;
        visibleItems2 = visibleItems2 === items.length ? visibleItems2 : visibleItems2 - 1;
        hiddenItems2 = items.length - visibleItems2;
        setVisibleItems(visibleItems2);
        setHiddenItems(hiddenItems2);
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [wrapperRef.current]);
  const visible = items.slice(0, visibleItems);
  const hidden = items.slice(visibleItems, visibleItems + hiddenItems);
  return /* @__PURE__ */ React.createElement(AvatarsWrapper, {
    ref: wrapperRef,
    ...props2
  }, items.length === 1 && /* @__PURE__ */ React.createElement(Avatar, {
    ...items[0],
    dimension
  }), items.length > 1 && visible.map((item, index) => {
    const id = item.id || uid();
    const last = index === items.length - 1;
    const handleClick = (e) => {
      item.onClick && item.onClick(e);
      onAvatarSelect == null ? void 0 : onAvatarSelect(e);
    };
    const handleKeyDown = (e) => {
      item.onKeyDown && item.onKeyDown(e);
      onAvatarSelect == null ? void 0 : onAvatarSelect(e);
    };
    return /* @__PURE__ */ React.createElement(Avatar, {
      ...item,
      key: id,
      id,
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      dimension,
      appearance,
      group: !last,
      status: void 0
    });
  }), hiddenItems > 0 ? /* @__PURE__ */ React.createElement(Menu$1, {
    alignDropdown: "flex-start",
    appearance,
    dimension,
    onAvatarSelect
  }, hidden.map(({ id: idProp, onClick, onKeyDown, ...item }) => {
    const id = idProp || uid();
    return /* @__PURE__ */ React.createElement(MenuItem, {
      role: "option",
      key: id,
      id,
      value: item.userName,
      dimension: "m",
      onClick,
      onKeyDown
    }, /* @__PURE__ */ React.createElement(Avatar, {
      ...item,
      dimension: "xs",
      appearance,
      showTooltip: false,
      status: void 0
    }), item.userName);
  })) : null);
};
AvatarGroup.displayName = "AvatarGroup";
const Separator = styled(ReactComponent$2)`
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }
  flex-shrink: 0;
  margin-left: 8px;
`;
const Wrapper$1 = styled.ol`
  position: relative;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  flex-wrap: nowrap;
  width: 100%;
  max-width: 800px;
  list-style: none;
  padding: 0;
  & > li {
    margin-left: 4px;
  }
  & > li:first-child {
    margin-left: 0;
  }

  overflow-x: ${({ mobile }) => mobile ? "scroll" : "visible"};
  &::-webkit-scrollbar {
    width: 0 !important;
    height: 0 !important;
  }

  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  scrollbar-width: none;
  scrollbar-height: none;
`;
const Content$1 = styled.div`
  display: flex;
  align-items: center;
`;
const InverseTooltip = (props2) => {
  const themeContext = React.useContext(ThemeContext);
  return /* @__PURE__ */ React.createElement(Tooltip, {
    ...props2,
    theme: themeContext.name == "dark" ? LIGHT_THEME : DARK_THEME
  });
};
const Crumb = styled.li`
  display: flex;
  align-items: center;
  white-space: nowrap;
  ${typography$1["Body/Body 1 Short"]}

  [data-dimension='m'] & {
    ${typography$1["Body/Body 2 Short"]}
  }
  [data-dimension='s'] & {
    ${typography$1["Caption/Caption 1"]}
  }
`;
const Content = styled.span`
  width: 100%;
  height: 100%;
  padding: 4px;
  display: flex;
  align-items: center;
`;
const CrumbAnchor = styled.a`
  display: flex;
  align-items: center;
  text-decoration: none;
  position: relative;
  color: ${({ theme }) => theme.color.text.secondary};

  [aria-current='page'] & {
    pointer-events: none;
  }

  &:hover {
    color: ${({ theme }) => theme.color.basic.hover};
  }
  &:active {
    color: ${({ theme }) => theme.color.basic.press};
  }

  &:focus {
    &:before {
      position: absolute;
      content: '';
      border: 2px solid ${({ theme }) => theme.color.basic.hover};
      border-radius: 4px;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
    }
  }
  &:focus,
  & > ${Content} {
    outline: none;
  }
`;
const Breadcrumb = React.forwardRef(({ text, url = "#", linkAs, linkProps, children, ...props2 }, ref) => {
  const tooltip = text.length > 40;
  const crumbRef = React.useRef(null);
  return tooltip ? /* @__PURE__ */ React.createElement(Crumb, {
    ref: refSetter(ref, crumbRef),
    ...props2
  }, /* @__PURE__ */ React.createElement(CrumbAnchor, {
    href: url,
    as: linkAs,
    ...linkProps
  }, /* @__PURE__ */ React.createElement(Content, {
    tabIndex: -1,
    role: "link"
  }, /* @__PURE__ */ React.createElement(InverseTooltip, {
    renderContent: () => text
  }, text.slice(0, 37) + "..."), children))) : /* @__PURE__ */ React.createElement(Crumb, {
    ref: refSetter(ref, crumbRef),
    ...props2
  }, /* @__PURE__ */ React.createElement(CrumbAnchor, {
    href: url,
    as: linkAs,
    ...linkProps
  }, /* @__PURE__ */ React.createElement(Content, {
    tabIndex: -1,
    role: "link"
  }, text, children)));
});
const measureCrumb = (text, dimension, last, callback) => {
  const container = document.createElement("div");
  container.style.position = "absolute";
  container.style.visibility = "hidden";
  container.style.left = "-10000px";
  container.style.top = "-100000px";
  document.body.appendChild(container);
  const iconSize = dimension === "l" ? 20 : 16;
  const element = /* @__PURE__ */ React.createElement(ThemeProvider, {
    theme: LIGHT_THEME
  }, /* @__PURE__ */ React.createElement(Wrapper$1, {
    "data-dimension": dimension
  }, /* @__PURE__ */ React.createElement(Crumb, null, /* @__PURE__ */ React.createElement(CrumbAnchor, {
    href: "#"
  }, /* @__PURE__ */ React.createElement(Content, {
    tabIndex: -1,
    role: "link"
  }, text, !last && /* @__PURE__ */ React.createElement(Separator, {
    width: iconSize,
    height: iconSize,
    "aria-hidden": true
  }))))));
  ReactDOM.render(element, container, () => {
    var _a;
    const width2 = container.clientWidth;
    callback(width2);
    ReactDOM.unmountComponentAtNode(container);
    (_a = container.parentNode) == null ? void 0 : _a.removeChild(container);
  });
};
const Option = styled.a`
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;
  text-decoration: none;

  &,
  &:visited,
  &:hover,
  &:active,
  &:focus {
    color: inherit;
  }
`;
const Menu = styled(OverflowMenu$1)`
  margin-left: 4px;
`;
const MenuButton = ({ options }) => {
  return /* @__PURE__ */ React.createElement(Menu, {
    dimension: "s"
  }, options.map(({ text, url }) => {
    const tooltip = text.length > 40;
    const renderText = () => tooltip ? /* @__PURE__ */ React.createElement(InverseTooltip, {
      style: { marginTop: "8px" },
      renderContent: () => text
    }, text.slice(0, 37) + "...") : text;
    return /* @__PURE__ */ React.createElement(DropDownItem$1, {
      key: "text",
      role: "option",
      value: text,
      dimension: "s"
    }, /* @__PURE__ */ React.createElement(Option, {
      href: url
    }, renderText()));
  }));
};
const Breadcrumbs = ({ items, dimension = "l", mobile, ...props2 }) => {
  const crumbsWithRef = items.map((item) => ({
    ...item,
    ref: React.createRef()
  }));
  const iconSize = dimension === "l" ? 20 : 16;
  const wrapperRef = React.useRef(null);
  const contentRef = React.useRef(null);
  const contentWidthRef = React.useRef(0);
  const [_, update] = React.useState({});
  const [crumbs, setCrumbs] = React.useState({ visible: crumbsWithRef.length - 2, hidden: 0 });
  const visibleItems = mobile ? crumbsWithRef.slice(1, crumbsWithRef.length - 1) : crumbsWithRef.slice(1 + crumbs.hidden, -1);
  const hiddenItems = mobile ? [] : crumbsWithRef.slice(1, -(1 + crumbs.visible));
  React.useEffect(() => {
    var _a;
    mobile && ((_a = crumbsWithRef[crumbsWithRef.length - 1].ref.current) == null ? void 0 : _a.scrollIntoView({
      behavior: "smooth",
      inline: "center",
      block: "nearest"
    }));
  }, [items, mobile]);
  React.useLayoutEffect(() => {
    if (!mobile) {
      crumbsWithRef.forEach((item, index) => {
        measureCrumb(item.text, dimension, index === crumbsWithRef.length - 1, (width2) => {
          item.width = width2;
        });
      });
    }
  }, [crumbsWithRef, mobile, _]);
  React.useLayoutEffect(() => {
    if (wrapperRef.current && !mobile) {
      const observer = observeRect(wrapperRef.current, (rect) => {
        const wrapperWidth = (rect == null ? void 0 : rect.width) || 0;
        let contentWidth = (crumbsWithRef[0].width || 0) + (crumbsWithRef[crumbsWithRef.length - 1].width || 0);
        let visibleCrumbsCounter = 0;
        const restCrumbs = crumbsWithRef.slice(1, crumbsWithRef.length - 1).reverse();
        restCrumbs.forEach((item) => {
          contentWidth += item.width || 0;
          if (contentWidth <= wrapperWidth) {
            visibleCrumbsCounter++;
          }
        });
        const hiddenCrumbsCounter = crumbsWithRef.length - 2 - visibleCrumbsCounter;
        if (visibleCrumbsCounter !== crumbs.visible || hiddenCrumbsCounter !== crumbs.hidden) {
          setCrumbs({ visible: visibleCrumbsCounter, hidden: hiddenCrumbsCounter });
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [wrapperRef.current, mobile, _]);
  React.useLayoutEffect(() => {
    if (contentRef.current && !mobile) {
      const observer = observeRect(contentRef.current, (rect) => {
        const width2 = (rect == null ? void 0 : rect.width) || 0;
        if (contentWidthRef.current !== width2) {
          contentWidthRef.current = width2;
          update({});
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [contentRef.current, mobile]);
  const renderFirstItem = () => {
    const item = crumbsWithRef[0];
    const id = item.id || uid();
    return /* @__PURE__ */ React.createElement(Breadcrumb, {
      key: id,
      ...item
    }, /* @__PURE__ */ React.createElement(Separator, {
      width: iconSize,
      height: iconSize,
      "aria-hidden": true
    }));
  };
  const renderLastItem = () => {
    const item = crumbsWithRef[crumbsWithRef.length - 1];
    const id = item.id || uid();
    return /* @__PURE__ */ React.createElement(Breadcrumb, {
      key: id,
      "aria-current": "page",
      ...item
    });
  };
  const renderVisibleItems = () => {
    return visibleItems.map((item) => {
      const id = item.id || uid();
      return /* @__PURE__ */ React.createElement(Breadcrumb, {
        key: id,
        ...item
      }, /* @__PURE__ */ React.createElement(Separator, {
        width: iconSize,
        height: iconSize,
        "aria-hidden": true
      }));
    });
  };
  const renderHiddenItems = () => {
    return hiddenItems.length ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(MenuButton, {
      options: hiddenItems,
      "aria-label": ""
    }), /* @__PURE__ */ React.createElement(Separator, {
      width: iconSize,
      height: iconSize,
      "aria-hidden": true
    })) : null;
  };
  return /* @__PURE__ */ React.createElement(Wrapper$1, {
    ref: wrapperRef,
    "data-dimension": dimension,
    role: "list",
    mobile,
    ...props2
  }, /* @__PURE__ */ React.createElement(Content$1, {
    ref: contentRef
  }, items.length > 1 ? renderFirstItem() : null, renderHiddenItems(), renderVisibleItems(), renderLastItem()));
};
Breadcrumbs.displayName = "Breadcrumbs";
const Text = styled.span``;
const Circle = styled.div``;
const cssDefault = css`
  > ${Text} {
    color: ${(p) => p.theme.color.text.primary};
  }
  > ${Circle} {
    svg {
      path {
        fill: ${(p) => p.theme.color.text.secondary};
      }
    }
  }
`;
const StatusContainer = styled.div`
  display: inline-flex;
  align-items: center;
  flex-direction: ${(p) => p.displayRight ? "row" : "row-reverse"};
  height: ${(p) => p.dimension === "m" ? "24px" : "20px"};
  ${(p) => p.dimension === "m" ? typography$1["Body/Body 1 Long"] : typography$1["Body/Body 2 Long"]}
  > ${Circle} {
    width: ${(p) => p.dimension === "m" ? "20px" : "16px"};
    height: ${(p) => p.dimension === "m" ? "20px" : "16px"};
    margin: ${(p) => p.displayRight ? "0 10px 0 0" : "0 0 0 10px"};
  }
  ${(p) => p.cssMixin || cssDefault}
`;
const StatusIndicator = ({
  dimension = "m",
  displayRight = true,
  icon,
  cssMixin,
  text
}) => {
  return /* @__PURE__ */ React.createElement(StatusContainer, {
    dimension,
    displayRight,
    cssMixin
  }, icon && /* @__PURE__ */ React.createElement(Circle, null, icon), /* @__PURE__ */ React.createElement(Text, null, text));
};
StatusIndicator.displayName = "StatusIndicator";
const IconContainer = styled.div``;
const ButtonContainer = styled.div``;
const StyledSpinner = styled(Spinner)`
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: ${(p) => p.dimension === "m" ? "20px" : "16px"};
  height: ${(p) => p.dimension === "m" ? "20px" : "16px"};
`;
const loadingKeyframes = keyframes`
  to {
    background-position: 315px 0, 0 0, 0 190px, 50px 195px;
  }
`;
const skeletonMixin = css`
  cursor: progress;
  background-image: linear-gradient(0.25turn, transparent, #fff, transparent), linear-gradient(#eee, #eee),
    radial-gradient(38px circle at 19px 19px, #eee 50%, transparent 51%), linear-gradient(#eee, #eee);
  background-repeat: no-repeat;
  background-size: 315px 250px, 315px 180px, 100px 100px, 225px 30px;
  background-position: -315px 0, 0 0, 0 190px, 50px 195px;
  animation: ${loadingKeyframes} 1.5s infinite;
`;
const StyledButton = styled.button`
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  flex-direction: ${(p) => p.displayRight ? "row-reverse" : "row"};
  align-items: center;
  vertical-align: center;
  appearance: none;
  border: none;
  background: transparent;

  > ${IconContainer} {
    ${(p) => p.skeleton && skeletonMixin};
    border-radius: ${(p) => p.skeleton ? "50%" : ""};
    svg {
      visibility: ${(p) => p.skeleton || p.$loading ? "hidden" : "visible"};
      path {
        fill: ${(p) => p.appearance === "secondary" ? p.theme.color.text.primary : p.theme.color.basic.primary};
      }
    }
  }
  > ${ButtonContainer} {
    ${(p) => p.skeleton && skeletonMixin};
    border-radius: ${(p) => p.skeleton ? "4px" : ""};
    span {
      visibility: ${(p) => p.skeleton || p.$loading ? "hidden" : "visible"};
    }
  }
  ${(p) => p.dimension === "m" ? typography$1["Button/Button 1"] : typography$1["Button/Button 2"]}

  color: ${(p) => p.appearance === "secondary" ? p.theme.color.text.primary : p.theme.color.basic.primary};

  &:focus,
  &:hover {
    cursor: pointer;
    color: ${(p) => p.theme.color.basic.hover};
    > ${IconContainer} {
      svg {
        path {
          fill: ${(p) => p.theme.color.basic.hover};
        }
      }
    }
  }

  &:active {
    color: ${(p) => p.theme.color.basic.press};
    > ${IconContainer} {
      svg {
        path {
          fill: ${(p) => p.theme.color.basic.press};
        }
      }
    }
  }

  &:disabled {
    cursor: not-allowed;
    color: ${(p) => p.theme.color.text.tertiary};
  }
  > ${IconContainer} {
    width: ${(p) => p.dimension === "m" ? p.skeleton ? "24px" : "20px" : p.skeleton ? "20px" : "16px"};
    height: ${(p) => p.dimension === "m" ? p.skeleton ? "24px" : "20px" : p.skeleton ? "20px" : "16px"};
    margin: ${(p) => p.displayRight ? "0 0 0 10px" : "0 10px 0 0"};
  }
`;
const TextButton = React.forwardRef(({
  dimension = "m",
  appearance = "primary",
  icon,
  type = "button",
  text,
  displayRight = false,
  loading = false,
  skeleton = false,
  ...props2
}, ref) => {
  return /* @__PURE__ */ React.createElement(StyledButton, {
    ...props2,
    ref,
    dimension,
    appearance,
    displayRight,
    type,
    $loading: loading,
    skeleton
  }, loading && /* @__PURE__ */ React.createElement(StyledSpinner, {
    dimension
  }), icon && /* @__PURE__ */ React.createElement(IconContainer, null, icon), /* @__PURE__ */ React.createElement(ButtonContainer, null, /* @__PURE__ */ React.createElement("span", null, text)));
});
TextButton.displayName = "TextButton";
const PADDING_LEFT_M = 40;
const PADDING_LEFT_S = 36;
const PADDING_VERTICAL_M = 16;
const PADDING_VERTICAL_S = 12;
const PADDING_RIGHT = 16;
const ICON_SIZE_M = 24;
const ICON_SIZE_S = 20;
const Chevron = styled(ReactComponent$2)`
  transition: all 0.3s;
  flex-shrink: 0;
  margin-right: 16px;
  cursor: pointer;
  & path {
    fill: ${(p) => p.theme.color.text.secondary};
  }

  &:hover {
    & path {
      fill: ${(p) => p.theme.color.basic.hover};
    }
  }
`;
const TreeItem$1 = styled.ul`
  list-style: none;
  margin: 0;
  padding: 0;
  padding-left: ${(p) => p.dimension === "m" ? `${PADDING_LEFT_M}px` : `${PADDING_LEFT_S}px`};
`;
const Wrapper = styled.li`
  color: ${(p) => p.theme.color.text.primary};
  & ${Chevron} {
    width: ${(p) => p.dimension === "m" ? `${ICON_SIZE_M}px` : `${ICON_SIZE_S}px`};
    height: ${(p) => p.dimension === "m" ? `${ICON_SIZE_M}px` : `${ICON_SIZE_S}px`};
    transform: ${(p) => p.isOpened ? "rotate(90deg)" : "rotate(0deg)"};
  }
  ${(p) => p.dimension === "m" ? typography$1["Body/Body 1 Short"] : typography$1["Body/Body 2 Short"]};
  display: flex;
  align-items: flex-start;
  padding: ${(p) => p.dimension === "m" ? `${PADDING_VERTICAL_M / 2}px ${PADDING_RIGHT}px ${PADDING_VERTICAL_M / 2}px ${p.level * PADDING_LEFT_M}px` : `${PADDING_VERTICAL_S / 2}px ${PADDING_RIGHT}px ${PADDING_VERTICAL_S / 2}px ${p.level * PADDING_LEFT_S}px`};
`;
const IconWrapper = styled.div`
  margin-right: 8px;
  flex-shrink: 0;
  width: ${(p) => p.dimension === "m" ? `${ICON_SIZE_M}px` : `${ICON_SIZE_S}px`};
  height: ${(p) => p.dimension === "m" ? `${ICON_SIZE_M}px` : `${ICON_SIZE_S}px`};
  > svg {
    width: 100%;
    height: 100%;
  }
`;
const StyledCheckbox = styled(Checkbox)`
  margin: 2px;
  margin-right: 10px;
  flex-shrink: 0;
`;
const TitleContent$1 = styled.div`
  padding-top: 2px;
`;
const SelectTreeNode = ({
  dimension,
  node,
  level,
  onChange,
  onButtonClick,
  onKeyDown,
  expandAll
}) => {
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Wrapper, {
    isOpened: node.expanded,
    dimension,
    level,
    onKeyDown
  }, node.children && /* @__PURE__ */ React__default.createElement(Chevron, {
    "data-key": node.id,
    onClick: onButtonClick
  }), "status" in node && /* @__PURE__ */ React__default.createElement(StyledCheckbox, {
    id: node.id,
    "data-key": node.id,
    dimension,
    indeterminate: node.status === "indeterminate",
    checked: node.status !== "unchecked",
    onChange
  }), node.icon && /* @__PURE__ */ React__default.createElement(IconWrapper, {
    dimension
  }, node.icon), /* @__PURE__ */ React__default.createElement(TitleContent$1, null, node.label)), node.expanded && node.children && node.children.map((child, i) => {
    return /* @__PURE__ */ React__default.createElement(TreeItem$1, {
      key: [node.id, i].join("/"),
      dimension
    }, /* @__PURE__ */ React__default.createElement(SelectTreeNode, {
      key: node.id,
      dimension,
      node: child,
      level: level + 1,
      expandAll,
      onKeyDown,
      onButtonClick,
      onChange
    }));
  }));
};
const defineBranchStatus = (childrenStatus) => {
  if (childrenStatus.length === 0)
    return void 0;
  if (childrenStatus.every((status) => status === "unchecked"))
    return "unchecked";
  if (childrenStatus.every((status) => status === "checked"))
    return "checked";
  return "indeterminate";
};
const updateNodeStatus = (root) => {
  const checkedBranches = root.map((branch) => {
    let branchStatus;
    if (branch.children) {
      branchStatus = updateNodeStatus(branch.children);
      if ("status" in branch && branchStatus) {
        branch.status = branchStatus;
        branch.checked = branchStatus === "checked" ? true : branchStatus === "indeterminate" ? true : false;
      }
    } else {
      if ("status" in branch) {
        branchStatus = branch.status;
        branch.checked = branchStatus === "checked" ? true : branchStatus === "indeterminate" ? true : false;
      }
    }
    return branchStatus;
  }).filter((item) => item);
  return defineBranchStatus(checkedBranches);
};
const checkParent = (root, node) => {
  for (const branch of root) {
    if (branch.children) {
      const foundNode = branch.children.find((child) => child.id === node.id);
      if (foundNode) {
        if ("status" in branch) {
          branch.status = "checked";
          branch.checked = true;
        }
        return true;
      } else {
        if (checkParent(branch.children, node)) {
          if ("status" in branch) {
            branch.status = "checked";
            branch.checked = true;
          }
          return true;
        }
      }
    }
  }
  return false;
};
const setNodeStatus = (list) => {
  list.forEach((node) => {
    if ("checked" in node) {
      node.status = node.checked ? "checked" : "unchecked";
    }
    if (node.children) {
      setNodeStatus(node.children);
    }
  });
};
const TreeItem = styled.ul`
  list-style: none;
  margin: 0;
  padding: 0;
`;
const SelectTree = ({ list, dimension = "m", expandAll = false, onChange, ...props2 }) => {
  const [handleGuard, setHandleGuard] = React__default.useState(false);
  const handleExpandAll = (node) => {
    if (node.expanded === void 0 && node.children) {
      node.expanded = expandAll;
      if (node.children) {
        node.children.forEach(handleExpandAll);
      }
    }
  };
  const handleChangeList = (type, e) => {
    const checked = e.target.checked;
    const key = e.target.getAttribute("data-key");
    const traverseNodes = (node) => {
      if (node.id === key) {
        if (type === "buttonclick") {
          const expanded = node.expanded;
          node.expanded = !expanded;
        }
        if (type === "inputchange") {
          node.status = checked ? "checked" : "unchecked";
          if (checked) {
            checkParent(list, node);
          }
          if (node.children) {
            node.children.forEach(checkAllNodes);
          }
        }
        if (type === "keydown") {
          const code = keyboardKey.getCode(e);
          if (code === keyboardKey.Enter || code === keyboardKey[" "]) {
            node.expanded = true;
          } else if (code === keyboardKey.Escape) {
            node.expanded = false;
          }
        }
      }
      if (node.children) {
        node.children.forEach(traverseNodes);
      }
    };
    const checkAllNodes = (node) => {
      if ("status" in node) {
        node.status = checked ? "checked" : "unchecked";
        node.checked = checked;
      }
      if (node.children) {
        node.children.forEach(checkAllNodes);
      }
    };
    list.forEach(traverseNodes);
    onChange == null ? void 0 : onChange([...list]);
  };
  const handleButtonClick = React__default.useCallback((e) => {
    handleChangeList("buttonclick", e);
  }, []);
  const handleChange = React__default.useCallback((e) => {
    handleChangeList("inputchange", e);
  }, []);
  const handleKeyDown = React__default.useCallback((e) => {
    handleChangeList("keydown", e);
  }, []);
  React__default.useEffect(() => {
    if (expandAll) {
      list.forEach(handleExpandAll);
      onChange == null ? void 0 : onChange([...list]);
    }
  }, [expandAll]);
  if (!handleGuard) {
    setNodeStatus(list);
    setHandleGuard(true);
  }
  updateNodeStatus(list);
  return /* @__PURE__ */ React__default.createElement(TreeItem, {
    ...props2
  }, list.map((node) => {
    return /* @__PURE__ */ React__default.createElement(SelectTreeNode, {
      key: node.id,
      node,
      onChange: handleChange,
      dimension,
      expandAll,
      onButtonClick: handleButtonClick,
      onKeyDown: handleKeyDown,
      level: 0
    });
  }));
};
SelectTree.defaultProps = { dimension: "m" };
SelectTree.displayName = "SelectTree";
const RESIZER_WIDTH = "17px";
const ResizerWrapper = styled.div`
  position: absolute;
  right: -8px;
  z-index: 1;
  top: 0;
  width: ${RESIZER_WIDTH};
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  cursor: ${({ disabled }) => disabled ? "pointer" : "col-resize"};

  padding: 12px 0 11px 0;
  [data-dimension='s'] & {
    padding: 8px 0 7px 0;
  }
  [data-dimension='l'] & {
    padding: 14px 0 13px 0;
  }
  [data-dimension='xl'] & {
    padding: 18px 0 17px 0;
  }
`;
const Resizer = styled.div`
  box-sizing: border-box;
  width: 1px;
  height: 100%;
  background: ${({ theme }) => theme.color.basic.disable};
`;
function RowWidthResizer(props2) {
  const { width: startWidth, name, disabled, resizerState, onChange } = props2;
  const node = React.useRef(null);
  const [width2, setWidth] = React.useState(startWidth);
  const [isTaken, setTaken] = React.useState(false);
  const [clientX, setClientX] = React.useState(null);
  React.useEffect(() => {
    setWidth(startWidth);
  }, [resizerState]);
  React.useLayoutEffect(() => {
    if (startWidth !== width2)
      setWidth(startWidth);
  }, [startWidth]);
  React.useEffect(() => {
    if (!disabled) {
      document.addEventListener("mousedown", handleMouseDown);
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
      return () => {
        document.removeEventListener("mousedown", handleMouseDown);
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
      };
    }
  });
  const handleMouseDown = (e) => {
    if (e.target === node.current) {
      e.preventDefault();
      setWidth(width2);
      setTaken(true);
      setClientX(e.clientX);
    }
  };
  const handleMouseMove = (e) => {
    if (isTaken && clientX !== null) {
      e.preventDefault();
      const newWidth = width2 - (clientX - e.clientX);
      onChange({ name, width: newWidth, mouseUp: false });
    }
  };
  const handleMouseUp = (e) => {
    if (isTaken && clientX !== null) {
      e.preventDefault();
      const newWidth = width2 - (clientX - e.clientX);
      setTaken(false);
      onChange({ name, width: newWidth, mouseUp: true });
      setWidth(newWidth);
      setClientX(e.clientX);
    }
  };
  return /* @__PURE__ */ React.createElement(ResizerWrapper, {
    ref: node,
    disabled
  }, /* @__PURE__ */ React.createElement(Resizer, null));
}
const activeFilter = css`
  & *[fill^='#'] {
    fill: ${({ theme, isFilterOpen }) => isFilterOpen ? theme.color.basic.press : theme.color.basic.primary};
  }
`;
const ButtonComponent = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  position: relative;
  cursor: pointer;
  border: 0;
  outline: none;
  background: transparent;
  -webkit-tap-highlight-color: transparent;
  padding: 0;
  margin: 2px 0;
`;
const ButtonContent = styled.span`
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;

  & svg {
    flex-shrink: 0;
    width: ${({ iconSize }) => iconSize};
    height: ${({ iconSize }) => iconSize};
  }

  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }

  &:hover {
    *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }

  ${({ isFilterActive }) => isFilterActive && activeFilter}
`;
const Button = React.forwardRef(({ dimension, renderFilterIcon, isFilterActive, isFilterOpen, ...props2 }, ref) => {
  const iconSize = dimension === "s" || dimension === "m" ? "16px" : "20px";
  return /* @__PURE__ */ React.createElement(ButtonComponent, {
    ref,
    type: "button",
    ...props2
  }, /* @__PURE__ */ React.createElement(ButtonContent, {
    isFilterActive,
    isFilterOpen,
    iconSize
  }, renderFilterIcon ? renderFilterIcon() : /* @__PURE__ */ React.createElement(ReactComponent$3K, {
    "aria-hidden": true
  })));
});
const Filter = React.forwardRef(({
  renderFilter,
  renderFilterIcon,
  onFilterMenuClickOutside,
  onFilterMenuOpen,
  onFilterMenuClose,
  cellAlign,
  targetRef,
  ...props2
}, ref) => {
  const [menuOpened, setMenuOpened] = React.useState(false);
  const [isFilterActive, setFilterActive] = React.useState(false);
  const btnRef = React.useRef(null);
  const reverseMenu = () => {
    setMenuOpened((prevOpened) => {
      prevOpened ? onFilterMenuClose == null ? void 0 : onFilterMenuClose() : onFilterMenuOpen == null ? void 0 : onFilterMenuOpen();
      return !prevOpened;
    });
  };
  const closeMenu = () => {
    var _a;
    setMenuOpened(false);
    onFilterMenuClose == null ? void 0 : onFilterMenuClose();
    (_a = btnRef.current) == null ? void 0 : _a.focus();
  };
  const clickOutside = (e) => {
    var _a;
    if (e.target && ((_a = btnRef.current) == null ? void 0 : _a.contains(e.target))) {
      return;
    }
    onFilterMenuClickOutside == null ? void 0 : onFilterMenuClickOutside({ closeMenu, setFilterActive }, e);
  };
  const handleBtnKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.ArrowDown || code === keyboardKey.Enter || code === keyboardKey[" "]) {
      setMenuOpened(true);
      onFilterMenuOpen == null ? void 0 : onFilterMenuOpen();
      e.preventDefault();
    }
  };
  const handleMenuKeyDown = (e) => {
    const code = keyboardKey.getCode(e);
    if (code === keyboardKey.Escape || code === keyboardKey.Tab) {
      closeMenu();
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button, {
    ref: refSetter(ref, btnRef),
    onKeyDown: handleBtnKeyDown,
    onClick: reverseMenu,
    "aria-expanded": menuOpened,
    "aria-haspopup": menuOpened,
    isFilterActive,
    isFilterOpen: menuOpened,
    renderFilterIcon,
    ...props2
  }), menuOpened && /* @__PURE__ */ React.createElement(Dropdown$3, {
    role: "listbox",
    targetRef,
    alignSelf: cellAlign === "left" ? "flex-end" : "flex-start",
    onClickOutside: clickOutside,
    onKeyDown: handleMenuKeyDown
  }, renderFilter({ closeMenu, setFilterActive })));
});
const getScrollbarSize = () => {
  let scrollBarWidth = 0;
  const scrollbox = document.createElement("div");
  scrollbox.innerHTML = `Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diem 
    nonummy nibh euismod tincidunt ut lacreet dolore magna aliguam erat volutpat. 
    Ut wisis enim ad minim veniam, quis nostrud exerci tution ullamcorper suscipit 
    lobortis nisl ut aliquip ex ea commodo consequat.`;
  scrollbox.style.overflow = "scroll";
  scrollbox.style.fontSize = "14px";
  scrollbox.style.height = "50px";
  scrollbox.style.maxHeight = "50px";
  scrollbox.style.width = "100px";
  scrollbox.style.position = "absolute";
  scrollbox.style.top = "-100000px";
  scrollbox.style.left = "-100000px";
  document.body.appendChild(scrollbox);
  scrollBarWidth = scrollbox.offsetWidth - scrollbox.clientWidth;
  document.body.removeChild(scrollbox);
  return scrollBarWidth;
};
const SCROLLBAR = getScrollbarSize() || 16;
const cellStyle = css`
  [data-dimension='s'] & {
    padding: 6px 13px 5px 12px;
  }

  [data-dimension='m'] & {
    padding: 10px 13px 9px 12px;
  }

  [data-dimension='l'] & {
    padding: 12px 17px 11px 16px;
  }

  [data-dimension='xl'] & {
    padding: 16px 17px 15px 16px;
  }
`;
const rowStyle = css`
  ${typography$1["Body/Body 2 Short"]}

  [data-dimension='l'] & {
    ${typography$1["Body/Body 1 Short"]}
  }
  [data-dimension='xl'] & {
    ${typography$1["Body/Body 1 Short"]}
  }
`;
const headerStyle = css`
  ${typography$1["Subtitle/Subtitle 3"]}

  [data-dimension='l'] & {
    ${typography$1["Subtitle/Subtitle 2"]}
  }
  [data-dimension='xl'] & {
    ${typography$1["Subtitle/Subtitle 2"]}
  }
`;
const extraTextStyle = css`
  ${typography$1["Caption/Caption 1"]}
  [data-dimension='l'] & {
    ${typography$1["Body/Body 2 Long"]}
  }
  [data-dimension='xl'] & {
    ${typography$1["Body/Body 2 Long"]}
  }
  color: ${({ theme }) => theme.color.text.secondary};
`;
const singleLineTitle = css`
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const multiLineTitle = css`
  display: -webkit-inline-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};
  overflow: hidden;
`;
const disabledRow = css`
  color: ${({ theme }) => theme.color.text.tertiary};
  pointer-events: none;
`;
const underlineRow = css`
  border-bottom: 1px solid ${({ theme }) => theme.color.basic.disable};
`;
const rowBackground = css`
  [data-greyheader='true'] & {
    background: ${({ theme }) => theme.color.background.tertiary};
  }
  [data-selected='true'] & {
    background: ${({ theme }) => theme.color.special.softBlue};
  }
  [data-error='true'] & {
    background: ${({ theme }) => theme.color.background.surfaceDanger};
  }
  [data-success='true'] & {
    background: ${({ theme }) => theme.color.background.surfaceSuccess};
  }
  [data-disabled='true'] & {
    background: ${({ theme }) => theme.color.background.primary};
  }
`;
const overflowMenuStyle = css`
  [data-dimension='s'] && {
    width: 31px;
    height: 31px;
    padding: 0;
    left: ${({ $offset }) => `${$offset - 32}px`};
  }
  [data-dimension='m'] && {
    width: 39px;
    height: 39px;
    padding: 4px 4px 3px 3px;
    left: ${({ $offset }) => `${$offset - 39}px`};
  }
  [data-dimension='l'] && {
    width: 47px;
    height: 47px;
    padding: 6px 6px 5px 5px;
    left: ${({ $offset }) => `${$offset - 47}px`};
  }
  [data-dimension='xl'] && {
    width: 55px;
    height: 55px;
    padding: 10px 10px 9px 9px;
    left: ${({ $offset }) => `${$offset - 55}px`};
  }
`;
const TableContainer = styled.div`
  position: relative;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  background: ${({ theme }) => theme.color.background.primary};
`;
const StickyWrapper = styled.div`
  display: flex;
  position: sticky;
  left: 0;
  z-index: 5;
  background: ${({ theme }) => theme.color.background.primary};
  ${rowBackground}
  transition: box-shadow 0.3s;
  [data-shadow='true'] & {
    box-shadow: 4px 0px 12px rgba(138, 150, 168, 0.16);
  }
`;
const OverflowMenuWrapper = styled.div`
  box-sizing: border-box;
  display: flex;
  align-items: center;
  position: absolute;
  z-index: 5;
  background: ${({ theme }) => theme.color.background.primary};
  ${rowBackground}
  ${overflowMenuStyle}
  visibility: hidden;
  &:hover {
    visibility: visible;
  }
`;
const Filler = styled.div`
  display: flex;
  flex: 1 1 auto;
  width: unset;
`;
const HeaderWrapper = styled.div`
  box-sizing: border-box;
  position: relative;
  display: flex;
  flex: 0 0 auto;
  flex-direction: column;

  [data-verticalscroll='true'] && {
    &:after {
      position: absolute;
      content: '';
      box-sizing: border-box;
      top: 0;
      right: 0;
      height: 100%;
      background: ${({ theme, greyHeader }) => greyHeader ? theme.color.background.tertiary : theme.color.background.primary};
      width: ${({ scrollbar }) => scrollbar}px;
      border-bottom: 1px solid ${({ theme }) => theme.color.basic.disable};
    }
  }
`;
const Header = styled.div`
  box-sizing: border-box;
  display: flex;
  flex: 0 0 auto;
  overflow-x: hidden;
  [data-verticalscroll='true'] & {
    overflow-y: scroll;
  }
  [data-greyheader='true'] & {
    background: ${({ theme }) => theme.color.background.tertiary};
  }
  ${headerStyle}
  transform: translateZ(0);

  & > * {
    border-bottom: 1px solid ${({ theme }) => theme.color.basic.disable};
  }
`;
const ScrollTableBody = styled.div`
  display: flex;
  flex-direction: column;
  overflow: auto;
  flex: 1 1 auto;
`;
const ExpandIcon = styled(ReactComponent)`
  display: flex;
  flex-shrink: 0;
  width: 100%;
  height: 100%;
  transition: transform 0.3s ease-in-out;
  transform: rotate(0deg);
  cursor: pointer;
  & *[fill^='#'] {
    fill: ${({ theme }) => theme.color.text.secondary};
  }
  &:hover *[fill^='#'] {
    fill: ${({ theme }) => theme.color.basic.hover};
  }
  [data-expanded='true'] & {
    transform: rotate(180deg);
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.press};
    }
    &:hover *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
  }
  [data-disabled='true'] & {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.tertiary};
    }
  }
`;
const SortIcon = styled(ReactComponent$3N)`
  display: flex;
  flex-shrink: 0;
  transition: transform 0.3s ease-in-out;
  transform: rotate(0deg);
  margin: 2px 0;

  [data-sort='asc'] && {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.primary};
    }
  }
  [data-sort='desc'] && {
    & *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.primary};
    }
    transform: rotate(180deg);
  }
  [data-sort='initial'] && *[fill^='#'] {
    fill: transparent;
  }
`;
const Cell = styled.div`
  display: flex;
  align-items: flex-start;
  flex: 0 0 auto;
  box-sizing: border-box;
  ${cellStyle};
  overflow: hidden;
`;
const CellTextContent = styled.div`
  display: block;
  align-items: center;
  width: 100%;
  margin: 2px 0;
  ${({ cellAlign }) => cellAlign === "right" && "text-align: right;"}
  overflow: hidden;
`;
const CheckboxCell = styled(Cell)`
  width: unset;
  overflow: visible;
  [data-dimension='s'] && {
    padding: 8px 2px 7px 14px;
  }
  [data-dimension='m'] && {
    padding: 12px 2px 11px 14px;
  }
  [data-dimension='l'] && {
    padding: 14px 2px 13px 18px;
  }
  [data-dimension='xl'] && {
    padding: 18px 2px 17px 18px;
  }
`;
const ExpandCell = styled(Cell)`
  [data-dimension='s'] && {
    padding: 6px 0px 5px 12px;
    width: 32px;
  }
  [data-dimension='m'] && {
    padding: 10px 0px 9px 12px;
    width: 32px;
  }
  [data-dimension='l'] && {
    padding: 12px 0px 11px 16px;
    width: 40px;
  }
  [data-dimension='xl'] && {
    padding: 16px 0px 15px 16px;
    width: 40px;
  }
`;
const HeaderCell = styled.div`
  position: relative;
  display: inline-flex;
  box-sizing: border-box;
  flex: 0 0 auto;
  ${cellStyle}
  &:hover {
    cursor: pointer;
  }
  align-items: flex-start;
`;
const HeaderCellContent = styled.div`
  box-sizing: border-box;
  display: flex;
  align-items: flex-start;
  width: 100%;
  [data-cellalign='right'] & {
    flex-direction: row-reverse;
  }
`;
const HeaderCellSpacer = styled.div`
  display: flex;
  align-self: stretch;
  width: ${(p) => p.width ? p.width : "12px"};
  flex-shrink: 0;
`;
const HeaderCellTitle = styled.div`
  display: inline-flex;
  align-items: flex-start;
  width: 100%;
  overflow: hidden;
  [data-cellalign='right'] & {
    text-align: right;
    flex-direction: row-reverse;
  }
  &:hover {
    [data-sort='asc'] && *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
    [data-sort='desc'] && *[fill^='#'] {
      fill: ${({ theme }) => theme.color.basic.hover};
    }
    [data-sort='initial'] && *[fill^='#'] {
      fill: ${({ theme }) => theme.color.text.secondary};
    }
  }
`;
const TitleContent = styled.div`
  display: flex;
  flex-direction: column;

  // leave 20px/16px for SortIcon
  max-width: ${({ sortable }) => sortable ? "calc(100% - 20px)" : "100%"};
  [data-dimension='s'] && {
    max-width: ${({ sortable }) => sortable ? "calc(100% - 16px)" : "100%"};
  }
  [data-dimension='m'] && {
    max-width: ${({ sortable }) => sortable ? "calc(100% - 16px)" : "100%"};
  }
`;
const Title = styled.div`
  position: relative;
  width: 100%;
  ${({ lineClamp }) => lineClamp === 1 ? singleLineTitle : multiLineTitle}
`;
const ExtraText = styled.div`
  position: relative;
  width: 100%;
  // box-sizing: border-box;
  margin: 2px 0;
  ${extraTextStyle}
  ${({ lineClamp }) => lineClamp === 1 ? singleLineTitle : multiLineTitle}
`;
const Row = styled.div`
  display: flex;
  flex-direction: column;
  min-width: fit-content;
  background: ${({ theme }) => theme.color.background.primary};
  ${rowStyle}
  ${({ disabled }) => disabled && disabledRow}
  ${({ underline }) => underline && underlineRow}
`;
const SimpleRow = styled.div`
  display: inline-flex;
  min-width: max-content;
  background: ${({ theme }) => theme.color.background.primary};
  ${rowBackground}

  &:hover {
    & + ${OverflowMenuWrapper} {
      visibility: visible;
    }
  }
  & + div[data-opened='true'] {
    visibility: visible;
  }
`;
const ExpandedRow = styled.div`
  display: inline-flex;
  overflow: hidden;
  transition: max-height 250ms cubic-bezier(0.4, 0, 0.2, 1);
  max-height: ${(p) => !p.opened ? 0 : p.contentMaxHeight};
`;
const ExpandedRowContent = styled.div`
  display: flex;
  flex: 1 1 auto;
  padding: 0 12px 11px 12px;
`;
const Spacer = styled.div`
  display: flex;
  flex: 1 1 auto;
`;
const VirtualBody = React.forwardRef(({ height: height2, childHeight, renderAhread = 20, rowList, renderRow, ...props2 }, ref) => {
  const [scrollTop, setScrollTop] = React.useState(0);
  const scrollContainerRef = React.useRef(null);
  const itemCount = rowList.length;
  const handleScroll = (e) => {
    requestAnimationFrame(() => {
      setScrollTop(e.target.scrollTop);
    });
  };
  React.useEffect(() => {
    const scrollContainer = scrollContainerRef.current;
    setScrollTop((scrollContainer == null ? void 0 : scrollContainer.scrollTop) || 0);
    scrollContainer == null ? void 0 : scrollContainer.addEventListener("scroll", handleScroll);
    return () => scrollContainer == null ? void 0 : scrollContainer.removeEventListener("scroll", handleScroll);
  }, []);
  let startNode = Math.floor(scrollTop / childHeight) - renderAhread;
  startNode = Math.max(0, startNode);
  let visibleNodeCount = Math.ceil(height2 / childHeight) + 2 * renderAhread;
  visibleNodeCount = Math.min(itemCount - startNode, visibleNodeCount);
  const topPadding = `${startNode * childHeight}px`;
  const bottomPadding = `${(itemCount - startNode - visibleNodeCount) * childHeight}px`;
  const visibleChildren = React.useMemo(() => [...rowList].slice(startNode, startNode + visibleNodeCount).map((row, index) => renderRow(row, index)), [startNode, visibleNodeCount, renderRow]);
  return /* @__PURE__ */ React.createElement(ScrollTableBody, {
    style: { height: height2 },
    ref: refSetter(ref, scrollContainerRef),
    ...props2
  }, /* @__PURE__ */ React.createElement(Spacer, {
    style: { minHeight: topPadding }
  }), visibleChildren, /* @__PURE__ */ React.createElement(Spacer, {
    style: { minHeight: bottomPadding }
  }));
});
const OverflowMenu = ({ tableWidth, row }) => {
  var _a;
  const oveflowMenuRef = React.useRef(null);
  const handleMenuOpen = () => {
    if (oveflowMenuRef.current)
      oveflowMenuRef.current.dataset.opened = "true";
  };
  const handleMenuClose = () => {
    if (oveflowMenuRef.current)
      oveflowMenuRef.current.dataset.opened = "false";
  };
  return /* @__PURE__ */ React.createElement(OverflowMenuWrapper, {
    ref: oveflowMenuRef,
    "data-opened": false,
    $offset: tableWidth
  }, (_a = row.overflowMenuRender) == null ? void 0 : _a.call(row, row, handleMenuOpen, handleMenuClose));
};
const DEFAULT_COLUMN_WIDTH = 100;
const Table = ({
  columnList,
  rowList,
  displayRowSelectionColumn = false,
  displayRowExpansionColumn = false,
  headerCheckboxChecked = false,
  headerCheckboxIndeterminate = false,
  onHeaderSelectionChange,
  onRowSelectionChange,
  onRowExpansionChange,
  onRowClick,
  onRowDoubleClick,
  onSortChange,
  onColumnResize,
  renderCell,
  dimension = "m",
  greyHeader = false,
  spacingBetweenItems,
  headerLineClamp = 1,
  headerExtraLineClamp = 1,
  showDividerForLastColumn = false,
  disableColumnResize = false,
  showLastRowUnderline = true,
  virtualScroll,
  ...props2
}) => {
  const checkboxDimension = dimension === "s" || dimension === "m" ? "s" : "m";
  const iconSize = dimension === "s" || dimension === "m" ? 16 : 20;
  const defaultSpacer = dimension === "l" || dimension === "xl" ? "16px" : "12px";
  const spacer = spacingBetweenItems || defaultSpacer;
  const [cols, setColumns] = React.useState([...columnList]);
  const [sort, setSort] = React.useState({});
  const [verticalScroll, setVerticalScroll] = React.useState(false);
  const [resizerState, updateResizerState] = React.useState({});
  const [tableWidth, setTableWidth] = React.useState(0);
  const [bodyHeight, setBodyHeight] = React.useState(0);
  const stickyColumns = [...cols].filter((col) => col.sticky);
  const tableRef = React.useRef(null);
  const headerRef = React.useRef(null);
  const scrollBodyRef = React.useRef(null);
  const sortedCol = React.useRef({ name: "", count: 0 });
  const scrollHeader = (scrollLeft) => {
    if (headerRef.current)
      headerRef.current.scrollLeft = scrollLeft;
  };
  const setShadow = (scrollLeft) => {
    if (tableRef.current) {
      const initial = tableRef.current.getAttribute("data-shadow");
      if (scrollLeft === 0) {
        if (initial !== "false")
          tableRef.current.setAttribute("data-shadow", "false");
      } else {
        if (initial !== "true")
          tableRef.current.setAttribute("data-shadow", "true");
      }
    }
  };
  const handleScroll = (e) => {
    if (e.target === scrollBodyRef.current) {
      requestAnimationFrame(function() {
        scrollHeader(e.target.scrollLeft);
      });
    }
    if (stickyColumns.length > 0 || displayRowSelectionColumn || displayRowExpansionColumn) {
      requestAnimationFrame(function() {
        setShadow(e.target.scrollLeft);
      });
    }
  };
  React.useLayoutEffect(() => {
    if (tableRef.current) {
      const newCols = [...columnList].map((col) => {
        return {
          ...col,
          width: replaceWidthToNumber(col.width),
          resizerWidth: replaceWidthToNumber(col.width)
        };
      });
      setColumns(newCols);
      updateResizerState({});
    }
  }, [tableRef.current, columnList]);
  React.useLayoutEffect(() => {
    const body = scrollBodyRef.current;
    if (body) {
      const observer = observeRect(body, (rect) => {
        if (body.scrollHeight > body.offsetHeight) {
          setVerticalScroll(true);
        } else {
          setVerticalScroll(false);
        }
        setTableWidth(rect.width);
        setBodyHeight(rect.height);
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [scrollBodyRef.current]);
  const replaceWidthToNumber = React.useCallback((width2) => {
    var _a;
    const hasNumberWidth = typeof width2 === "number";
    const hasPercentWidth = typeof width2 === "string" && width2.includes("%");
    const hasPixelWidth = typeof width2 === "string" && width2.includes("px");
    if (hasPercentWidth && (tableRef == null ? void 0 : tableRef.current)) {
      const maxWidth = (_a = tableRef == null ? void 0 : tableRef.current) == null ? void 0 : _a.clientWidth;
      return Math.round(parseInt(width2) * (maxWidth || 1) / 100);
    }
    if (hasNumberWidth)
      return width2;
    if (hasPixelWidth)
      return parseInt(width2);
    return DEFAULT_COLUMN_WIDTH;
  }, [tableRef.current]);
  React.useLayoutEffect(() => {
    const defaultSort = [...columnList].reduce((sortObj, { name, defaultSort: defaultSort2 }) => {
      if (defaultSort2) {
        onSortChange == null ? void 0 : onSortChange({ name, sort: defaultSort2 });
        sortedCol.current = { name, count: 1 };
      }
      sortObj[name] = defaultSort2 || "initial";
      return sortObj;
    }, {});
    setSort(defaultSort);
  }, [columnList]);
  React.useLayoutEffect(() => {
    const scrollBody = scrollBodyRef.current;
    if (scrollBody) {
      scrollBody.addEventListener("scroll", handleScroll);
      return () => scrollBody.removeEventListener("scroll", handleScroll);
    }
  }, [scrollBodyRef.current]);
  function handleRowClick(rowId) {
    onRowClick == null ? void 0 : onRowClick(rowId);
  }
  function handleRowDoubleClick(rowId) {
    onRowDoubleClick == null ? void 0 : onRowDoubleClick(rowId);
  }
  function handleCheckboxChange(id) {
    const idsMap = rowList.reduce((ids, row) => {
      const value = row.id === id ? !row.selected : !!row.selected;
      ids[row.id] = value;
      return ids;
    }, {});
    onRowSelectionChange == null ? void 0 : onRowSelectionChange(idsMap);
  }
  function handleCheckboxClick(e) {
    e.stopPropagation();
  }
  function handleExpansionChange(id) {
    const idsMap = rowList.reduce((ids, row) => {
      const value = row.id === id ? !row.expanded : !!row.expanded;
      ids[row.id] = value;
      return ids;
    }, {});
    onRowExpansionChange == null ? void 0 : onRowExpansionChange(idsMap);
  }
  const isSelected = (row) => row.selected;
  const allRowsChecked = rowList.every(isSelected);
  const someRowsChecked = rowList.some(isSelected);
  function handleHeaderCheckboxChange(e) {
    const toRemove = rowList.reduce((ids, row) => {
      ids[row.id] = !someRowsChecked;
      return ids;
    }, {});
    onRowSelectionChange == null ? void 0 : onRowSelectionChange(toRemove);
    onHeaderSelectionChange == null ? void 0 : onHeaderSelectionChange(e.target.checked);
  }
  function handleResizeChange({ name, width: width2, mouseUp }) {
    if (mouseUp) {
      onColumnResize == null ? void 0 : onColumnResize({ name, width: width2 + "px" });
    }
    const newColumns = cols.map((column) => column.name === name ? {
      ...column,
      width: width2 > DEFAULT_COLUMN_WIDTH ? width2 : DEFAULT_COLUMN_WIDTH
    } : column);
    setColumns(newColumns);
  }
  const handleSort = (name) => {
    let newSort = sort[name] === "asc" ? "desc" : "asc";
    if (sortedCol.current.name === name) {
      if (sortedCol.current.count === 2) {
        newSort = "initial";
        sortedCol.current = { name: "", count: 0 };
      } else {
        sortedCol.current = { name, count: 2 };
      }
    } else {
      sortedCol.current = { name, count: 1 };
    }
    const toRemove = cols.reduce((sortObj, col) => {
      sortObj[col.name] = "initial";
      return sortObj;
    }, {});
    setSort({ ...toRemove, [name]: newSort });
    onSortChange == null ? void 0 : onSortChange({ name, sort: newSort });
  };
  const renderHeaderCell = ({
    name,
    title,
    extraText,
    width: width2 = DEFAULT_COLUMN_WIDTH,
    resizerWidth,
    cellAlign = "left",
    sortable = false,
    sticky = false,
    renderFilter,
    renderFilterIcon,
    onFilterMenuClickOutside,
    onFilterMenuClose,
    onFilterMenuOpen
  }, index) => {
    const cellRef = React.useRef(null);
    return /* @__PURE__ */ React.createElement(HeaderCell, {
      key: `head_${name}`,
      style: { width: width2, minWidth: width2 },
      "data-cellalign": cellAlign,
      "data-sort": String(sort[name] || "initial"),
      "data-sticky": sticky,
      className: "th",
      ref: cellRef
    }, /* @__PURE__ */ React.createElement(HeaderCellContent, null, /* @__PURE__ */ React.createElement(HeaderCellTitle, {
      onClick: sortable ? () => handleSort(name) : void 0
    }, /* @__PURE__ */ React.createElement(TitleContent, {
      sortable
    }, /* @__PURE__ */ React.createElement(Title, {
      lineClamp: headerLineClamp
    }, title), extraText && /* @__PURE__ */ React.createElement(ExtraText, {
      lineClamp: headerExtraLineClamp
    }, extraText)), sortable && /* @__PURE__ */ React.createElement(SortIcon, {
      width: iconSize,
      height: iconSize
    })), /* @__PURE__ */ React.createElement(HeaderCellSpacer, {
      width: renderFilter ? spacer : `${parseInt(spacer) - parseInt(defaultSpacer)}px`
    }), renderFilter && /* @__PURE__ */ React.createElement(Filter, {
      dimension,
      renderFilter,
      renderFilterIcon,
      onFilterMenuClickOutside,
      onFilterMenuOpen,
      onFilterMenuClose,
      cellAlign,
      targetRef: cellRef
    })), index < cols.length - 1 && /* @__PURE__ */ React.createElement(RowWidthResizer, {
      name,
      width: width2 ? resizerWidth : DEFAULT_COLUMN_WIDTH,
      onChange: handleResizeChange,
      disabled: disableColumnResize,
      resizerState
    }), index === cols.length - 1 && showDividerForLastColumn && /* @__PURE__ */ React.createElement(RowWidthResizer, {
      name,
      width: width2 ? resizerWidth : DEFAULT_COLUMN_WIDTH,
      onChange: handleResizeChange,
      disabled: disableColumnResize,
      resizerState
    }));
  };
  const renderBodyCell = (row, col) => {
    return /* @__PURE__ */ React.createElement(Cell, {
      key: `${row.id}_${col.name}`,
      style: { width: col.width || DEFAULT_COLUMN_WIDTH },
      className: "td"
    }, renderCell ? renderCell(row, col.name) : /* @__PURE__ */ React.createElement(CellTextContent, {
      cellAlign: col.cellAlign
    }, row[col.name]));
  };
  const renderRow = (row, index) => {
    return /* @__PURE__ */ React.createElement(Row, {
      onClick: () => handleRowClick(row.id),
      onDoubleClick: () => handleRowDoubleClick(row.id),
      key: `row_${row.id}`,
      underline: index === rowList.length - 1 && showLastRowUnderline || index < rowList.length - 1,
      "data-expanded": row.expanded,
      "data-selected": !!row.selected,
      "data-disabled": !!row.disabled,
      disabled: !!row.disabled,
      "data-error": !!row.error,
      "data-success": !!row.success,
      className: `tr ${row.className}`
    }, /* @__PURE__ */ React.createElement(SimpleRow, {
      className: "tr-simple"
    }, (displayRowSelectionColumn || displayRowExpansionColumn || stickyColumns.length > 0) && /* @__PURE__ */ React.createElement(StickyWrapper, null, displayRowExpansionColumn && /* @__PURE__ */ React.createElement(ExpandCell, null, row.expandedRowRender && /* @__PURE__ */ React.createElement(ExpandIcon, {
      onClick: () => handleExpansionChange(row.id)
    })), displayRowSelectionColumn && /* @__PURE__ */ React.createElement(CheckboxCell, {
      className: "td_checkbox"
    }, /* @__PURE__ */ React.createElement(Checkbox, {
      disabled: row.disabled,
      dimension: checkboxDimension,
      checked: !!row.selected,
      onChange: () => handleCheckboxChange(row.id),
      onClick: handleCheckboxClick
    })), stickyColumns.length > 0 && stickyColumns.map((col) => renderBodyCell(row, col))), cols.map((col) => col.sticky ? null : renderBodyCell(row, col)), /* @__PURE__ */ React.createElement(Filler, null)), row.overflowMenuRender && /* @__PURE__ */ React.createElement(OverflowMenu, {
      tableWidth,
      row
    }), row.expandedRowRender && /* @__PURE__ */ React.createElement(ExpandedRow, {
      opened: row.expanded,
      contentMaxHeight: "90vh",
      className: "tr-expanded"
    }, /* @__PURE__ */ React.createElement(ExpandedRowContent, null, row.expandedRowRender(row))));
  };
  return /* @__PURE__ */ React.createElement(TableContainer, {
    ref: tableRef,
    "data-dimension": dimension,
    "data-shadow": false,
    "data-verticalscroll": verticalScroll,
    ...props2,
    className: `table ${props2.className}`
  }, /* @__PURE__ */ React.createElement(HeaderWrapper, {
    scrollbar: SCROLLBAR,
    greyHeader,
    "data-greyheader": greyHeader
  }, /* @__PURE__ */ React.createElement(Header, {
    ref: headerRef,
    className: "tr",
    "data-underline": true
  }, (displayRowSelectionColumn || displayRowExpansionColumn || stickyColumns.length > 0) && /* @__PURE__ */ React.createElement(StickyWrapper, null, displayRowExpansionColumn && /* @__PURE__ */ React.createElement(ExpandCell, null), displayRowSelectionColumn && /* @__PURE__ */ React.createElement(CheckboxCell, {
    className: "th_checkbox"
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    dimension: checkboxDimension,
    checked: allRowsChecked || someRowsChecked || headerCheckboxChecked,
    indeterminate: someRowsChecked && !allRowsChecked || headerCheckboxIndeterminate,
    onChange: handleHeaderCheckboxChange
  })), stickyColumns.length > 0 && stickyColumns.map((col, index) => renderHeaderCell(col, index))), cols.map((col, index) => col.sticky ? null : renderHeaderCell(col, index)), /* @__PURE__ */ React.createElement(Filler, null))), virtualScroll ? /* @__PURE__ */ React.createElement(VirtualBody, {
    height: bodyHeight,
    rowList,
    childHeight: virtualScroll.fixedRowHeight,
    renderRow,
    ref: scrollBodyRef,
    className: "tbody"
  }) : /* @__PURE__ */ React.createElement(ScrollTableBody, {
    ref: scrollBodyRef,
    className: "tbody"
  }, rowList.map((row, index) => renderRow(row, index))));
};
Table.displayName = "Table";
const cssText = `
    @font-face {
        font-family: 'VTB Group UI';
        src: url('${VTBGroupUI_Medium_eot}');
        src: url('${VTBGroupUI_Medium_eot}?#iefix') format('embedded-opentype'),
          url('${VTBGroupUI_Medium_woff2}') format('woff2'),
          url('${VTBGroupUI_Medium_woff}') format('woff'),
          url('${VTBGroupUI_Medium_ttf}') format('truetype'),
          url('${VTBGroupUI_Medium_svg}#VTBGroupUIWeb-Book') format('svg');
        font-display: swap;
        font-weight: 500;
        font-style: normal;
        font-feature-settings: 'tnum' on, 'lnum' on, 'cv03' on, 'cv04' on;
    }

    @font-face {
        font-family: 'VTB Group UI';
        src: url('${VTBGroupUI_Regular_eot}');
        src: url('${VTBGroupUI_Regular_eot}?#iefix') format('embedded-opentype'),
          url('${VTBGroupUI_Regular_woff2}') format('woff2'),
          url('${VTBGroupUI_Regular_woff}') format('woff'),
          url('${VTBGroupUI_Regular_ttf}') format('truetype'),
          url('${VTBGroupUI_Regular_svg}#VTBGroupUIWeb-Book') format('svg');
        font-display: swap;
        font-weight: normal;
        font-style: normal;
        font-feature-settings: 'tnum' on, 'lnum' on, 'cv03' on, 'cv04' on;
    }
`;
function FontsVTBGroup(props2) {
  return /* @__PURE__ */ React__default.createElement("style", {
    type: "text/css",
    children: cssText,
    ...props2
  });
}
export { ALL_FIELDSET_DIMENSIONS_VALUES, Accordion, AccordionItem, Additional_L_bold, Additional_L_normal, Additional_M_normal, Additional_S_bold, Additional_S_normal, Additional_XS_normal, Avatar, AvatarGroup, Background, Badge, BadgeComponent, Breadcrumbs, Button$7 as Button, ButtonGroup, ButtonGroupItem, Button_M, Button_S, Calendar$1 as Calendar, Caption_XS, Checkbox, CheckboxCompositeGroup, CheckboxField, CheckboxGroup, Chips, Container$6 as Container, DARK_THEME, DEFAULT_COLUMN_WIDTH, DateField, DateInput, DropDownItem$1 as DropDownItem, DropDownMenu, Dropdown$3 as Dropdown, EditMode, EditModeField, ExtraTextContainer, ExtrasContainer$1 as ExtrasContainer, Field, FieldSet, FileInfo, FileUploader, FontsVTBGroup, Highlight, Hint$1 as Hint, INPUT_DIMENSIONS_VALUES, INPUT_STATUS_VALUES, IconButton, InputField, LIGHT_THEME, Label$3 as Label, Link, LinkComponent, LinkCssMixin, Main_L, Main_M, Main_S, Main_XL, Main_XS_bold, Main_XS_normal, Main_XXL, MenuButton$3 as MenuButton, Modal, ModalButtonPanel, ModalContent, ModalTitle, MultiButton, MultiSelect, MultiSelectField, Notification, NumberInput, NumberInputField, OpenStatusButton, Option$1 as Option, OptionGroup, OverflowMenu$1 as OverflowMenu, PaginationOne, PaginationSimple, PaginationSimpleItem, PaginationTwo, PhoneInputField, PhoneNumberInput, PositionInPortal, PositionedPortalContainer, ProgressHeader, ProgressPage, ProgressStepper, PseudoIcon$1 as PseudoIcon, PseudoText, RadioButton, SELECT_DIMENSIONS, SearchSelect, SearchSelectField, SearchingPanel, Select$2 as Select, SelectField, SelectTree, Slider$2 as Slider, SliderInput, SliderInputField, SliderRange, SliderRangeField, Spinner, StatusIcon, StatusIndicator, Step, StepContent, Stepper, SuggestField, SuggestInput, T, TYPOGRAPHY, TabMenu, Table, Tag, Tags, TextArea, TextButton, TextField, TextInput, TimeField, TimeInput, Toast, ToastContext, ToastProvider, Toggle, Tooltip, backGroundColorMixin$1 as backGroundColorMixin, changeInputData, clearValue, containerHeights, emptyOverlayStyledCss, fitToCurrency, getTextStyle, height, isInputDataDifferent, menuListHeights, skeletonMixin, styleColorMixin, styleDisabledMixin, styleMixin, styleTextMixin$2 as styleTextMixin, typography$1 as typography, useToast, width$1 as width };
//# sourceMappingURL=ui-kit3.es.js.map
