export declare enum RoleCode {
    OPS_USER_EXECUTOR = "OPS_USER_EXECUTOR",
    OPS_USER_SUPERVISOR = "OPS_USER_SUPERVISOR",
    OPS_USER_ANALYST_PROCESS = "OPS_USER_ANALYST_PROCESS",
    OPS_USER_MANAGER_PROCESS = "OPS_USER_MANAGER_PROCESS"
}
export declare enum PermissionCode {
    GET_MY_TEAM_INFO = "GET_MY_TEAM_INFO",
    GET_WORKLOAD_AND_CAPACITY_INFO = "GET_WORKLOAD_AND_CAPACITY_INFO",
    GET_PERSONAL_TASKS = "GET_PERSONAL_TASKS",
    GET_COMPLETED_PERSONAL_TASKS = "GET_COMPLETED_PERSONAL_TASKS",
    START_WORK_TASK = "START_WORK_TASK",
    RETURN_TASK_IN_POOL = "RETURN_TASK_IN_POOL",
    OPEN_TASK = "OPEN_TASK",
    COMPLETE_TASK = "COMPLETE_TASK",
    REJECT_TASK = "REJECT_TASK",
    GET_NOTIFICATIONS = "GET_NOTIFICATIONS",
    GET_TASK_IN_POOL = "GET_TASK_IN_POOL",
    GET_EXECUTORS_TRANSFER_TASK = "GET_EXECUTORS_TRANSFER_TASK",
    TRANSFER_TASK_EXECUTION = "TRANSFER_TASK_EXECUTION",
    GET_COMPLETED_TASKS = "GET_COMPLETED_TASKS",
    CHANGE_STATUS = "CHANGE_STATUS",
    GET_TASK_TYPES = "GET_TASK_TYPES",
    CREATE_TASK_TYPE = "CREATE_TASK_TYPE",
    APPROVE_TASK_TYPE = "APPROVE_TASK_TYPE",
    DEACTIVATE_TASK_TYPE = "DEACTIVATE_TASK_TYPE",
    GET_SPECIFICATION_TASK_TYPE = "GET_SPECIFICATION_TASK_TYPE",
    CREATE_SPECIFICATION_TASK_TYPE = "CREATE_SPECIFICATION_TASK_TYPE",
    GET_RELEVANCE_EXECUTORS_TASK_TYPE = "GET_RELEVANCE_EXECUTORS_TASK_TYPE",
    TUNE_RELEVANCE_EXECUTORS_TASK_TYPE = "TUNE_RELEVANCE_EXECUTORS_TASK_TYPE",
    TUNE_NOTIFICATIONS = "TUNE_NOTIFICATIONS",
    GET_CONFIG_NOTIFICATIONS = "GET_CONFIG_NOTIFICATIONS"
}
export declare enum UserStatusCode {
    TECHNICAL_BREAK = "TECHNICAL_BREAK",
    PERFORMING_THE_TASK_OF_THE_SUPERVISOR = "PERFORMING_THE_TASK_OF_THE_SUPERVISOR",
    ACTIVE = "ACTIVE",
    NOT_ACTIVE = "NOT_ACTIVE"
}
export declare type Permission = {
    id: number;
    code: PermissionCode;
    title: string;
};
export declare type Role = {
    id: number;
    code: RoleCode;
    permissions: Array<Permission>;
    title: string;
};
export declare type StatusAvailability = {
    code: UserStatusCode;
    available: boolean;
};
export declare type Process = {
    id: number;
    code: string;
    title: string;
};
export declare type TerritorialSubdivision = {
    active: boolean;
    id: string;
    level: number;
    name: string;
};
export interface IAuthProvider {
    isAuthorized: boolean;
    isInit: boolean;
    user: IUser;
    availableStatuses: Array<StatusAvailability>;
    permissionCodes: Array<PermissionCode>;
    roleCodes: Array<RoleCode>;
    checkPermission: ((requiredPermissions: PermissionCode | Array<PermissionCode>) => boolean);
    updateUserStatus: (userStatus: UserStatusCode) => Promise<void>;
    _changeUser: (userId: IUser['id']) => void;
    _devAuthHeaders: {
        [key: string]: string;
    };
}
export interface IUser {
    id: string;
    activeProcess?: Process;
    managerProcesses?: Array<Process>;
    email: string;
    name: string;
    roles: Array<Role>;
    status: UserStatusCode;
    territorialSubdivision: TerritorialSubdivision;
}
