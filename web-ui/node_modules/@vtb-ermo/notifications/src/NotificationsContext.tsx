import React, { createContext, useCallback, useState } from 'react';
import { NotificationAlert, NotificationAlertExtended } from './types';

export const NotificationsContext = createContext<{
    notifications: Array<NotificationAlertExtended>,
    setNotifications: React.Dispatch<React.SetStateAction<Array<NotificationAlertExtended>>>
    publish: (item: NotificationAlert) => void,
    unPublish: (id: NotificationAlert['id']) => void
}>({} as any);

export const NotificationsProvider: React.FC = ({ children }) => {

    const [notifications, setNotifications] = useState<Array<NotificationAlertExtended>>([]);

    const publish = useCallback((item: NotificationAlert) => {
        setNotifications(prevState => {
            const { memorable = true, notifiable = true } = item;
            return prevState.some(n => n.id === item.id)
                ? prevState
                : [ ...prevState, { ...item, alert: notifiable, new: true, memorable } ];
        });
    }, []);

    const unPublish = useCallback((id: NotificationAlert['id']) => {
        setNotifications(prevState => prevState.filter(i => i.id !== id));
    }, []);

    return (
        <NotificationsContext.Provider value={{
            notifications,
            setNotifications,
            publish,
            unPublish,
        }}>
            {children}
        </NotificationsContext.Provider>
    );
};