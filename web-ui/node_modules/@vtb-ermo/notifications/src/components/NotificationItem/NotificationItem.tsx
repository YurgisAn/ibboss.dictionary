import React, { useCallback, useEffect } from 'react';
import { ReactComponent as CloseSolid } from '@openvtb/admiral-icons/build/service/CloseSolid.svg';
import { ReactComponent as CloseOutline } from '@openvtb/admiral-icons/build/service/CloseOutline.svg';
import { ReactComponent as InfoSolid } from '@openvtb/admiral-icons/build/service/InfoSolid.svg';
import { ReactComponent as ErrorSolid } from '@openvtb/admiral-icons/build/service/ErrorSolid.svg';
import { ReactComponent as CheckSolid } from '@openvtb/admiral-icons/build/service/CheckSolid.svg';
import { ReactComponent as MinusSolid } from '@openvtb/admiral-icons/build/service/MinusSolid.svg';
import { ReactComponent as LockSolid } from '@openvtb/admiral-icons/build/security/LockSolid.svg';

import { CloseWrapper, ContentWrapper, IconWrapper, LockedWrapper, NotificationItemContainer } from './styled';
import { NotificationAlertExtended, NotificationType } from '../../types';

export const NotificationItem: React.FC<NotificationAlertExtended> = props => {

    const { id, type, date, title, message, closable, locked, alert, duration = 15 } = props;
    const { onClick = () => {}, onClose = () => {} } = props;

    const handlerOnClose = useCallback((event) => {
        event.stopPropagation();
        !locked && onClose(id);
    }, [id, locked, onClose]);

    const handlerOnClick = useCallback(event => {
        event.stopPropagation();
        !locked && onClick(event, id);
    }, [id, locked, onClick]);

    useEffect(() => {
        let timerId: any;
        alert && !locked && (timerId = setTimeout(() => onClose(id), duration * 1000));
        return () => {
            clearTimeout(timerId);
        };
    }, []);

    return (
        <NotificationItemContainer type={type} onClick={handlerOnClick}>
            <IconWrapper>
                {!type && <MinusSolid/>}
                {type === NotificationType.INFO && <InfoSolid/>}
                {type === NotificationType.DANGER && <CloseSolid/>}
                {type === NotificationType.WARNING && <ErrorSolid/>}
                {type === NotificationType.SUCCESS && <CheckSolid/>}
            </IconWrapper>
            <ContentWrapper>
                {title && <h3>{title}</h3>}
                {message && <p>{message}</p>}
                {date && <div>Дата создания: {date}</div>}
            </ContentWrapper>
            {closable && !locked && (
                <CloseWrapper onClick={handlerOnClose}>
                    <CloseOutline/>
                </CloseWrapper>
            )}
            {locked && (
                <LockedWrapper>
                    <LockSolid/>
                </LockedWrapper>
            )}
        </NotificationItemContainer>
    );
};