import styled, { css } from 'styled-components';
import { NotificationType } from '../../types';

const InfoTypeCSS = css`
    border-color: ${({ theme }) => theme.color.basic.primary};
    background-color: ${({ theme }) => theme.color.background.secondary};
    svg > path {
        fill: ${({ theme }) => theme.color.basic.primary};
    }
`;

const DangerTypeCSS = css`
    border-color: ${({ theme }) => theme.color.status.danger};
    background-color: ${({ theme }) => theme.color.background.surfaceDanger};
    svg > path {
        fill: ${({ theme }) => theme.color.status.danger};
    }
`;

const SuccessTypeCSS = css`
    border-color: ${({ theme }) => theme.color.status.success};
    background-color: ${({ theme }) => theme.color.background.surfaceSuccess};
    svg > path {
        fill: ${({ theme }) => theme.color.status.success};
    }
`;

const WarningTypeCSS = css`
    border-color: ${({ theme }) => theme.color.status.warn};
    background-color: ${({ theme }) => theme.color.background.surfaceWarn};
    svg > path {
        fill: ${({ theme }) => theme.color.status.warn};
    }
`;

const DefaultTypeCss = css`
    border-color: ${({ theme }) => theme.color.text.secondary};
    background-color: ${({ theme }) => theme.color.background.secondary};
    svg > path {
        fill: ${({ theme }) => theme.color.text.tertiary};
    }
`;

export const NotificationItemContainer = styled.div<{ type?: NotificationType }>`
    display: flex;
    width: 488px;
    box-sizing: border-box;
    padding: 12px 12px 8px 1px;
    border-radius: 4px;
    border: 1px solid;
    box-shadow: 0 4px 8px rgba(138, 150, 168, 0.4), 0 -2px 4px rgba(138, 150, 168, 0.08);
    :hover {
        padding: 11px 11px 7px 0;
        border-width: 2px;
    }
    ${({ type }) => !type && DefaultTypeCss};
    ${({ type }) => type === NotificationType.INFO && InfoTypeCSS};
    ${({ type }) => type === NotificationType.DANGER && DangerTypeCSS};
    ${({ type }) => type === NotificationType.SUCCESS && SuccessTypeCSS};
    ${({ type }) => type === NotificationType.WARNING && WarningTypeCSS};
`;

export const IconWrapper = styled.div`
    width: 52px;
    flex-shrink: 0;
    text-align: center;
    svg {
        height: 24px;
    }
`;

export const ContentWrapper = styled.div`
    flex-grow: 1;
    font-size: 14px;
    line-height: 20px;
    * {
        margin: 0 0 4px 0;
    }
    h3 {
        font-weight: 600;
        font-size: 14px;
    }
    div {
        color: ${({ theme }) => theme.color.text.tertiary};
    }
`;

export const CloseWrapper = styled.div`
    padding-left: 20px;
    svg {
        height: 20px;
        cursor: pointer;
        path {
            fill: ${({ theme }) => theme.color.basic.tertiary};
        }
        :hover {
            background-color: ${({ theme }) => theme.color.background.primary};
            border-radius: 50%;
        }
    }
`;

export const LockedWrapper = styled.div`
    padding-left: 20px;
    svg {
        height: 22px;
        margin-top: -2px;
        path {
            fill: ${({ theme }) => theme.color.basic.tertiary};
        }
    }
`;