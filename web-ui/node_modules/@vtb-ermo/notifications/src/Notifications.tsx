import React, { useCallback, useContext, useEffect, useState } from 'react';

import { NotificationAlertsContainer } from './styled';
import { NotificationIcon } from './components/NotificationIcon';
import { NotificationItem } from './components/NotificationItem';
import { NotificationList } from './components/NotificationList';
import { NotificationsContext } from './NotificationsContext';

export const Notifications: React.FC = () => {

    const { notifications, setNotifications } = useContext(NotificationsContext);

    const [listIsOpen, setListIsOpen] = useState<boolean>(false);

    const newNotificationCounter = notifications.filter(n => n.new && n.memorable).length;

    const turnOffAlerts = useCallback(() => {
        setNotifications(prevState => prevState.map(n => n.locked ? n : ({ ...n, alert: false })));
    }, [setNotifications]);

    const handlerOnAlertClose = useCallback(id => {
        const memorable = notifications.find(n => n.id === id)?.memorable;
        setNotifications(prevState => {
            return memorable
                ? prevState.map(n => n.id !== id ? n : { ...n, alert: false })
                : prevState.filter(n => n.id !== id);
        });
    }, [notifications, setNotifications]);

    // @ts-ignore
    const handlerOnItemClick = useCallback((event, id) => {
        listIsOpen && setNotifications(prevState => {
            return prevState.map(n => n.id !== id ? n : { ...n, alert: false, new: false });
        });
        if (notifications.find(n => n.id === id)?.memorable) {
            turnOffAlerts();
            setListIsOpen(true);
        }
    }, [turnOffAlerts, listIsOpen, notifications, setNotifications]);

    const handlerOnToggleList = useCallback(() => {
        turnOffAlerts();
        setListIsOpen(prevState => !prevState);
    }, [listIsOpen, turnOffAlerts]);

    // Adds an event to close the list by clicking outside
    useEffect(() => {
        if (listIsOpen) {

            const closeOnClickOutside = (event: Event): any => {
                if (!(event.target as HTMLElement)?.closest('[data-name="notification-list"]')) {
                    setListIsOpen(false);
                    event.stopPropagation();
                }
            };

            document.body.addEventListener('click', closeOnClickOutside);

            return () => {
                document.body.removeEventListener('click', closeOnClickOutside);
            };
        }
    }, [listIsOpen]);

    return (
        <>
            <NotificationIcon
                value={newNotificationCounter}
                onClick={handlerOnToggleList}
            />

            {listIsOpen ? (
                <NotificationList
                    list={notifications}
                    onClick={handlerOnItemClick}
                />
            ) : (
                <NotificationAlertsContainer>
                    {notifications
                        .filter(n => n.alert)
                        .map(n => (
                            <NotificationItem
                                {...n}
                                key={n.id}
                                onClick={handlerOnItemClick}
                                onClose={handlerOnAlertClose}
                            />
                        ))}
                </NotificationAlertsContainer>
            )}
        </>
    );
};