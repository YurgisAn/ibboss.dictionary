"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notifications = void 0;
var react_1 = __importStar(require("react"));
var styled_1 = require("./styled");
var NotificationIcon_1 = require("./components/NotificationIcon");
var NotificationItem_1 = require("./components/NotificationItem");
var NotificationList_1 = require("./components/NotificationList");
var NotificationsContext_1 = require("./NotificationsContext");
var Notifications = function () {
    var _a = react_1.useContext(NotificationsContext_1.NotificationsContext), notifications = _a.notifications, setNotifications = _a.setNotifications;
    var _b = __read(react_1.useState(false), 2), listIsOpen = _b[0], setListIsOpen = _b[1];
    var newNotificationCounter = notifications.filter(function (n) { return n.new && n.memorable; }).length;
    var turnOffAlerts = react_1.useCallback(function () {
        setNotifications(function (prevState) { return prevState.map(function (n) { return n.locked ? n : (__assign(__assign({}, n), { alert: false })); }); });
    }, [setNotifications]);
    var handlerOnAlertClose = react_1.useCallback(function (id) {
        var _a;
        var memorable = (_a = notifications.find(function (n) { return n.id === id; })) === null || _a === void 0 ? void 0 : _a.memorable;
        setNotifications(function (prevState) {
            return memorable
                ? prevState.map(function (n) { return n.id !== id ? n : __assign(__assign({}, n), { alert: false }); })
                : prevState.filter(function (n) { return n.id !== id; });
        });
    }, [notifications, setNotifications]);
    // @ts-ignore
    var handlerOnItemClick = react_1.useCallback(function (event, id) {
        var _a;
        listIsOpen && setNotifications(function (prevState) {
            return prevState.map(function (n) { return n.id !== id ? n : __assign(__assign({}, n), { alert: false, new: false }); });
        });
        if ((_a = notifications.find(function (n) { return n.id === id; })) === null || _a === void 0 ? void 0 : _a.memorable) {
            turnOffAlerts();
            setListIsOpen(true);
        }
    }, [turnOffAlerts, listIsOpen, notifications, setNotifications]);
    var handlerOnToggleList = react_1.useCallback(function () {
        turnOffAlerts();
        setListIsOpen(function (prevState) { return !prevState; });
    }, [listIsOpen, turnOffAlerts]);
    // Adds an event to close the list by clicking outside
    react_1.useEffect(function () {
        if (listIsOpen) {
            var closeOnClickOutside_1 = function (event) {
                var _a;
                if (!((_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('[data-name="notification-list"]'))) {
                    setListIsOpen(false);
                    event.stopPropagation();
                }
            };
            document.body.addEventListener('click', closeOnClickOutside_1);
            return function () {
                document.body.removeEventListener('click', closeOnClickOutside_1);
            };
        }
    }, [listIsOpen]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(NotificationIcon_1.NotificationIcon, { value: newNotificationCounter, onClick: handlerOnToggleList }),
        listIsOpen ? (react_1.default.createElement(NotificationList_1.NotificationList, { list: notifications, onClick: handlerOnItemClick })) : (react_1.default.createElement(styled_1.NotificationAlertsContainer, null, notifications
            .filter(function (n) { return n.alert; })
            .map(function (n) { return (react_1.default.createElement(NotificationItem_1.NotificationItem, __assign({}, n, { key: n.id, onClick: handlerOnItemClick, onClose: handlerOnAlertClose }))); })))));
};
exports.Notifications = Notifications;
//# sourceMappingURL=Notifications.js.map