export const keyboardKey: {
    codes: {
        3: string;
        6: string;
        8: string;
        9: string;
        12: string;
        13: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        27: string;
        28: string;
        29: string;
        30: string;
        31: string;
        32: string;
        33: string;
        34: string;
        35: string;
        36: string;
        37: string;
        38: string;
        39: string;
        40: string;
        41: string;
        42: string;
        43: string;
        44: string;
        45: string;
        46: string;
        48: string[];
        49: string[];
        50: string[];
        51: string[];
        52: string[];
        53: string[];
        54: string[];
        55: string[];
        56: string[];
        57: string[];
        91: string;
        93: string;
        144: string;
        145: string;
        181: string;
        182: string;
        183: string;
        186: string[];
        187: string[];
        188: string[];
        189: string[];
        190: string[];
        191: string[];
        192: string[];
        219: string[];
        220: string[];
        221: string[];
        222: string[];
        224: string;
        225: string;
        246: string;
        247: string;
        248: string;
        249: string;
        250: string;
        251: string;
    };
    /**
     * Get the `keyCode` or `which` value from a keyboard event or `key` name.
     * @param {string|object} eventOrKey A keyboard event-like object or `key` name.
     * @param {string} [eventOrKey.key] If object, it must have one of these keys.
     * @param {number} [eventOrKey.keyCode] If object, it must have one of these keys.
     * @param {number} [eventOrKey.which] If object, it must have one of these keys.
     * @returns {number|undefined}
     */
    getCode(eventOrKey: string | object): number | undefined;
    /**
     * Get the key name from a keyboard event, `keyCode`, or `which` value.
     * @param {number|object} eventOrCode A keyboard event-like object or key code.
     * @param {string} [eventOrCode.key] If object with a `key` name, it will be returned.
     * @param {number} [eventOrCode.keyCode] If object, it must have one of these keys.
     * @param {number} [eventOrCode.which] If object, it must have one of these keys.
     * @param {boolean} [eventOrCode.shiftKey] If object, it must have one of these keys.
     * @returns {string|undefined}
     */
    getKey(eventOrCode: number | object): string | undefined;
    Cancel: number;
    Help: number;
    Backspace: number;
    Tab: number;
    Clear: number;
    Enter: number;
    Shift: number;
    Control: number;
    Alt: number;
    Pause: number;
    CapsLock: number;
    Escape: number;
    Convert: number;
    NonConvert: number;
    Accept: number;
    ModeChange: number;
    ' ': number;
    PageUp: number;
    PageDown: number;
    End: number;
    Home: number;
    ArrowLeft: number;
    ArrowUp: number;
    ArrowRight: number;
    ArrowDown: number;
    Select: number;
    Print: number;
    Execute: number;
    PrintScreen: number;
    Insert: number;
    Delete: number;
    0: number;
    ')': number;
    1: number;
    '!': number;
    2: number;
    '@': number;
    3: number;
    '#': number;
    4: number;
    $: number;
    5: number;
    '%': number;
    6: number;
    '^': number;
    7: number;
    '&': number;
    8: number;
    '*': number;
    9: number;
    '(': number;
    a: number;
    A: number;
    b: number;
    B: number;
    c: number;
    C: number;
    d: number;
    D: number;
    e: number;
    E: number;
    f: number;
    F: number;
    g: number;
    G: number;
    h: number;
    H: number;
    i: number;
    I: number;
    j: number;
    J: number;
    k: number;
    K: number;
    l: number;
    L: number;
    m: number;
    M: number;
    n: number;
    N: number;
    o: number;
    O: number;
    p: number;
    P: number;
    q: number;
    Q: number;
    r: number;
    R: number;
    s: number;
    S: number;
    t: number;
    T: number;
    u: number;
    U: number;
    v: number;
    V: number;
    w: number;
    W: number;
    x: number;
    X: number;
    y: number;
    Y: number;
    z: number;
    Z: number;
    OS: number;
    ContextMenu: number;
    F1: number;
    F2: number;
    F3: number;
    F4: number;
    F5: number;
    F6: number;
    F7: number;
    F8: number;
    F9: number;
    F10: number;
    F11: number;
    F12: number;
    F13: number;
    F14: number;
    F15: number;
    F16: number;
    F17: number;
    F18: number;
    F19: number;
    F20: number;
    F21: number;
    F22: number;
    F23: number;
    F24: number;
    NumLock: number;
    ScrollLock: number;
    VolumeMute: number;
    VolumeDown: number;
    VolumeUp: number;
    ';': number;
    ':': number;
    '=': number;
    '+': number;
    ',': number;
    '<': number;
    '-': number;
    _: number;
    '.': number;
    '>': number;
    '/': number;
    '?': number;
    '`': number;
    '~': number;
    '[': number;
    '{': number;
    '\\': number;
    '|': number;
    ']': number;
    '}': number;
    "'": number;
    '"': number;
    Meta: number;
    AltGraph: number;
    Attn: number;
    CrSel: number;
    ExSel: number;
    EraseEof: number;
    Play: number;
    ZoomOut: number;
};
//# sourceMappingURL=keyboardKey.d.ts.map