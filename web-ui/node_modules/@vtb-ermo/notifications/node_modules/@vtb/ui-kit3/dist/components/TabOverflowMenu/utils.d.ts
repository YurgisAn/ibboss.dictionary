import { Dispatch, RefObject, SetStateAction } from 'react';
export declare type Position = 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';
export declare const checkMenuPosition: (menu: HTMLUListElement | null, target: RefObject<HTMLButtonElement | null>, position: Position, setMenuPosition: Dispatch<SetStateAction<Position>>) => void;
export declare const BottomRightPosition: import("styled-components").FlattenSimpleInterpolation;
export declare const BottomLeftPosition: import("styled-components").FlattenSimpleInterpolation;
export declare const TopRightPosition: import("styled-components").FlattenSimpleInterpolation;
export declare const TopLeftPosition: import("styled-components").FlattenSimpleInterpolation;
export declare const moveFocus: (parent: HTMLUListElement | null, currentFocus: Element | null, calcNextFocus: (parent: HTMLUListElement | null, child: Element | null, stop?: boolean | undefined, onMenuReachTop?: (() => void) | undefined, onMenuReachBottom?: (() => void) | undefined) => any, stop?: boolean | undefined, onMenuReachTop?: (() => void) | undefined, onMenuReachBottom?: (() => void) | undefined) => void;
export declare const nextItem: (parent: Element | null, child: Element | null, stop?: boolean | undefined, onMenuReachTop?: (() => void) | undefined, onMenuReachBottom?: (() => void) | undefined) => Element | null | undefined | ChildNode;
export declare const previousItem: (parent: Element | null, child: Element | null, stop?: boolean | undefined, onMenuReachTop?: (() => void) | undefined, onMenuReachBottom?: (() => void) | undefined) => Element | null | undefined | ChildNode;
//# sourceMappingURL=utils.d.ts.map