import type { InputStatus, InputTypes } from "../inputTypes";
import type { ForwardedRef } from 'react';
import * as React from 'react';
import { InputHTMLAttributes } from 'react';
import { InputData } from "../../common/dom/changeInputData";
export interface ExtraProps {
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: InputTypes;
    /** Количество иконок отображаемых справа */
    iconCount?: number;
}
export declare type CustomInputHandler = (newInputData: InputData) => InputData;
export interface TextInputProps extends InputHTMLAttributes<HTMLInputElement> {
    /** Делает высоту компонента больше или меньше обычной */
    dimension?: InputTypes;
    /** Иконки для отображения в правом углу поля */
    icons?: React.ReactNode;
    /** Отображать иконку статуса */
    displayStatusIcon?: boolean;
    /** Отображать иконку очистки поля */
    displayClearIcon?: boolean;
    /** Статус поля */
    status?: InputStatus;
    /** Ref контейнера компонента */
    containerRef?: ForwardedRef<HTMLDivElement>;
    /**
     * Дает возможность изменить значение поля ввода и позицию курсора до момента отображения при следующем цикле рендеринга.
     * Используется для создания масок ввода
     */
    handleInput?: CustomInputHandler;
    /**  Наличие этого атрибута отключает возможность выделения и копирования значения поля */
    disableCopying?: boolean;
}
export declare const TextInput: React.ForwardRefExoticComponent<TextInputProps & React.RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.d.ts.map