import * as React from 'react';
import { useCallback, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import styled, { css } from 'styled-components';
import { ReactComponent as CalendarSVG } from './Calendar.svg';
import { TextInput, TextInputProps } from '../TextInput';
import { Calendar as CalendarBase, CalendarPropType } from '~/components/Calendar';
import observeRect from '~/components/common/observeRect';
import { refSetter } from '~/components/common/utils/refSetter';
import useInterval from '~/components/common/useInterval';
import { defaultDateInputHandle } from '~/components/input/DateInput/defaultDateInputHandle';
import { changeInputData } from '~/components/common/dom/changeInputData';
import { isValidDate } from './isValidDate';
import { defaultParser } from './defaultParser';
import { defaultDateRangeInputHandle } from '~/components/input/DateInput/defaultDateRangeInputHandle';

const POSITIONS = ['top', 'bottom'];
type Position = typeof POSITIONS[number];

const Calendar = styled(CalendarBase)`
  border-radius: 4px;
  ${(props) => props.theme.shadow.NonClickable}
`;

const Input = styled(TextInput)`
  input {
    letter-spacing: 1px;
  }
`;

const bottomCalendarPosition = css`
  bottom: 0;

  ${Calendar} {
    position: absolute;
    right: 0;
    top: 8px;
  }
`;

const topCalendarPosition = css`
  top: 0;

  ${Calendar} {
    position: absolute;
    right: 0;
    bottom: 8px;
  }
`;

const CalendarContainer = styled.div<{ position?: Position }>`
  position: absolute;
  left: 0;
  right: 0;
  height: 0;
  ${({ position }) => (position === 'top' ? topCalendarPosition : bottomCalendarPosition)}
`;

const Icon = styled(CalendarSVG)`
  > * {
    fill: ${(props) => props.theme.color.basic.tertiary};
  }

  &:hover {
    cursor: pointer;
  }

  &:hover > * {
    fill: ${(props) => props.theme.color.basic.hover};
  }
`;
const PositionedPortalContainer = styled.div`
  position: fixed;
  overflow: visible;
  z-index: ${({ theme }) => theme.zIndex.dropdown};
`;

interface PositionInPortalProps {
  targetRef: React.RefObject<HTMLElement>;
}

const PositionInPortal = ({ targetRef, children }: React.PropsWithChildren<PositionInPortalProps>) => {
  const positionedPortalContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const node = positionedPortalContainerRef.current;
    if (node && targetRef.current) {
      const observer = observeRect(targetRef.current, (rect) => {
        if (rect) {
          const { x, y, height, width } = rect;
          const { style } = node;
          style.top = `${y}px`;
          style.left = `${x}px`;
          style.height = `${height}px`;
          style.width = `${width}px`;
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [targetRef.current, positionedPortalContainerRef.current]);

  return createPortal(
    <PositionedPortalContainer ref={positionedPortalContainerRef} children={children} />,
    document.body,
  );
};

// IE11 fix toLocaleDateString('ru') extra invisible characters by using .replace(/[^ -~]/g,'')
function defaultFormatter(isoValues: string[], joinString = ' - '): string {
  return isoValues
    .map((iso) => new Date(iso))
    .map((date) => (isValidDate(date) ? date.toLocaleDateString('ru').replace(/[^ -~]/g, '') : '__.__.____'))
    .join(joinString);
}

function checkCalendarOpenPosition(
  calendarRef: React.RefObject<HTMLDivElement>,
  calendarDisplay: Position,
  setCalendarDisplay: React.Dispatch<React.SetStateAction<Position>>,
) {
  if (calendarRef.current && setCalendarDisplay) {
    const node = calendarRef.current;
    const rect = node.getBoundingClientRect();
    const viewportHeight = window.innerHeight;

    if (calendarDisplay === 'bottom' && viewportHeight - rect.bottom < 0) {
      setCalendarDisplay('top');
    } else if (calendarDisplay === 'top' && viewportHeight - rect.bottom - rect.height - 100 > 0) {
      setCalendarDisplay('bottom');
    }
  }
}

export interface DateInputProps extends TextInputProps, Omit<CalendarPropType, 'onChange'> {
  /** Устанавливает тип ввода даты или интервала даты*/
  type?: 'date' | 'date-range';

  /** Устанавливает начальное состояние видимости календаря */
  defaultIsCalendarOpen?: boolean;

  formatter?: (isoValues: string[], joinString?: string) => string;
  parser?: (stringValue?: string, isDateRangeValue?: boolean) => Date[];
}

export const DateInput = React.forwardRef<HTMLInputElement, DateInputProps>(
  (
    {
      type = 'date',
      defaultIsCalendarOpen = false,
      formatter = defaultFormatter,
      parser = defaultParser,
      minDate,
      maxDate,
      validator,
      filterDate,
      localeName,
      ...props
    },
    ref,
  ) => {
    const calendarProps = { minDate, maxDate, validator, filterDate, localeName };
    const isDateRange = type === 'date-range';
    const handleInput = props.handleInput || (isDateRange ? defaultDateRangeInputHandle : defaultDateInputHandle);
    const [calendarValue, setCalendarValue] = useState<Date | (Date | null)[] | null>(null);
    const inputRef = useRef<HTMLInputElement>(null);
    const inputContainerRef = useRef<HTMLDivElement>(null);
    const calendarRef = useRef<HTMLDivElement>(null);
    const [isCalendarOpen, setCalendarOpen] = useState<boolean>(defaultIsCalendarOpen);
    const [calendarDisplay, setCalendarDisplay] = useState<Position>('bottom');

    const [startDate, endDate, selectedCalendarValue] = Array.isArray(calendarValue)
      ? calendarValue
      : [undefined, undefined, calendarValue];

    useInterval(checkCalendarOpenPosition, 500, calendarRef, calendarDisplay, setCalendarDisplay);

    const handleCalendarChange = (maybeDate: Date | (Date | null)[] | null) => {
      setCalendarValue(maybeDate);
      if (inputRef.current) {
        if (!maybeDate) {
          changeInputData(inputRef.current, { value: '' });
          return;
        }

        const values = Array.isArray(maybeDate) ? maybeDate : [maybeDate];
        const toFormatValues = values
          .map((date) => (date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : date))
          .map((date) => (date ? date.toISOString().substring(0, 10) : ''));
        const value = formatter(toFormatValues);
        changeInputData(inputRef.current, { value });
      }
    };

    const calendarContainerRef = useCallback(
      (node: HTMLElement | null) => {
        if (isCalendarOpen && node) {
          node.focus();
          setCalendarDisplay('bottom');
        }
      },
      [isCalendarOpen],
    );

    const handleBlurCalendarContainer = () => {
      setCalendarOpen(false);
    };

    const handleButtonClick = () => {
      const calValue = parser(inputRef.current?.value, isDateRange);
      setCalendarValue(calValue);
      setCalendarOpen(true);
    };

    return (
      <Input
        {...props}
        ref={refSetter(ref, inputRef)}
        handleInput={handleInput}
        icons={<Icon onClick={handleButtonClick} tabIndex={0} />}
        containerRef={inputContainerRef}
      >
        {isCalendarOpen && (
          <PositionInPortal targetRef={inputContainerRef}>
            <CalendarContainer
              ref={calendarContainerRef}
              tabIndex={-1}
              onBlur={handleBlurCalendarContainer}
              position={calendarDisplay}
            >
              <Calendar
                {...calendarProps}
                ref={calendarRef}
                selected={selectedCalendarValue}
                startDate={startDate}
                endDate={endDate}
                onChange={handleCalendarChange}
                range={isDateRange}
              />
            </CalendarContainer>
          </PositionInPortal>
        )}
      </Input>
    );
  },
);

DateInput.defaultProps = { dimension: 'm' };
DateInput.displayName = 'DateInput';
