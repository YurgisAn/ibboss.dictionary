import type { HTMLAttributes } from 'react';
import * as React from 'react';
import styled, { css } from 'styled-components';
import {
  backgroundColor,
  backgroundHoverColor,
  colorTextMixin,
  DropDownItemDimension,
  paddings,
  styleTextMixin,
} from './mixins';

export interface DropDownItemProps extends HTMLAttributes<HTMLLIElement> {
  /** Отключение секции */
  disabled?: boolean;
  /** Размер DropDownItems */
  dimension?: DropDownItemDimension;
  /** Активная секция DropDownItems */
  selected?: boolean;
  /** Значение DropDownItems */
  value?: string | number | undefined;
}

const Item = styled.li<{
  disabled?: boolean;
  dimension: DropDownItemDimension;
  selected?: boolean;
  width?: number;
  id?: string;
}>`
  display: flex;
  align-items: center;
  user-select: none;
  flex-flow: wrap;
  position: relative;
  justify-content: space-between;
  outline: none;
  cursor: pointer;
  white-space: pre;
  margin: 0;
  ${paddings}
  ${styleTextMixin}
  ${colorTextMixin}
  ${backgroundColor}
  ${({ disabled }) => disabled && 'cursor: default;'};

  &:hover {
    ${backgroundHoverColor}
  }

  &:focus {
    background: ${({ theme, disabled }) =>
      disabled ? theme.color.background.primary : theme.color.background.secondary};
    ${({ id, disabled, theme }) =>
      id &&
      `ul[data-selectedid="${id}"] && {background: ${
        disabled ? theme.color.background.primary : theme.color.background.secondary
      };}`}}
  }
`;

export const DropDownItem = React.forwardRef<HTMLLIElement, DropDownItemProps>(
  ({ children, disabled = false, dimension = 'l', selected = false, id, ...props }, ref) => {
    return (
      <Item
        ref={ref}
        disabled={disabled}
        dimension={dimension}
        tabIndex={props.tabIndex ? props.tabIndex : -1}
        selected={selected}
        id={id}
        {...props}
      >
        {children}
      </Item>
    );
  },
);
