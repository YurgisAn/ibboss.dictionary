import React, { useRef } from 'react';
import styled from 'styled-components';
import { ReactComponent as HelpOutline } from '@openvtb/admiral-icons/build/service/HelpOutline.svg';
import { Meta, Story } from '@storybook/react';
import { withDesign } from 'storybook-addon-designs';

import { Button, Hint, HintProps } from '~/components';

const Separator = styled.div<{ height?: number }>`
  height: ${({ height }) => (height ? height : 20)}px;
`;
const Desc = styled.div`
  font-family: 'VTB Group UI';
  font-size: 16px;
  line-height: 24px;
`;
const StyledButton = styled(Button)`
  padding: 4px;
`;
const Description = () => (
  <Desc>
    Всплывающая подсказка используется для ситуаций, когда требуется пояснить или раскрыть информацию более детально.
    Вызывается либо по клику на иконку Question, либо по ховеру на любом элементе, когда недостаточно Tooltip-а.
    <Separator />В случае, когда Hint вызывается по клику, у нас есть возможность его закрыть кликом вне Hint-а, либо
    нажатием на крестик.
    <Separator />В сценарии, когда Hint вызывается по ховеру, иконки закрытия на компоненте нет и он скрывается, когда
    мы уводим курсор с объекта к которому он привязан.
    <Separator />
    Hint имеет три фиксированных по ширине размера: 280px, 384px и 488px. Которые используются в зависимости от
    предполагаемого объема текста. Высота компонента настраивается автоматически при редактировании.
    <Separator />
    По умолчанию Hint-у присваивается самый большой размер, Hint появляется по ховеру.
  </Desc>
);

export default {
  title: 'Example/Hint',
  decorators: [withDesign],
  component: Hint,
  parameters: {
    componentSubtitle: <Description />,
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/nwmAE2QMjzDD1FECyC2EUL/01-%E2%9C%85-UI-Kit-2.1-Internet-bank?node-id=64557%3A319',
    },
    actions: { argTypesRegex: '^on.*' },
  },
  argTypes: {
    dimension: {
      options: ['l', 'm', 's'],
      control: { type: 'radio' },
    },
    visibilityTrigger: {
      options: ['hover', 'click'],
      control: { type: 'radio' },
    },
  },
} as Meta;

const text = `At breakpoint boundaries, mini units divide the screen into a fixed master grid, and multiples
of mini units map to fluid grid column widths and row heights.`;

const Template1: Story<HintProps> = ({ id, ...args }) => {
  return (
    <Hint {...args} id={id}>
      <StyledButton dimension="s" aria-label="Additional information" aria-describedby={id}>
        <HelpOutline height={24} width={24} aria-hidden />
      </StyledButton>
    </Hint>
  );
};

const Template2: Story<HintProps & { id1: string; id2: string }> = ({ id1, id2, ...args }) => {
  return (
    <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>
      <Hint {...args} renderContent={() => text} id={id1}>
        <StyledButton dimension="s" aria-label="Additional information" aria-describedby={id1}>
          <HelpOutline height={24} width={24} aria-hidden />
        </StyledButton>
      </Hint>
      <Hint {...args} renderContent={() => text} id={id2}>
        <StyledButton dimension="s" aria-label="Additional information" aria-describedby={id2}>
          <HelpOutline height={24} width={24} aria-hidden />
        </StyledButton>
      </Hint>
    </div>
  );
};

const Template3: Story<HintProps> = ({ id, ...args }) => {
  const btnRef = useRef<HTMLButtonElement>(null);

  return (
    <StyledButton dimension="s" ref={btnRef}>
      Press&nbsp;&nbsp;&nbsp;
      <Hint {...args} renderContent={() => text} target={btnRef} id={id}>
        <HelpOutline tabIndex={0} height={24} width={24} aria-label="Help Icon" aria-describedby={id} />
      </Hint>
    </StyledButton>
  );
};

const Template4: Story<HintProps> = ({ id, ...args }) => {
  return (
    <Hint
      {...args}
      visibilityTrigger="click"
      renderContent={() => (
        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>
          {text}
          <Separator height={8} />
          <a href="#">Link</a>
        </div>
      )}
      id={id}
    >
      <StyledButton dimension="s" aria-label="Additional information" aria-describedby={id}>
        <HelpOutline height={24} width={24} />
      </StyledButton>
    </Hint>
  );
};

export const HintBase = Template1.bind({});
HintBase.args = { renderContent: () => text, id: 'hint_base' };
HintBase.storyName = 'Hint. Базовый пример.';

/**  docs.story.description doesn't shown for the first story, only for the other stories on the page */
export const HintPosition = Template2.bind({});
HintPosition.args = { id1: 'hint_pos1', id2: 'hint_pos2' };
HintPosition.storyName = 'Hint. Позиционирование.';
HintPosition.parameters = {
  docs: {
    description: {
      story: `Компонент имеет 4 варианта позиционирования: снизу справа, снизу слева, сверху справа, 
      сверху слева. Позиции перечислены в порядке приоритета. Данный пример демонстрирует все 4 варианта. Если 
      нужно увидеть расположение хинта сверху, следует прокрутить страницу таким образом, чтобы пространтсва 
      под кнопками было недостаточно для отображения хинта. `,
    },
  },
};

export const HintClick = Template1.bind({});
HintClick.args = {
  visibilityTrigger: 'click',
  renderContent: () => text,
  id: 'hint_click',
};
HintClick.storyName = 'Hint. Появление по клику.';

export const HintLink = Template4.bind({});
HintLink.args = { id: 'hint_link' };
HintLink.storyName = 'Hint. Текст с ссылкой.';
HintLink.parameters = {
  docs: {
    description: {
      story: `В качества контента хинта может выступать любой ReactNode. В случае если 
    хинт содержит в себе ссылку, триггером его появления должен быть click.`,
    },
    source: {
      type: 'code',
    },
  },
};

export const HintTarget = Template3.bind({});
HintTarget.args = { id: 'hint_target' };
HintTarget.storyName = 'Hint. Позиционирование относительно target.';
HintTarget.parameters = {
  docs: {
    source: {
      type: 'code',
    },
  },
};

export const HintMobile = Template2.bind({});
HintMobile.args = { isMobile: true, id1: 'hint_pos1_mobile', id2: 'hint_pos2_mobile' };
HintMobile.storyName = 'Hint. Адаптив.';
HintMobile.parameters = {
  docs: {
    description: {
      story: `На экранах мобильных устройств, меньше 640px, компонент адаптируется по ширине к рабочей области устройства. `,
    },
  },
};
