import React, { useState } from 'react';
import styled from 'styled-components';
import { Meta, Story } from '@storybook/react';
import { Chips, ChipsProps } from './index';
import { withDesign } from 'storybook-addon-designs';

import { ReactComponent as VacationIcon } from '@openvtb/admiral-icons/build/category/VacationSolid.svg';
import { ReactComponent as TrophyIcon } from '@openvtb/admiral-icons/build/category/TrophySolid.svg';
import { ReactComponent as BurnIcon } from '@openvtb/admiral-icons/build/category/BurnSolid.svg';

const Separator = styled.div`
  height: 20px;
`;

const Desc = styled.div`
  font-family: 'VTB Group UI';
  font-size: 16px;
  line-height: 24px;
`;

const listData = [
  { id: '1', label: 'Москва', disabled: false, selected: false },
  { id: '2', label: 'Тверь', disabled: false, selected: false },
  { id: '3', label: 'Самара', disabled: false, selected: false },
];

const listDataIcon = [
  { id: '1', label: 'Москва', disabled: false, icon: <VacationIcon width={24} />, selected: false },
  { id: '2', label: 'Тверь', disabled: false, icon: <TrophyIcon width={24} />, selected: false },
  { id: '3', label: 'Самара', disabled: false, icon: <BurnIcon width={24} />, selected: false },
];

const listDataIconTooltip = [
  { id: '1', label: 'Ограниченное пространство', disabled: false },
  { id: '2', label: 'Ограниченное пространство', disabled: false },
  { id: '3', label: 'Ограниченное пространство', disabled: false },
];

const WrapperChip = styled.div<{ dimension?: 'm' | 's' }>`
  display: flex;
  & > div {
    margin-right: ${({ dimension }) => (dimension === 's' ? 8 : 12)}px;
    & svg {
      margin-left: ${({ dimension }) => (dimension === 's' ? 8 : 10)}px;
    }
  }
`;

const WrapperContent = styled.div`
  display: flex;
  align-items: center;
`;

const StyledChipsTooltip = styled(Chips)`
  width: 160px;
`;

const Description = () => (
  <Desc>
    Чипсы представляют собой перечень выбранных нами фильтров, опций или каких-либо элементов из списка. В библиотеке
    есть два типа чипсов — Filled и Outlined. Chips можно использовать при множественном выборе из списка опций для
    большей доступности отображения выбранных опций и возможности их быстрого редактирования (добавление, удаление).
    Примером может служить компонент Multi Select или выбор участников встречи, когда имена выбранных людей выводятся
    списком в виде чипсов. При нажатии на чипс элемент удаляется из списка выбранных.
    <Separator />В зависимости от ситуации используются большие — 28 px, либо маленькие — 24 px чипсы.
  </Desc>
);

export default {
  title: 'Example/Chips',
  component: Chips,
  decorators: [withDesign],
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/nwmAE2QMjzDD1FECyC2EUL/01-%E2%9C%85-UI-Kit-2.1-Internet-bank?node-id=67048%3A209',
    },
    componentSubtitle: <Description />,
    layout: 'centered',
    docs: {
      source: {
        type: 'code',
      },
    },
  },
  argTypes: {
    dimension: {
      options: ['m', 's'],
      control: { type: 'radio' },
      defaultValue: 'm',
    },
    appearance: {
      control: { type: 'radio' },
      options: ['outlined', 'filled'],
      defaultValue: 'outlined',
    },
    disabled: {
      control: { type: 'boolean' },
    },
  },
} as Meta;

const ChipsTagsDemo: Story<ChipsProps> = (props) => {
  return (
    <WrapperChip dimension={props.dimension}>
      {listData.map((item) => {
        return (
          <Chips {...props} key={item.id}>
            {item.label}
          </Chips>
        );
      })}
    </WrapperChip>
  );
};

const ChipsTagsCloseDemo: Story<ChipsProps> = (props) => {
  const [dataList, setData] = useState(listData);
  return (
    <WrapperChip dimension={props.dimension}>
      {dataList.map((item) => {
        return (
          <Chips key={item.id} {...props} onClose={() => setData((prev) => prev.filter((d) => d.id !== item.id))}>
            {item.label}
          </Chips>
        );
      })}
    </WrapperChip>
  );
};

const ChipsIconDemo: Story<ChipsProps> = (props) => (
  <WrapperChip dimension={props.dimension}>
    {listDataIcon.map((d) => {
      return (
        <Chips {...props} key={d.id}>
          <WrapperContent>
            {d.label}
            {d.icon}
          </WrapperContent>
        </Chips>
      );
    })}
  </WrapperChip>
);

const ChipsSelectDemo: Story<ChipsProps> = (props) => {
  const [selected, setSelected] = useState('');
  return (
    <WrapperChip dimension={props.dimension}>
      {listData.map((item) => {
        return (
          <Chips
            {...props}
            key={item.id}
            selected={selected === item.id}
            onClick={() => (props.disabled ? null : setSelected(item.id))}
          >
            {item.label}
          </Chips>
        );
      })}
    </WrapperChip>
  );
};

const ChipsMultiSelectIconDemo: Story<ChipsProps> = (props) => {
  const [list, setList] = useState(listDataIcon);
  const handleKey = (id: string) => {
    setList((prev) => prev.map((item) => (item.id === id ? { ...item, selected: !item.selected } : { ...item })));
  };
  return (
    <WrapperChip dimension={props.dimension}>
      {list.map((item) => {
        return (
          <Chips
            {...props}
            key={item.id}
            onClick={() => (props.disabled ? null : handleKey(item.id))}
            selected={item.selected}
          >
            <WrapperContent>
              {item.label}
              {item.icon}
            </WrapperContent>
          </Chips>
        );
      })}
    </WrapperChip>
  );
};

const ChipsTagsCloseTooltipDemo: Story<ChipsProps> = (props) => {
  return (
    <WrapperChip>
      {listDataIconTooltip.map((item) => {
        return (
          <StyledChipsTooltip {...props} renderContentTooltip={() => item.label} key={item.id}>
            {item.label}
          </StyledChipsTooltip>
        );
      })}
    </WrapperChip>
  );
};

export const ChipsTags = ChipsTagsDemo.bind({});
export const ChipsTagsClose = ChipsTagsCloseDemo.bind({});
export const ChipsIcon = ChipsIconDemo.bind({});
export const ChipsSelect = ChipsSelectDemo.bind({});
export const ChipsMultiSelectIcon = ChipsMultiSelectIconDemo.bind({});
export const ChipsTooltip = ChipsTagsCloseTooltipDemo.bind({});

ChipsTags.storyName = 'Chips базовый пример';
ChipsTagsClose.storyName = 'Chips с текстом и иконкой зыкрыть';
ChipsIcon.storyName = 'Chips с иконкой';
ChipsSelect.storyName = 'Chips с текстом и выбором';
ChipsMultiSelectIcon.storyName = 'Chips  для множественного выбора';
