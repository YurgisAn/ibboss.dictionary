import React from 'react';
import styled from 'styled-components';
import { Meta, Story } from '@storybook/react';
import { ReactComponent as StarSolid } from '@openvtb/admiral-icons/build/system/StarSolid.svg';
import { Button, ButtonProps } from './index';
import { PseudoIcon, PseudoText } from './skeleton';
import { Additional_L_normal } from '~/components/Typography';
import { Spinner } from '~/components/Spinner';
import { withDesign } from 'storybook-addon-designs';
import { filterKeysWithUndefinedValues } from '~/components/common/utils/filterKeysWithUndefinedValues';

const WrapperButton = styled.div`
  display: flex;
  flex-wrap: wrap;
  > * {
    margin: 8px;
  }
  justify-content: space-between;
  align-items: center;
`;
const Separator = styled.div`
  height: 20px;
`;

export default {
  title: 'Example/Button',
  component: Button,
  decorators: [withDesign],
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/nwmAE2QMjzDD1FECyC2EUL/%E2%9C%85-UI-Kit-2.1-Internet-bank?node-id=64086%3A71961',
    },
  },
  argTypes: {
    dimension: {
      control: {
        type: 'radio',
        options: ['xl', 'l', 'm', 's'],
      },
    },
    appearance: {
      control: {
        type: 'select',
        options: ['primary', 'secondary', 'danger', 'success', 'ghost', 'white'],
      },
    },
    onClick: { action: 'clicked' },

    type: {
      control: {
        type: 'radio',
        options: ['button', 'submit', 'reset'],
      },
    },
  },
} as Meta;

const ButtonContainer = styled.div`
  padding: 24px;
  position: relative;
  display: block;
  > * {
    margin: 8px 16px 0 0;
  }
`;

const ButtonWithIconDemo: Story<ButtonProps> = () => (
  <>
    <WrapperButton>
      <div>
        <Additional_L_normal> Dimension - xl</Additional_L_normal>
        <Button dimension="xl" appearance="primary">
          Button 56
          <StarSolid />
        </Button>
      </div>
      <div>
        <Additional_L_normal> Dimension - l</Additional_L_normal>
        <Button dimension="l" appearance="secondary">
          <StarSolid />
          Button 48
        </Button>
      </div>
      <div>
        <Additional_L_normal> Dimension - m</Additional_L_normal>
        <Button dimension="m" appearance="danger">
          Button 40
          <StarSolid />
        </Button>
      </div>
      <div>
        <Additional_L_normal> Dimension - s</Additional_L_normal>
        <Button dimension="s" appearance="success">
          <StarSolid />
          Button 32
        </Button>
      </div>
    </WrapperButton>
    <Separator />
    <div>
      <Additional_L_normal>Button with icon stretch</Additional_L_normal>
      <Button dimension="l" appearance="primary" style={{ width: '100%' }}>
        <StarSolid />
        Button
      </Button>
    </div>
  </>
);

const ButtonLoaderDemo: Story<ButtonProps> = () => (
  <div>
    <Additional_L_normal>Button with loader</Additional_L_normal>
    <Separator />
    <Button disabled displayAsSquare>
      <Spinner dimension="m" />
    </Button>
    <Separator />
    <div>
      <Additional_L_normal>Button with loader stretch</Additional_L_normal>
      <Separator />
      <Button disabled style={{ width: '100%' }}>
        <Spinner dimension="m" />
      </Button>
    </div>
  </div>
);

const ButtonSkeleton: Story<ButtonProps> = ({ appearance = 'primary', dimension = 'xl', ...args }) => (
  <WrapperButton>
    <Button disabled dimension={dimension} appearance={appearance} {...args}>
      <PseudoText dimension={dimension} appearance={appearance} />
    </Button>
    <Button disabled dimension={dimension} appearance={appearance} {...args}>
      <PseudoIcon dimension={dimension} appearance={appearance} />
      <PseudoText dimension={dimension} appearance={appearance} />
    </Button>
    <Button disabled dimension={dimension} appearance={appearance} {...args}>
      <PseudoText dimension={dimension} appearance={appearance} />
      <PseudoIcon dimension={dimension} appearance={appearance} />
    </Button>
    <div style={{ marginLeft: 10 }}>
      <Button disabled displayAsSquare dimension={dimension} appearance={appearance} {...args}>
        <PseudoIcon dimension={dimension} appearance={appearance} />
      </Button>
    </div>
  </WrapperButton>
);

const ButtonPlaygroundDemo: Story<ButtonProps> = ({ children, ...args }) => {
  const cleanProps = filterKeysWithUndefinedValues(args);
  return (
    <div>
      <ButtonContainer>
        <Button {...cleanProps}>Button 56</Button>

        <Button {...cleanProps}>
          <StarSolid />
          Button 56
        </Button>

        <Button {...cleanProps}>Button 56</Button>

        <Button {...cleanProps}>
          Button 56
          <StarSolid />
        </Button>

        <Button {...cleanProps}>
          <StarSolid />
        </Button>

        <Button {...cleanProps} displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer>
        <Button dimension="xl">Button 56</Button>

        <Button dimension="xl">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl">Button 56</Button>

        <Button dimension="xl">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl">
          <StarSolid />
        </Button>

        <Button dimension="xl" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer>
        <Button dimension="xl" appearance="secondary">
          Button 56
        </Button>

        <Button dimension="xl" appearance="secondary">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl" appearance="secondary">
          Button 56
        </Button>

        <Button dimension="xl" appearance="secondary">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="secondary">
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="secondary" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer>
        <Button dimension="xl" appearance="ghost">
          Button 56
        </Button>

        <Button dimension="xl" appearance="ghost">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl" appearance="ghost">
          Button 56
        </Button>

        <Button dimension="xl" appearance="ghost">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="ghost">
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="ghost" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer>
        <Button dimension="xl" appearance="danger">
          Button 56
        </Button>

        <Button dimension="xl" appearance="danger">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl" appearance="danger">
          Button 56
        </Button>

        <Button dimension="xl" appearance="danger">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="danger">
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="danger" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer>
        <Button dimension="xl" appearance="success">
          Button 56
        </Button>

        <Button dimension="xl" appearance="success">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl" appearance="success">
          Button 56
        </Button>

        <Button dimension="xl" appearance="success">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="success">
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="success" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
      <ButtonContainer style={{ backgroundColor: '#2B313B' }}>
        <Button dimension="xl" appearance="white">
          Button 56
        </Button>

        <Button dimension="xl" appearance="white">
          <StarSolid />
          Button 56
        </Button>

        <Button dimension="xl" appearance="white">
          Button 56
        </Button>

        <Button dimension="xl" appearance="white">
          Button 56
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="white">
          <StarSolid />
        </Button>

        <Button dimension="xl" appearance="white" displayAsSquare>
          <StarSolid />
        </Button>
      </ButtonContainer>
    </div>
  );
};

export const ButtonWithIcon = ButtonWithIconDemo.bind({});
export const ButtonLoader = ButtonLoaderDemo.bind({});
export const Skeleton = ButtonSkeleton.bind({});

export const Playground = ButtonPlaygroundDemo.bind({});
Playground.args = {
  children: 'Нажми меня',
};
