import { css } from 'styled-components';

import { Theme } from '../../themes';
import { TYPOGRAPHY } from '../../Typography';

import type { Dimension } from '../constants';
import {
  BORDER_WIDTH_CHECKED,
  BORDER_WIDTH_DEFAULT,
  FONT_SIZE_M,
  FONT_SIZE_S,
  FONT_WEIGHT,
  LINE_HEIGHT_M,
  LINE_HEIGHT_S,
} from '../constants';

const borderColor = (theme: Theme, checked: boolean, disabled?: boolean) => {
  if (disabled) return theme.color.text.tertiary;
  if (checked) return theme.color.basic.primary;
  return theme.color.basic.tertiary;
};

const borderColorOnHover = (theme: Theme, checked: boolean) => {
  if (checked) return theme.color.basic.hover;
  return theme.color.basic.primary;
};

const borderWidth = (checked: boolean) => (checked ? BORDER_WIDTH_CHECKED : BORDER_WIDTH_DEFAULT);

export const borderMixin = css<{ checked: boolean; theme: Theme; disabled?: boolean }>`
  border: ${({ theme, checked, disabled }) => `${borderWidth(checked)} solid ${borderColor(theme, checked, disabled)}`};
`;

export const borderHoverMixin = css<{ checked: boolean; theme: Theme }>`
  border: ${({ theme, checked }) => `${borderWidth(checked)} solid ${borderColorOnHover(theme, checked)}`};
`;

export const textMixin = css<{ theme: Theme; dimension: Dimension; disabled?: boolean }>`
  font-family: ${TYPOGRAPHY.fontFamily};
  font-size: ${({ dimension }) => (dimension === 'm' ? FONT_SIZE_M : FONT_SIZE_S)};
  line-height: ${({ dimension }) => (dimension === 'm' ? LINE_HEIGHT_M : LINE_HEIGHT_S)};
  font-weight: ${FONT_WEIGHT};
  color: ${({ disabled, theme }) => (disabled ? theme.color.text.tertiary : theme.color.basic.secondary)};
`;
