import type { FC, KeyboardEvent, MouseEvent, ReactNode } from 'react';
import React, { forwardRef, HTMLAttributes, useCallback, useLayoutEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { keyboardKey } from '~/components/common/keyboardKey';
import { refSetter } from '~/components/common/utils/refSetter';
import useInterval from '~/components/common/useInterval';
import { useClickOutside } from '~/components/common/hooks/useClickOutside';

import { PositionInPortal } from './PositionInPortal';
import { Item } from './Item';
import { DropDownMenu } from './Menu';
import type { Dimension } from './Buton';
import { Button } from './Buton';
import type { Position } from './utils';
import { BottomLeftPosition, BottomRightPosition, checkMenuPosition, TopLeftPosition, TopRightPosition } from './utils';

const MenuContainer = styled.div<{ position: Position }>`
  position: absolute;
  left: 0;
  right: 0;
  height: 0;
  ${({ position }) => {
    switch (position) {
      case 'bottom-left':
        return BottomLeftPosition;
      case 'top-right':
        return TopRightPosition;
      case 'top-left':
        return TopLeftPosition;
      case 'bottom-right':
      default:
        return BottomRightPosition;
    }
  }}
`;

const HiddenTab = styled.div`
  height: 0;
  width: 0;
  opacity: 0;
`;

export interface OverflowMenuItem extends HTMLAttributes<HTMLLIElement> {
  id: string;
  content: ReactNode;
  disabled?: boolean;
  icon?: ReactNode;
  badge?: number;
}

export interface OverflowMenuProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'onChange'> {
  options: Array<OverflowMenuItem>;
  selected: string | null;
  onChange: (id: string) => void;
  dimension?: Dimension;
  disabled?: boolean;
  onMenuReachTop: () => void;
  onMenuReachBottom: () => void;
  menuFocus: 'firstOption' | 'lastOption' | 'activeOption';
  setMenuFocus: React.Dispatch<React.SetStateAction<'firstOption' | 'lastOption' | 'activeOption'>>;
}

export const TabOverflowMenu: FC<any> = forwardRef<HTMLButtonElement, OverflowMenuProps>(
  (
    {
      dimension = 'l',
      disabled = false,
      options,
      selected,
      onMenuReachTop,
      menuFocus,
      onChange,
      onMenuReachBottom,
      setMenuFocus,
      ...props
    },
    ref,
  ) => {
    const [menuOpened, setMenuOpened] = useState<boolean>(false);
    const [menuPosition, setMenuPosition] = useState<Position>('bottom-right');
    const btnRef = useRef<HTMLButtonElement | null>(null);
    const [menu, setMenu] = useState<HTMLUListElement | null>(null);
    const menuRef = useCallback(
      (node: HTMLUListElement) => {
        setMenu(node);
      },
      [menuOpened],
    );

    const reverseMenu = (e: any) => {
      e.preventDefault();
      setMenuOpened((prevOpened) => !prevOpened);
    };

    const closeMenu = () => {
      /** Set focus so that SHIFT + TAB works correctly */
      btnRef.current?.focus();
      setMenuOpened(false);
      setMenuFocus('activeOption');
    };

    useLayoutEffect(() => {
      if (menuOpened) {
        checkMenuPosition(menu, btnRef, menuPosition, setMenuPosition);
      }
    }, [menuOpened]);

    useInterval(checkMenuPosition, 500, menu, btnRef, menuPosition, setMenuPosition);
    useClickOutside([btnRef.current as HTMLButtonElement, menu], closeMenu);

    const handleMenuKeyDown = (e: KeyboardEvent<HTMLUListElement>) => {
      const code = keyboardKey.getCode(e);
      if (code === keyboardKey.Tab) {
        closeMenu();
      }
    };
    const handleBtnFocus = (e: React.FocusEvent<HTMLButtonElement>) => {
      setMenuOpened(true);
    };
    const handleReachBottom = () => {
      closeMenu();
      onMenuReachBottom?.();
    };
    const handleReachTop = () => {
      closeMenu();
      onMenuReachTop?.();
    };
    return (
      <>
        {!menuOpened &&
          options.map(({ id, content }) => {
            // When menu is closed, render invisible tabs so that screen reader can count tabs amount correctly
            return (
              <HiddenTab role="tab" tabIndex={-1} key={id} id={id}>
                {content}
              </HiddenTab>
            );
          })}
        <Button
          {...props}
          ref={refSetter(ref, btnRef)}
          dimension={dimension}
          disabled={disabled}
          menuOpened={menuOpened}
          onMouseDown={reverseMenu}
          onFocus={handleBtnFocus}
          role="none"
          aria-hidden
        />
        {menuOpened && (
          <PositionInPortal targetRef={btnRef} position={menuPosition} container={btnRef.current?.parentElement}>
            <MenuContainer position={menuPosition} role="none">
              <DropDownMenu
                ref={menuRef}
                dimension={dimension}
                onKeyDown={handleMenuKeyDown}
                onMenuReachTop={handleReachTop}
                onMenuReachBottom={handleReachBottom}
                menuFocus={menuFocus}
                setMenuFocus={setMenuFocus}
                role="none"
              >
                {options.map(({ disabled: optionDisabled, id, ...props }) => {
                  const isDisabled = disabled || optionDisabled;
                  const handleClick = (e: MouseEvent<HTMLLIElement>) => {
                    if (!isDisabled) {
                      onChange(e.currentTarget.id);
                      closeMenu();
                    }
                  };
                  const handleKeyDown = (e: KeyboardEvent<HTMLLIElement>) => {
                    const code = keyboardKey.getCode(e);
                    if ((code === keyboardKey.Enter || code === keyboardKey[' ']) && !isDisabled) {
                      onChange(e.currentTarget.id);
                      e.preventDefault();
                    }
                  };
                  return (
                    <Item
                      key={id}
                      id={id}
                      disabled={isDisabled}
                      dimension={dimension}
                      selected={selected}
                      onClick={handleClick}
                      onKeyDown={handleKeyDown}
                      {...props}
                    />
                  );
                })}
              </DropDownMenu>
            </MenuContainer>
          </PositionInPortal>
        )}
      </>
    );
  },
);
