import * as React from 'react';
import styled, { css } from 'styled-components';
import { Label } from '~/components/Label';
import { uid } from '~/components/common/uid';
import { TYPOGRAPHY } from '~/components/Typography';
import type { InputStatus } from '~/components';

const inlineMixin = css`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;

  > * {
    flex: 1 1 auto;
  }

  ${Label} {
    margin: 0 8px 0 0;
  }
`;

export const Container = styled.div<{ displayInline?: boolean }>`
  display: flex;
  ${(props) => (props.displayInline ? inlineMixin : 'flex-direction: column;')}
`;

const ExtrasContainer = styled.div`
  padding-top: 8px;

  text-align: left;
  font-family: ${() => TYPOGRAPHY.fontFamily};
  font-style: normal;
  font-weight: normal;
  font-size: 14px;
  line-height: 16px;
  color: ${(props) => props.theme.color.text.secondary};

  [data-disabled] & {
    color: ${(props) => props.theme.color.text.tertiary};
  }

  [data-status='error'] & {
    color: ${(props) => props.theme.color.status.danger};
  }

  [data-status='success'] & {
    color: ${(props) => props.theme.color.status.success};
  }
`;

export interface FieldOwnProps {
  /** Текст будет виден ниже компонента */
  extraText?: React.ReactNode;

  /** Установка статуса поля */
  status?: InputStatus;

  /** Установка статуса поле обязательно для заполнения */
  required?: boolean;

  /** Установка статуса disabled */
  disabled?: boolean;

  /**  Имя поля формы */
  label?: React.ReactNode;

  /** Отображать лейбл в одну строчку с инпутом */
  displayInline?: boolean;
}

export interface FieldProps extends FieldOwnProps, React.HTMLAttributes<HTMLDivElement> {}

export const Field = ({ children, ...props }: FieldProps) => {
  const ref = React.useRef<HTMLDivElement>(null);
  const [hasFocus, setFocus] = React.useState(false);

  const { className, style, displayInline, status, extraText, label, required, disabled } = props;
  const { id = uid() } = props;
  const fieldContainerProps = { className, style, displayInline };
  const labelProps = { htmlFor: id, children: label, required };

  React.useEffect(() => {
    if (document.hasFocus() && ref.current?.contains(document.activeElement)) {
      setFocus(true);
    }
  }, [ref.current, document.activeElement]);

  return (
    <Container
      {...fieldContainerProps}
      data-status={status}
      ref={ref}
      onFocusCapture={() => setFocus(true)}
      onBlurCapture={() => setFocus(false)}
      data-focus-within={hasFocus ? '' : undefined}
      data-required-within={required ? '' : undefined}
      data-disabled={disabled ? '' : undefined}
    >
      <Label {...labelProps} />
      <div>
        {children}
        {extraText && <ExtrasContainer>{extraText}</ExtrasContainer>}
      </div>
    </Container>
  );
};
