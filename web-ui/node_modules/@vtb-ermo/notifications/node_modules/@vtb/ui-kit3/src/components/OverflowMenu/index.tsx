import type { HTMLAttributes, KeyboardEvent, MouseEvent, ReactNode } from 'react';
import * as React from 'react';
import { useCallback, useLayoutEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { keyboardKey } from '~/components/common/keyboardKey';
import { refSetter } from '~/components/common/utils/refSetter';
import useInterval from '~/components/common/useInterval';
import { useClickOutside } from '~/components/common/hooks/useClickOutside';

import { DropDownMenu } from '../DropDownMenu';

import type { Dimension } from './Buton';
import { Button } from './Buton';

import type { Position } from './position-utils';
import {
  BottomLeftPosition,
  BottomRightPosition,
  checkMenuPosition,
  TopLeftPosition,
  TopRightPosition,
} from './position-utils';
import { PositionInPortal } from './PositionInPortal';
import { Item } from '../TabOverflowMenu/Item';

const MenuContainer = styled.div<{ position: Position }>`
  position: absolute;
  left: 0;
  right: 0;
  height: 0;
  ${({ position }) => {
    switch (position) {
      case 'bottom-left':
        return BottomLeftPosition;
      case 'top-right':
        return TopRightPosition;
      case 'top-left':
        return TopLeftPosition;

      case 'bottom-right':
      default:
        return BottomRightPosition;
    }
  }}
`;

export interface OverflowMenuProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'onChange'> {
  /** Выбранная опция */
  selected: string | null;
  /** Колбек на изменение выбранной опции */
  onChange: (id: string) => void;
  /** Колбек на открытие меню */
  onOpen?: () => void;
  /** Колбек на закрытие меню */
  onClose?: () => void;
  /** Размер компонента */
  dimension?: Dimension;
  /** Отключение компонента */
  disabled?: boolean;
}

export const OverflowMenu = React.forwardRef<HTMLButtonElement, OverflowMenuProps>(
  ({ children, dimension = 'l', disabled = false, onClose, onOpen, selected, onChange, ...props }, ref) => {
    const [menuOpened, setMenuOpened] = useState<boolean>(false);
    const [menuPosition, setMenuPosition] = useState<Position>('bottom-right');
    const btnRef = useRef<HTMLButtonElement>(null);
    const [menu, setMenu] = useState<HTMLUListElement | null>(null);
    const menuRef = useCallback(
      (node: HTMLUListElement) => {
        setMenu(node);
      },
      [menuOpened],
    );
    const menuDimension = dimension === 's' ? 's' : 'm';

    const reverseMenu = () => {
      setMenuOpened((prevOpened) => {
        prevOpened ? onClose?.() : onOpen?.();
        return !prevOpened;
      });
    };
    const closeMenu = () => {
      setMenuOpened(false);
      onClose?.();
      btnRef.current?.focus();
    };

    useLayoutEffect(() => {
      if (menuOpened) {
        checkMenuPosition(menu, btnRef, menuPosition, setMenuPosition);
      }
    }, [menuOpened, menu, btnRef.current, menuPosition, setMenuPosition]);

    useInterval(checkMenuPosition, 500, menu, btnRef, menuPosition, setMenuPosition);
    useClickOutside([btnRef.current, menu], closeMenu);

    const handleBtnKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {
      const code = keyboardKey.getCode(e);
      if (code === keyboardKey.ArrowDown || code === keyboardKey.Enter || code === keyboardKey[' ']) {
        setMenuOpened(true);
        onOpen?.();
        e.preventDefault();
      }
    };
    const handleMenuKeyDown = (e: KeyboardEvent<HTMLUListElement>) => {
      const code = keyboardKey.getCode(e);
      if (code === keyboardKey.Escape || code === keyboardKey.Tab) {
        closeMenu();
      }
    };
    return (
      <>
        <Button
          {...props}
          ref={refSetter(ref, btnRef)}
          dimension={dimension}
          disabled={disabled}
          menuOpened={menuOpened}
          onKeyDown={handleBtnKeyDown}
          onClick={reverseMenu}
          aria-expanded={menuOpened}
          aria-haspopup={menuOpened}
        />
        {menuOpened && (
          <PositionInPortal targetRef={btnRef} position={menuPosition}>
            <MenuContainer position={menuPosition}>
              <DropDownMenu
                ref={menuRef}
                dimension={menuDimension}
                onKeyDown={handleMenuKeyDown}
                role="listbox"
                data-dimension={menuDimension}
                data-selectedid={selected}
                tabIndex={-1}
              >
                {React.Children.map(children, (child: React.ReactNode) => {
                  if (!React.isValidElement(child)) {
                    return null;
                  }
                  const handleClick = (e: MouseEvent<HTMLElement>) => {
                    if (!child.props.disabled) {
                      onChange(e.currentTarget.id);
                      closeMenu();
                    }
                  };
                  const handleKeyDown = (e: KeyboardEvent<HTMLElement>) => {
                    const code = keyboardKey.getCode(e);
                    if (code === keyboardKey.Enter || code === keyboardKey[' ']) {
                      if (!child.props.disabled) {
                        onChange(e.currentTarget.id);
                        closeMenu();
                        e.preventDefault();
                      }
                    }
                  };
                  return React.cloneElement(child, {
                    onClick: handleClick,
                    onKeyDown: handleKeyDown,
                    'aria-selected': selected === child.props.id,
                    ...child.props,
                  });
                })}
              </DropDownMenu>
            </MenuContainer>
          </PositionInPortal>
        )}
      </>
    );
  },
);
