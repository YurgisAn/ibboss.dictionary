import React, { PropsWithChildren, RefObject, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import observeRect from '~/components/common/observeRect';

import type { Position } from '../OverflowMenu/position-utils';

const PositionedPortalContainer = styled.div`
  position: fixed;
  overflow: visible;
  z-index: ${({ theme }) => theme.zIndex.dropdown};
`;

interface PositionInPortalProps {
  targetRef: RefObject<HTMLElement>;
  position: Position;
  container?: HTMLElement | null;
}

export const PositionInPortal = ({
  targetRef,
  position,
  container,
  children,
}: PropsWithChildren<PositionInPortalProps>) => {
  const positionedPortalContainerRef = useRef<HTMLDivElement>(null);
  const bottomPosition = position === 'bottom-left' || position === 'bottom-right';

  useEffect(() => {
    const node = positionedPortalContainerRef.current;
    if (node && targetRef.current) {
      const observer = observeRect(targetRef.current, (rect) => {
        if (rect) {
          const { x, y, height, width } = rect;
          const { style } = node;
          style.top = bottomPosition ? `${y + height}px` : `${y}px`;
          style.left = `${x}px`;
          style.width = `${width}px`;
          // Do not set height, so that to not overlap target by menu
        }
      });
      observer.observe();
      return () => {
        observer.unobserve();
      };
    }
  }, [targetRef.current, positionedPortalContainerRef.current, position]);

  return ReactDOM.createPortal(
    <PositionedPortalContainer ref={positionedPortalContainerRef} children={children} role="none" />,
    container || document.body,
  );
};
