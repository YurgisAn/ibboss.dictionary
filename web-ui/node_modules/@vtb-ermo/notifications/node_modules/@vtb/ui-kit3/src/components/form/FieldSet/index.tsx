import * as React from 'react';
import styled from 'styled-components';
import { typography } from '~/components/Typography';

export const ALL_FIELDSET_DIMENSIONS_VALUES = ['m', 's'] as const;

/** Размеры компонента относительно начального */
export type FieldSetDimension = typeof ALL_FIELDSET_DIMENSIONS_VALUES[number];

const Legend = styled.legend<{ dimension?: FieldSetDimension }>`
  ${(props) => (props.dimension === 's' ? typography['Additional/S'] : typography['Additional/L'])}
  color: ${(props) => props.theme.color.text.primary};
  fieldset:disabled & {
    color: ${(props) => props.theme.color.text.tertiary};
    cursor: default;
  }
`;

const FieldSetContainer = styled.fieldset<{ dimension?: FieldSetDimension }>`
  border: none;
  padding: 0;

  display: flex;
  flex-direction: column;

  > * {
    margin-top: ${(props) => (props.dimension === 's' ? 12 : 16)}px;
  }
  ${Legend} {
    margin-top: 0;
  }
`;

export interface PropsType extends React.FieldsetHTMLAttributes<HTMLFieldSetElement> {
  legend?: React.ReactNode;
  dimension?: FieldSetDimension;
}

export const FieldSet = (props: PropsType) => {
  const { legend, children, ...fieldsetProps } = props;
  return (
    <FieldSetContainer {...fieldsetProps} data-dimension={fieldsetProps.dimension}>
      {legend && <Legend dimension={props.dimension} children={legend} />}
      {children}
    </FieldSetContainer>
  );
};
