import styled, { css } from 'styled-components';
import { TYPOGRAPHY } from '~/components/Typography';

export type ButtonGroupItemProps = {
  /** Активная кнопка */
  active?: boolean;
};

const colorMixin = css<{ active?: boolean; disabled?: boolean }>`
  color: ${({ active, disabled, theme }) => {
    if (active) return theme.color.text.primary;
    if (disabled) return theme.color.text.tertiary;
    return theme.color.text.secondary;
  }};
`;

const styleTextMixin = css`
  font-weight: 500;
  font-family: ${TYPOGRAPHY.fontFamily};
  white-space: nowrap;
`;

const BORDER_RADIUS = 22;

export const ButtonGroupItem = styled.button<ButtonGroupItemProps>`
  border-radius: ${BORDER_RADIUS}px;
  box-sizing: border-box;
  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};
  display: flex;
  align-items: center;
  position: relative;
  outline: 0;
  border: 2px solid transparent;
  background: ${({ theme, disabled, active }) =>
    active && !disabled ? theme.color.background.primary : 'transparent'};
  ${styleTextMixin};
  ${colorMixin};

  &:hover {
    background: ${({ active, disabled, theme }) => (!active && !disabled ? theme.color.background.tertiaryHover : '')};
  }

  &:focus-visible {
    border: 2px solid ${({ theme }) => theme.color.basic.hover};
    border-radius: ${BORDER_RADIUS}px;
  }

  & svg {
    fill: ${({ active, disabled, theme }) => {
      if (active) return theme.color.text.primary;
      if (disabled) return theme.color.text.tertiary;
      return theme.color.text.secondary;
    }};
  }
`;

ButtonGroupItem.defaultProps = {
  type: 'button',
};
