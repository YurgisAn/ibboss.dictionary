"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.routesConfig = void 0;
var deepOverrideFunctionToString_1 = require("../utils/deepOverrideFunctionToString");
var resolveRouteToString_1 = require("../utils/resolveRouteToString");
var cftm_1 = require("./cftm");
var cnts_ptzp_1 = require("./cnts-ptzp");
var curs_1 = require("./curs");
var daily_special_accounts_1 = require("./daily-special-accounts");
var ermo_starter_kit_1 = require("./ermo-starter-kit");
var kpss_1 = require("./kpss");
var rmvk_1 = require("./rmvk");
var upzp_1 = require("./upzp");
var verifdoc_1 = require("./verifdoc");
// @ts-ignore
var publicPath = PUBLIC_PATH;
var routesConfig = {
    ERMO: {
        params: {
            relativePath: publicPath || '/',
        },
        TASKS: {
            params: {
                relativePath: "tasks",
            },
            ASSIGNED: {
                params: {
                    relativePath: "assigned",
                },
            },
            COMPLETED: {
                params: {
                    relativePath: "completed",
                },
            },
        },
        PROFILE: {
            params: {
                relativePath: "profile",
            },
        },
        SYSTEMS: __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({ params: {
                relativePath: "systems",
            } }, cftm_1.cftmRoutes), cnts_ptzp_1.cntsPtzpRoutes), curs_1.cursRoutes), daily_special_accounts_1.dailySpecialAccountsRoutes), ermo_starter_kit_1.ermoStarterKitRoutes), kpss_1.kpssRoutes), rmvk_1.rmvkRoutes), upzp_1.upzpRoutes), verifdoc_1.verifdocRoutes)
    },
    ERROR_403: {
        params: {
            relativePath: publicPath + "/403",
        },
    },
};
exports.routesConfig = routesConfig;
function toString() {
    var result = resolveRouteToString_1.resolveRouteToString(routesConfig, this);
    return typeof result === 'string' ? result : '';
}
deepOverrideFunctionToString_1.deepOverrideFunctionToString(routesConfig, toString);
//# sourceMappingURL=index.js.map