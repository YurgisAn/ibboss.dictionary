import { deepOverrideFunctionToString } from '../utils/deepOverrideFunctionToString';
import { resolveRouteToString } from '../utils/resolveRouteToString';

import { cftmRoutes } from './cftm';
import { cntsPtzpRoutes } from './cnts-ptzp';
import { cursRoutes } from './curs';
import { dailySpecialAccountsRoutes } from './daily-special-accounts';
import { ermoStarterKitRoutes } from './ermo-starter-kit';
import { kpssRoutes } from './kpss';
import { rmvkRoutes } from './rmvk';
import { upzpRoutes } from './upzp';
import { verifdocRoutes } from './verifdoc';

// @ts-ignore
const publicPath = PUBLIC_PATH;

const routesConfig = {
    ERMO: {
        params: {
            relativePath: publicPath || '/',
        },
        TASKS: {
            params: {
                relativePath: `tasks`,
            },
            ASSIGNED: {
                params: {
                    relativePath: `assigned`,
                },
            },
            COMPLETED: {
                params: {
                    relativePath: `completed`,
                },
            },
        },
        PROFILE: {
            params: {
                relativePath: `profile`,
            },
        },
        SYSTEMS: {
            params: {
                relativePath: `systems`,
            },
            ...cftmRoutes,
            ...cntsPtzpRoutes,
            ...cursRoutes,
            ...dailySpecialAccountsRoutes,
            ...ermoStarterKitRoutes,
            ...kpssRoutes,
            ...rmvkRoutes,
            ...upzpRoutes,
            ...verifdocRoutes,
        }
    },
    ERROR_403: {
        params: {
            relativePath: `${publicPath}/403`,
        },
    },
};

function toString(this: any) {
    const result = resolveRouteToString(routesConfig, this);
    return typeof result === 'string' ? result : '';
}

deepOverrideFunctionToString(routesConfig, toString);

export { routesConfig };