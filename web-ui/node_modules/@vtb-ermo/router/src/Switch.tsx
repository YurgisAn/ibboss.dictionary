import React from 'react';
import { useLocation } from 'react-router-dom';

import type { RoutesKeysConfig } from './types/types';
import type { RouteProps, SwitchProps } from 'react-router-dom';

import { matchPath } from './utils/matchPath'
import { resolvePath } from './utils/resolvePath';
import { useNavigation } from './hooks/useNavigation';

export const Switch: React.FC<SwitchProps> = props => {

    const { children } = props;
    const location = useLocation();
    const { routes } = useNavigation();

    let element, match: any;

    React.Children.forEach(children, child => {

        if (match == null && React.isValidElement(child)) {

            element = child;

            const path = child.props.path || child.props.from;
            const resolvedPath = resolvePath<RoutesKeysConfig, RouteProps['path']>(routes, path);

            match = matchPath(location.pathname, { ...child.props, path: resolvedPath })

        }
    });

    return match
        ? React.cloneElement(element as any, { location, computedMatch: match })
        : null;
};