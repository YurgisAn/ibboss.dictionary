@page "/book/{name}"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Ogress.Sourcebook;
@using Ogress.Sourcebook.Configuration
@using Ogress.Sourcebook.QueryModel
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject CurrentBookService CurrentBook
@inject NavigationManager NavManager

@if (meta is null)
{
    <p>Loading...</p>
}
else
{
    <PageTitle>@meta.Title</PageTitle>

    @if (meta.Filters.Any(f => f.Hints is null || (f.Hints & FilterHints.Hidden) != FilterHints.Hidden))
    {
        <details id="filterPanel">
            <summary id="filterPanelName">Фильтры</summary>
            <p>
                <div class="sb-table">
                    <div class="sb-row">
                        @foreach (var filter in meta.Filters.Where(f => (f.Hints & FilterHints.Hidden) != FilterHints.Hidden))
                        {
                            var id = "input" + filter.Field;
                            var af = filterData.First(f => f.Filter.Field == filter.Field);
                            <div class="sb-cell">
                                @RenderFilter(id, filter, af)
                            </div>
                            <br>
                        }
                    </div>
                </div>
            </p>
        </details>
    }

    <QuickGrid ItemsProvider="@itemsProvider" Pagination="@pagination" @ref="grid" Class="sb-grid">
        @foreach (var ci in meta.Columns)
        {
            var show = (ci.Hints & Hints.Hidden) != Hints.Hidden;
            @if (show && ci.Filter is not null)
            {
                var af = filterData.First(f => f.Filter.Field == ci.Filter);
                string styleFilterCell;
                if (ci != meta.Columns.Last()) styleFilterCell = af.HasValue() ? "sb-gridcellActive" : "sb-gridcellPassive";
                else styleFilterCell = af.HasValue() ? "sb-gridcellActiveLast" : "sb-gridcellPassiveLast";

                <TemplateColumn Title="@ci.Title" Sortable="@(ci.SortBy is not null)" Class="@styleFilterCell">
                    <ColumnOptions>
                        @{
                            var filter = meta.Filters.First(f => f.Field == ci.Filter);
                            @RenderFilter("filter_input" + filter.Field, filter, af, FilterHints.NoLabel)
                        }
                    </ColumnOptions>
                    <ChildContent>
                        <div class="@GetAlignmentStyle(ci.Hints)">
                            @(new MarkupString(context.Items[meta.Columns.IndexOf(ci)].Value))
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
            else if (show)
            {
                var styleStandartCell = ci != meta.Columns.Last() ? "sb-gridcell" : "sb-gridcellLast";
                <TemplateColumn Title="@ci.Title" Sortable="@(ci.SortBy is not null)" Class="@styleStandartCell">
                    <ChildContent>
                        <div class="@GetAlignmentStyle(ci.Hints)">
                            @(new MarkupString(context.Items[meta.Columns.IndexOf(ci)].Value))
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
        }
    </QuickGrid>

    <div id="paginator">
        <div class="paginatorChild" style="margin-right:30px;">
            <div>Всего элементов:</div>
            <div style="margin-left:5px;"><b>@pagination.TotalItemCount</b></div>
        </div>

        <div class="paginatorChild">
            @if (pagination.TotalItemCount.HasValue)
            {
                var capturedIndex = pagination.CurrentPageIndex;
                <button class="buttonPaginatorAdmiral" @onclick="@(() => GoToPageAsync(0))">
                    <span class="oi oi-media-step-backward" style="color: white;"></span>
                </button>
                <button class="buttonPaginatorAdmiral" @onclick="@(() => GoToPageAsync(capturedIndex-1))">
                    <span class="oi oi-media-play"  style="color: white; transform:scaleX(-1)"></span>
                </button>
                <div style="margin:5px;">
                    Страница <b>@(capturedIndex + 1)</b> из <b>@(pagination.LastPageIndex + 1)</b>
                </div>
                <button class="buttonPaginatorAdmiral" @onclick="@(() =>GoToPageAsync(capturedIndex+1>pagination.LastPageIndex?pagination.LastPageIndex.Value:capturedIndex+1))">
                    <span class="oi oi-media-play" style="color: white;"></span>
                </button>
                <button class="buttonPaginatorAdmiral" @onclick="@(() => GoToPageAsync(pagination.LastPageIndex ?? 0))">
                    <span class="oi oi-media-step-forward" style="color: white;"></span>
                </button>
            }
        </div>
    </div>



    @if (displayWarning)
    {
        <div id="blazor-error-ui" style="display:block !important">
            Возможно, данные изменились. Попробуйте <a href="/redirect/@Name" class="reload">перезагрузить</a> страницу.
            <a class="dismiss">🗙</a>
        </div>
    }
}

@functions {
    private RenderFragment? RenderFilter(string id, FilterInfo filter, FilterValue af, FilterHints? overrideHints = FilterHints.None)
    {
        var hints = (filter.Hints ?? FilterHints.None) | (overrideHints ?? FilterHints.None);
        var label = (hints & FilterHints.NoLabel) != FilterHints.NoLabel;
        var focus = new Dictionary<string, object>();
        if (!label) focus.Add("autofocus", "autofocus");

        switch (filter.Editor)
        {
            case FieldEditor.Text:
                return @<input class="inputTextAdmiral" @attributes="@focus" id="@id" name="@id" type="text" placeholder="@(label ? filter.Title : "")" @bind="@af.TextValue">;
            case FieldEditor.Number:
                return @<input class="inputTextAdmiral" @attributes="@focus" type="number" id="@id" name="@id" placeholder="@(label ? filter.Title : "")" @bind="@af.NumberValue">;
            case FieldEditor.Boolean:
                return __builder =>
                {
                    if (label)
                    {
                        <label for="@id" class="lableNameFilter">@filter.Title</label>
                    }
                    <select id="@id" class="selectAdmiral" name="@id" @bind="@af.NumberValue">
                        <option value="-1">всё</option>
                        <option value="1">да</option>
                        <option value="0">нет</option>
                    </select>
                };
            case FieldEditor.List:
                return __builder =>
                {
                    var items = lists![filter.List!];
                    if (label)
                    {
                        <label for="@id" class="lableNameFilter">@filter.Title</label>
                    }
                    var xs = meta!.Lists.First(x => x.Name == filter.List);
                    if (xs.ValueType == ListValueType.Integer)
                    {
                        <select id="@id" class="selectAdmiral" name="@id" @bind="@af.NumberValue">
                            <option value="">Все</option>
                            @foreach (var (c, v) in items)
                            {
                                <option value="@v">@c</option>
                            }
                        </select>
                    }
                    else
                    {
                        <select id="@id" class="selectAdmiral" name="@id" @bind="@af.TextValue">
                            <option value="">Все</option>
                            @foreach (var (c, v) in items)
                            {
                                <option value="@v">@c</option>
                            }
                        </select>
                    }
                };
            case FieldEditor.DateRange:
                return __builder =>
                {
                    if (label)
                    {
                        <label for="@id">@filter.Title</label>
                    }
                    <input type="date" id="start" @attributes="@focus" class="dateInputAdmiral" name="trip-start" @bind-value="af.DateLowerBound" min="2000-01-01">
                    <label>-</label>
                    <input type="date" id="finish" class="dateInputAdmiral" name="trip-finish" @bind-value="af.DateUpperBound" min="2000-01-01">
                    <br>
                    <button class="buttonAdmiral" style="width:130px;" @onclick="(()=>SetDateRange(af,DateSetMode.today))">За сегодня </button>
                    <button class="buttonAdmiral" style="width:130px;" @onclick="(()=>SetDateRange(af,DateSetMode.days30))">За 30 дней </button>
                    <button class="buttonAdmiral" style="width:130px;" @onclick="(()=>SetDateRange(af,DateSetMode.days60))">За 60 дней </button>
                    <button class="buttonAdmiral" style="width:130px;" @onclick="(()=>{af.DateLowerBound=null; af.DateUpperBound=null;})">Очистить</button>
                };
            default:
                return null;
        }
    }

    private Align GetAlignment(Hints? hints)
    {
        if ((hints & Hints.AlignRight) == Hints.AlignRight)
            return Align.Right;
        else if ((hints & Hints.AlignCenter) == Hints.AlignCenter)
            return Align.Center;
        else
            return Align.Left;
    }

    private string GetAlignmentStyle(Hints? hints)
    {
        if ((hints & Hints.AlignRight) == Hints.AlignRight)
            return "align-right";
        else if ((hints & Hints.AlignCenter) == Hints.AlignCenter)
            return "align-center";
        else
            return "align-left";
    }

    private void PopulateFilterData()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var dict = QueryHelpers.ParseQuery(uri.Query);

        foreach (var f in filterData)
        {
            if (dict.TryGetValue(f.Filter.Field, out var value))
            {
                switch (f.Filter.Editor)
                {
                    case FieldEditor.Boolean:
                    case FieldEditor.Number:
                        f.NumberValue = int.Parse(value);
                        break;
                    default:
                        f.TextValue = value;
                        break;
                }
            }
        }

        RefreshQuery();
    }

    private void RefreshQuery()
    {
        var nodes = new List<QueryNode>();

        foreach (var fv in filterData.Where(f => f.HasValue()))
        {
            var value = fv.GetLiteral();


            switch (fv.Filter.Editor)
            {
                case FieldEditor.Text:
                    nodes.Add(Query.Like(fv.Filter.Field, value));
                    break;
                case FieldEditor.DateRange:
                    if (value.Value is DateTime?[] dates && dates.Length == 2 
                        && dates[0] is not null && dates[1] is not null)
                        nodes.Add(Query.Between(fv.Filter.Field, dates[0]!.Value, dates[1]!.Value));
                    break;
                default:
                    nodes.Add(Query.Equals(fv.Filter.Field, value));
                    break;
            }

        }

        if (nodes.Count == 0)
            query = Query.Empty();
        else
            query = nodes.Count > 1 ? Query.And(nodes.ToArray()) : nodes[0];
    }

    private void RefreshGrid()
    {
        if (grid is null)
            return;

        RefreshQuery();
        InitItemsProvider();
        grid.RefreshDataAsync();
    }

    private async Task<List<Item>> GetRowData(int count, int startIndex, string sortCol, bool asc)
    {
        var url = $"sourcebooks/data/{Name}/{count}/{startIndex}/{sortCol}/{asc.ToString().ToLower()}";
        var result = await Http.PutAsJsonAsync<QueryNode?>(url, query ?? Query.Empty());
        var retval = JsonSerializer.Deserialize<List<Item>>(await result.Content.ReadAsStringAsync()!);
        return retval!;
    }

    private void InitItemsProvider()
    {
        itemsProvider = async req =>
        {
            displayWarning = false;
            var result = await Http.PutAsJsonAsync<QueryNode?>($"sourcebooks/count/{Name}", query ?? Query.Empty());
            var totalCount = int.Parse(await result.Content.ReadAsStringAsync());

            var sortCol = "null";

            if (req.SortByColumn is not null)
                sortCol = meta!.Columns.First(f => f.Title == req.SortByColumn.Title).SortBy;

            var count = req.Count ?? 10;
            var data = await GetRowData(count, req.StartIndex, sortCol!, req.SortByAscending);
            var currentPageIndex = req.StartIndex / count;

            if (currentPageIndex > 0 && data!.Count == 0)
            {
                displayWarning = true;
                StateHasChanged();
            }

            if (currentPageIndex + 1 == totalCount / pagination.ItemsPerPage && data!.Count == pagination.ItemsPerPage)
            {
                var extraData = await GetRowData(1, req.StartIndex + count, sortCol!, req.SortByAscending);

                if (extraData.Count > 0)
                {
                    displayWarning = true;
                    StateHasChanged();
                }
            }

            return GridItemsProviderResult.From<Item>(items: data!, totalItemCount: totalCount);
        };
    }

    enum DateSetMode
    {
        today,
        days30,
        days60
    }

    private void SetDateRange(FilterValue fv, DateSetMode mode)
    {
        DateTime date = DateTime.Now;
        switch (mode)
        {
            case DateSetMode.today:
                fv.DateLowerBound = date;
                fv.DateUpperBound = date;
                break;
            case DateSetMode.days30:
                fv.DateLowerBound = date - TimeSpan.FromDays(30); ;
                fv.DateUpperBound = date;
                break;
            case DateSetMode.days60:
                fv.DateLowerBound = date - TimeSpan.FromDays(60);
                fv.DateUpperBound = date;
                break;
        }

    }
}

@code {
    [Parameter]
    public string? Name { get; set; }

    private bool displayWarning;

    private List<FilterValue> filterData = new();
    private QuickGrid<Item>? grid;
    private GridItemsProvider<Item>? itemsProvider;
    private Dictionary<string, List<ListEntry>>? lists;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private BookInfo? meta;
    private QueryNode? query;

    protected override async Task OnInitializedAsync()
    {
        var bookInfo = await Http.GetFromJsonAsync<BookInfo>($"sourcebooks/{Name}");
        var dict = new Dictionary<string, List<ListEntry>>();

        foreach (var xs in bookInfo!.Lists)
        {
            List<ListEntry> data;

            if (xs.Values is not null)
                data = xs.Values.Select(v => new ListEntry(v.Text, v.Value)).ToList();
            else
            {
                var url = $"sourcebooks/list/{Name}/{xs.Name}";
                var result = await Http.PutAsync(url, null);
                var src = await result.Content.ReadAsStringAsync();
                data = JsonSerializer.Deserialize<List<ListEntry>>(src)!;
            }

            dict.Add(xs.Name, data!);
        }

        lists = dict;
        meta = bookInfo;

        CurrentBook.SetCurrentBook(bookInfo);

        foreach (var f in bookInfo!.Filters)
        {
            var fv = new FilterValue(f);
            fv.OnChange += RefreshGrid;
            filterData.Add(fv);
        }

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
        PopulateFilterData();
        InitItemsProvider();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        if (pageIndex >= 0)
            await pagination.SetCurrentPageIndexAsync(pageIndex);
    }
}
